<Events startTimestamp="1638389407073" logVersion="1.0.0.202108012048">
  <Command __id="1" _type="MoveCaretCommand" caretOffset="534" date="Wed Dec 01 15:10:07 EST 2021" docOffset="815" starttimestamp="1638389407073" timestamp="267" />
  <Command __id="3" _type="PauseCommand" date="Wed Dec 01 15:10:56 EST 2021" range="30s-1m" starttimestamp="1638389407073" timestamp="49248">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[48978]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="4" _type="MoveCaretCommand" caretOffset="2148" date="Wed Dec 01 15:10:56 EST 2021" docOffset="2328" starttimestamp="1638389407073" timestamp="49467" />
  <Command __id="6" _type="MoveCaretCommand" caretOffset="534" date="Wed Dec 01 15:10:56 EST 2021" docOffset="815" starttimestamp="1638389407073" timestamp="49832" />
  <Command __id="41" _type="PauseCommand" date="Wed Dec 01 15:12:04 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="117852">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2759]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="40" _type="ShellCommand" date="Wed Dec 01 15:12:04 EST 2021" starttimestamp="1638389407073" timestamp="117852" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="57" _type="PauseCommand" date="Wed Dec 01 15:12:41 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="154274">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[13140]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="56" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:12:41 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="154273" type="Run" />
  <Command __id="58" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:12:41 EST 2021" starttimestamp="1638389407073" timestamp="154305" />
  <Command __id="59" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:12:41 EST 2021" starttimestamp="1638389407073" timestamp="154313" />
  <Command __id="67" _type="PauseCommand" date="Wed Dec 01 15:12:59 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="172081">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[8434]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="66" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:12:59 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="172081" type="Run" />
  <Command __id="68" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:12:59 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="172082" type="Run" />
  <Command __id="69" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:12:59 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="172291" type="Run" />
  <Command __id="70" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:12:59 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="172328" type="Run" />
  <Command __id="71" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:12:59 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="172481" type="Run" />
  <Command __id="72" _type="ConsoleOutput" date="Wed Dec 01 15:12:59 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="172608" type="ConsoleOutput">
    <outputString><![CDATA[JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"LetLambdaAndFunctionTest did not pass completely:Expected strings:10¶42¶8¶8actual string 10¶42¶8¶52%0.0¶¶Test execution time (ms):3¶Test execution time (ms):1"), Diff(INSERT,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="76" _type="PauseCommand" date="Wed Dec 01 15:13:15 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="188423">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[13562]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="75" _type="EclipseCommand" commandID="org.eclipse.ui.views.showView" date="Wed Dec 01 15:13:15 EST 2021" starttimestamp="1638389407073" timestamp="188423" />
  <Command __id="78" _type="PauseCommand" date="Wed Dec 01 15:13:19 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="192817">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4394]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="80" _type="MoveCaretCommand" caretOffset="185" date="Wed Dec 01 15:13:20 EST 2021" docOffset="621" starttimestamp="1638389407073" timestamp="192956" />
  <Command __id="81" _type="MoveCaretCommand" caretOffset="0" date="Wed Dec 01 15:13:20 EST 2021" docOffset="0" starttimestamp="1638389407073" timestamp="192958" />
  <Command __id="149" _type="PauseCommand" date="Wed Dec 01 15:14:15 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="248362">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[8171]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="148" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:14:15 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="248362" type="Run" />
  <Command __id="245" _type="PauseCommand" date="Wed Dec 01 15:16:09 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="362863">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[9555]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="244" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:16:09 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="362863" type="Run" />
  <Command __id="276" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:16:16 EST 2021" starttimestamp="1638389407073" timestamp="369814" />
  <Command __id="277" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:16:16 EST 2021" starttimestamp="1638389407073" timestamp="369817" />
  <Command __id="278" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:16:16 EST 2021" starttimestamp="1638389407073" timestamp="369817" />
  <Command __id="279" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:16:16 EST 2021" starttimestamp="1638389407073" timestamp="369820" />
  <Command __id="281" _type="PauseCommand" date="Wed Dec 01 15:16:18 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="371417">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1597]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="280" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:16:18 EST 2021" starttimestamp="1638389407073" timestamp="371417" />
  <Command __id="282" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:16:18 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="371421" type="Run" />
  <Command __id="283" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:16:19 EST 2021" starttimestamp="1638389407073" timestamp="372027" />
  <Command __id="284" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:16:19 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="372031" type="Run" />
  <Command __id="285" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:16:19 EST 2021" starttimestamp="1638389407073" timestamp="372707" />
  <Command __id="286" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:16:19 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="372711" type="Run" />
  <Command __id="287" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:16:20 EST 2021" starttimestamp="1638389407073" timestamp="373248" />
  <Command __id="288" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:16:20 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="373252" type="Run" />
  <Command __id="290" _type="PauseCommand" date="Wed Dec 01 15:16:24 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="377565">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4313]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="289" _type="SelectTextCommand" caretOffset="544" date="Wed Dec 01 15:16:24 EST 2021" end="544" start="490" starttimestamp="1638389407073" timestamp="377565" />
  <Command __id="291" _type="CopyCommand" date="Wed Dec 01 15:16:25 EST 2021" starttimestamp="1638389407073" timestamp="378399" />
  <Command __id="292" _type="MoveCaretCommand" caretOffset="440" date="Wed Dec 01 15:16:26 EST 2021" docOffset="721" starttimestamp="1638389407073" timestamp="379222" />
  <Command __id="294" _type="InsertStringCommand" date="Wed Dec 01 15:16:26 EST 2021" starttimestamp="1638389407073" timestamp="379715" timestamp2="379715">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="0" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:10:07 EST 2021" docASTNodeCount="317" docActiveCodeLength="1771" docExpressionCount="232" docLength="1952" projectName="a5" starttimestamp="1638389407073" timestamp="170">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package functional;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.FunctionFactory;
import main.lisp.evaluator.function.Lambda;
import main.lisp.evaluator.function.LambdaFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class FunctionEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression arg0, Environment arg1) {
		IdentifierAtom[] argNames1 = new IdentifierAtom[1];
		SExpression current = arg0.getTail().getHead().getTail().getHead();
		int index = 0;
		if(current.isAtom()) {
			argNames1 = new IdentifierAtom[0];
			if (arg0.getTail().isList()) {
				return LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());
			}
			return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());
		}
		while(!current.getTail().isNIL()) {
			// expand size if you still need to add arg names
			argNames1 = expandArray(argNames1, index);
			argNames1[index] = (IdentifierAtom) current.getHead();
			current = current.getTail();
			index++;
		}
		//add last argument (the last argument has nil as its tail)
		if (!current.getHead().isNIL()) {
			argNames1 = expandArray(argNames1, index);
			argNames1[index] = (IdentifierAtom) current.getHead();
		}
		
		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());
	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);
		return FunctionFactory.newInstance(lambda, arg1);
	}
	
	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {
		if (index == array.length) {
			int size = array.length+ 1;
			IdentifierAtom[] newArray = new IdentifierAtom[size];
			for (int i = 0; i < array.length; i++) {
				newArray[i] = array[i];
			}
			//array = newArray;
			return newArray;
		}
		return array;
		
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="2" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:10:56 EST 2021" docASTNodeCount="157" docActiveCodeLength="1024" docExpressionCount="121" docLength="2333" projectName="a5" starttimestamp="1638389407073" timestamp="49245">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\expression\CondEvaluator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package expression;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.NilAtomicExpressionFactory;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.TAtom;

public class CondEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression arg0, Environment arg1) {
//		if (arg0.isAtom()) {
//			return arg0.eval(arg1);
//		}
//		SExpression condition = arg0.getTail();
//		if(condition.isNIL()) {
//				return NilAtomicExpressionFactory.newInstance();
//		}
//		return condHelper(condition, arg1);
//		if (!condition.getHead().isAtom() &&!condition.getHead().getHead().isNIL()) {
//			if (condition.getHead().getTail().isNIL()) {
//				return condition.getHead().getHead().eval(arg1);
//			} else {
//				return condition.getHead().getTail().getHead().eval(arg1);
//			}
//		}else if (condition.getHead().isAtom()) {
//			return condition.getHead().eval(arg1);
//		}else {
//			return eval(condition, arg1);
//		}
		SExpression condition = arg0.getTail();
		if(condition.isNIL()) {
				return NilAtomicExpressionFactory.newInstance();
		}
		if (!condition.getHead().isAtom() &&!condition.getHead().getHead().eval(arg1).isNIL()) {
			if (condition.getHead().getTail().isNIL()) {
				return condition.getHead().getHead().eval(arg1);
			} else {
				return condition.getHead().getTail().getHead().eval(arg1);
			}
		}else if (condition.getHead().isAtom()) {
			return condition.getHead().eval(arg1);
		}else {
			return eval(condition, arg1);
		}
	
		
		
	}
//	private SExpression condHelper(SExpression current, Environment arg1) {
//		if (current.getHead().isList()) {
//			if (current.getHead().getTail().isNIL()) {
//				return current.getHead().getHead().eval(arg1);
//			} else {
//				return current.getHead().getTail().getHead().eval(arg1);
//			}
			// make list helper maybe?
//		}
//		if(!current.getHead().eval(arg1).isNIL()) {
//			if (current.getHead() instanceof TAtom && !current.getTail().isNIL()) {
//				return condHelper(current.getTail(), arg1);
//			}
//			return current.getHead().eval(arg1);
//		} else if (current.getTail().isNIL()) {
//			return current.getTail();
//		} else {
//			return condHelper(current.getTail(), arg1);
//		}
			
	
}
]]></snapshot>
  </Command>
  <Command __id="5" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:10:56 EST 2021" docASTNodeCount="317" docActiveCodeLength="1771" docExpressionCount="232" docLength="1952" projectName="a5" starttimestamp="1638389407073" timestamp="49662">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.FunctionFactory;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class FunctionEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead().getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶			if (arg0.getTail().isList()) {¶				return LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶			}¶			return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);¶		return FunctionFactory.newInstance(lambda, arg1);¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="7" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:11:01 EST 2021" docASTNodeCount="185" docActiveCodeLength="1152" docExpressionCount="142" docLength="1152" projectName="a5" starttimestamp="1638389407073" timestamp="54753">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LetEvaluator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package functional;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class LetEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression arg0, Environment arg1) {
		Environment childEnvironment = arg1.newChild();
		SExpression currentDeclare = arg0.getTail().getHead();
		SExpression currentBody = arg0.getTail().getTail();
		while (!currentDeclare.getTail().isNIL()) {
			childEnvironment.assign((IdentifierAtom)currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead());
			currentDeclare = currentDeclare.getTail();
		}
		if (!currentDeclare.isAtom()) {
			childEnvironment.assign((IdentifierAtom) currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead().eval(arg1));
		}
		SExpression currentEval = currentBody.getHead().eval(childEnvironment);
		while(!currentBody.getTail().isNIL()) {
			currentEval = currentBody.getHead().eval(childEnvironment);
			currentBody = currentBody.getTail();
		}
		return currentEval;
	}

}
]]></snapshot>
  </Command>
  <Command __id="42" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:12:26 EST 2021" docASTNodeCount="185" docActiveCodeLength="1152" docExpressionCount="142" docLength="1152" projectName="a5" starttimestamp="1638389407073" timestamp="139384">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LetEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class LetEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		Environment childEnvironment = arg1.newChild();¶		SExpression currentDeclare = arg0.getTail().getHead();¶		SExpression currentBody = arg0.getTail().getTail();¶		while (!currentDeclare.getTail().isNIL()) {¶			childEnvironment.assign((IdentifierAtom)currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead());¶			currentDeclare = currentDeclare.getTail();¶		}¶		if (!currentDeclare.isAtom()) {¶			childEnvironment.assign((IdentifierAtom) currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead().eval(arg1));¶		}¶		SExpression currentEval = currentBody.getHead().eval(childEnvironment);¶		while(!currentBody.getTail().isNIL()) {¶			currentEval = currentBody.getHead().eval(childEnvironment);¶			currentBody = currentBody.getTail();¶		}¶		return currentEval;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="77" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:13:19 EST 2021" docASTNodeCount="411" docActiveCodeLength="2609" docExpressionCount="312" docLength="2609" projectName="a5" starttimestamp="1638389407073" timestamp="192817">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package functional;

import java.util.Optional;

import main.lisp.evaluator.BuiltinOperationManagerSingleton;
import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.Function;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.ExpressionFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.NilAtomicExpressionFactory;
import main.lisp.parser.terms.SExpression;

public class FuncallEvaluator implements Evaluator {

	@Override
	public SExpression eval(SExpression arg0, Environment arg1) {
		ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());
		SExpression current = arg0.getTail();
		
		SExpression lambdaOrFunction = null;
		if (!current.getHead().isAtom()) {
			lambdaOrFunction = current.getHead().eval(arg1);
		}
		if (lambdaOrFunction instanceof Lambda) {
			Environment childEnvironment = arg1.newChild();
			return evaluateLambda((Lambda) lambdaOrFunction, childEnvironment, arg1, current.getTail());
		} else if(lambdaOrFunction instanceof Function) {
			return evaluateLambda (((Function) lambdaOrFunction).getLambda(), ((Function) lambdaOrFunction).getEnvironment().newChild(), ((Function) lambdaOrFunction).getEnvironment(),current.getTail() );
		} else {
			final Optional<SExpression> isLambda = arg1.lookup((IdentifierAtom) current.getHead());
			if (!isLambda.isEmpty() && isLambda.get() instanceof Lambda) {
				Environment childEnvironment = arg1.newChild();
				return evaluateLambda((Lambda) isLambda.get(), childEnvironment, arg1, current.getTail());
			} else if (!isLambda.isEmpty() && isLambda.get() instanceof Function) {
				
				return evaluateLambda (((Function) isLambda.get()).getLambda(), ((Function) isLambda.get()).getEnvironment().newChild(), ((Function) isLambda.get()).getEnvironment(),current.getTail() ); 
			}
			
			return ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());
		}
	}
	
	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {
		IdentifierAtom[] argNames = lambda.getArgumentNames();
		for(int i = 0; i < argNames.length; i++) {
			if (current.isAtom()) {
				childEnvironment.assign(argNames[i], current);
			} else {
				childEnvironment.assign(argNames[i], current.getHead().eval(environment));
				current = current.getTail();
			}
		}
	return lambda.eval(childEnvironment);
	}

}
]]></snapshot>
  </Command>
  <Command __id="79" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:13:19 EST 2021" docASTNodeCount="185" docActiveCodeLength="1152" docExpressionCount="142" docLength="1152" projectName="a5" starttimestamp="1638389407073" timestamp="192864">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LetEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class LetEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		Environment childEnvironment = arg1.newChild();¶		SExpression currentDeclare = arg0.getTail().getHead();¶		SExpression currentBody = arg0.getTail().getTail();¶		while (!currentDeclare.getTail().isNIL()) {¶			childEnvironment.assign((IdentifierAtom)currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead());¶			currentDeclare = currentDeclare.getTail();¶		}¶		if (!currentDeclare.isAtom()) {¶			childEnvironment.assign((IdentifierAtom) currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead().eval(arg1));¶		}¶		SExpression currentEval = currentBody.getHead().eval(childEnvironment);¶		while(!currentBody.getTail().isNIL()) {¶			currentEval = currentBody.getHead().eval(childEnvironment);¶			currentBody = currentBody.getTail();¶		}¶		return currentEval;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="85" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:13:25 EST 2021" docASTNodeCount="411" docActiveCodeLength="2609" docExpressionCount="312" docLength="2609" projectName="a5" starttimestamp="1638389407073" timestamp="198715">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.Optional;¶¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Function;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.ExpressionFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶¶public class FuncallEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		SExpression current = arg0.getTail();¶		¶		SExpression lambdaOrFunction = null;¶		if (!current.getHead().isAtom()) {¶			lambdaOrFunction = current.getHead().eval(arg1);¶		}¶		if (lambdaOrFunction instanceof Lambda) {¶			Environment childEnvironment = arg1.newChild();¶			return evaluateLambda((Lambda) lambdaOrFunction, childEnvironment, arg1, current.getTail());¶		} else if(lambdaOrFunction instanceof Function) {¶			return evaluateLambda (((Function) lambdaOrFunction).getLambda(), ((Function) lambdaOrFunction).getEnvironment().newChild(), ((Function) lambdaOrFunction).getEnvironment(),current.getTail() );¶		} else {¶			final Optional<SExpression> isLambda = arg1.lookup((IdentifierAtom) current.getHead());¶			if (!isLambda.isEmpty() && isLambda.get() instanceof Lambda) {¶				Environment childEnvironment = arg1.newChild();¶				return evaluateLambda((Lambda) isLambda.get(), childEnvironment, arg1, current.getTail());¶			} else if (!isLambda.isEmpty() && isLambda.get() instanceof Function) {¶				¶				return evaluateLambda (((Function) isLambda.get()).getLambda(), ((Function) isLambda.get()).getEnvironment().newChild(), ((Function) isLambda.get()).getEnvironment(),current.getTail() ); ¶			}¶			¶			return ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		}¶	}¶	¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="150" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:14:16 EST 2021" docASTNodeCount="185" docActiveCodeLength="1152" docExpressionCount="142" docLength="1152" projectName="a5" starttimestamp="1638389407073" timestamp="249482">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LetEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class LetEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		Environment childEnvironment = arg1.newChild();¶		SExpression currentDeclare = arg0.getTail().getHead();¶		SExpression currentBody = arg0.getTail().getTail();¶		while (!currentDeclare.getTail().isNIL()) {¶			childEnvironment.assign((IdentifierAtom)currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead());¶			currentDeclare = currentDeclare.getTail();¶		}¶		if (!currentDeclare.isAtom()) {¶			childEnvironment.assign((IdentifierAtom) currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead().eval(arg1));¶		}¶		SExpression currentEval = currentBody.getHead().eval(childEnvironment);¶		while(!currentBody.getTail().isNIL()) {¶			currentEval = currentBody.getHead().eval(childEnvironment);¶			currentBody = currentBody.getTail();¶		}¶		return currentEval;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="246" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:16:12 EST 2021" docASTNodeCount="317" docActiveCodeLength="1771" docExpressionCount="232" docLength="1952" projectName="a5" starttimestamp="1638389407073" timestamp="365025">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.FunctionFactory;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class FunctionEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead().getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶			if (arg0.getTail().isList()) {¶				return LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶			}¶			return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);¶		return FunctionFactory.newInstance(lambda, arg1);¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="249" _type="Insert" date="Wed Dec 01 15:16:13 EST 2021" docASTNodeCount="319" docActiveCodeLength="1775" docExpressionCount="234" docLength="1956" length="4" offset="815" repeat="4" starttimestamp="1638389407073" timestamp="365944" timestamp2="366406">
    <text><![CDATA[.get]]></text>
  </DocumentChange>
  <DocumentChange __id="256" _type="Replace" date="Wed Dec 01 15:16:14 EST 2021" docASTNodeCount="319" docActiveCodeLength="1781" docExpressionCount="234" docLength="1962" endLine="20" insertionLength="9" int_docASTNodeCount="319" int_docActiveCodeLength="1772" int_docExpressionCount="234" int_docLength="1953" length="3" offset="816" startLine="20" starttimestamp="1638389407073" timestamp="367026">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[getHead()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="293" _type="Insert" date="Wed Dec 01 15:16:26 EST 2021" docASTNodeCount="319" docActiveCodeLength="1787" docExpressionCount="234" docLength="1968" length="6" offset="721" starttimestamp="1638389407073" timestamp="379705">
    <text><![CDATA[
				]]></text>
  </DocumentChange>
  <Command __id="296" _type="PauseCommand" date="Wed Dec 01 15:16:28 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="381823">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2108]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="295" _type="MoveCaretCommand" caretOffset="480" date="Wed Dec 01 15:16:28 EST 2021" docOffset="761" starttimestamp="1638389407073" timestamp="381823" />
  <Command __id="297" _type="MoveCaretCommand" caretOffset="446" date="Wed Dec 01 15:16:29 EST 2021" docOffset="727" starttimestamp="1638389407073" timestamp="382658" />
  <Command __id="299" _type="InsertStringCommand" date="Wed Dec 01 15:16:30 EST 2021" starttimestamp="1638389407073" timestamp="383080" timestamp2="383080">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="301" _type="InsertStringCommand" date="Wed Dec 01 15:16:30 EST 2021" starttimestamp="1638389407073" timestamp="383301" timestamp2="383301">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="303" _type="InsertStringCommand" date="Wed Dec 01 15:16:30 EST 2021" starttimestamp="1638389407073" timestamp="383405" timestamp2="383405">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="306" _type="PauseCommand" date="Wed Dec 01 15:16:31 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="384666">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1261]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="305" _type="InsertStringCommand" date="Wed Dec 01 15:16:31 EST 2021" starttimestamp="1638389407073" timestamp="384666" timestamp2="384666">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="308" _type="InsertStringCommand" date="Wed Dec 01 15:16:31 EST 2021" starttimestamp="1638389407073" timestamp="384726" timestamp2="384726">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="310" _type="InsertStringCommand" date="Wed Dec 01 15:16:31 EST 2021" starttimestamp="1638389407073" timestamp="384819" timestamp2="384819">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="312" _type="InsertStringCommand" date="Wed Dec 01 15:16:32 EST 2021" starttimestamp="1638389407073" timestamp="385208" timestamp2="385208">
    <data><![CDATA[F]]></data>
  </Command>
  <Command __id="314" _type="InsertStringCommand" date="Wed Dec 01 15:16:32 EST 2021" starttimestamp="1638389407073" timestamp="385347" timestamp2="385347">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="316" _type="InsertStringCommand" date="Wed Dec 01 15:16:32 EST 2021" starttimestamp="1638389407073" timestamp="385486" timestamp2="385486">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="318" _type="InsertStringCommand" date="Wed Dec 01 15:16:32 EST 2021" starttimestamp="1638389407073" timestamp="385704" timestamp2="385704">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="320" _type="InsertStringCommand" date="Wed Dec 01 15:16:32 EST 2021" starttimestamp="1638389407073" timestamp="385823" timestamp2="385823">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="322" _type="InsertStringCommand" date="Wed Dec 01 15:16:33 EST 2021" starttimestamp="1638389407073" timestamp="385937" timestamp2="385937">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="324" _type="InsertStringCommand" date="Wed Dec 01 15:16:33 EST 2021" starttimestamp="1638389407073" timestamp="386021" timestamp2="386021">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="326" _type="InsertStringCommand" date="Wed Dec 01 15:16:33 EST 2021" starttimestamp="1638389407073" timestamp="386336" timestamp2="386336">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="327" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Dec 01 15:16:33 EST 2021" start_end="START" starttimestamp="1638389407073" timestamp="386338" />
  <Command __id="332" _type="PauseCommand" date="Wed Dec 01 15:16:35 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="388245">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1907]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="350" _type="PauseCommand" date="Wed Dec 01 15:16:38 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="391163">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Delete]]></prev>
    <pause><![CDATA[2918]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="355" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Dec 01 15:16:39 EST 2021" start_end="END" starttimestamp="1638389407073" timestamp="391989" />
  <Command __id="357" _type="InsertStringCommand" date="Wed Dec 01 15:16:39 EST 2021" starttimestamp="1638389407073" timestamp="392061" timestamp2="392061">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="359" _type="InsertStringCommand" date="Wed Dec 01 15:16:39 EST 2021" starttimestamp="1638389407073" timestamp="392137" timestamp2="392137">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="361" _type="InsertStringCommand" date="Wed Dec 01 15:16:39 EST 2021" starttimestamp="1638389407073" timestamp="392301" timestamp2="392301">
    <data><![CDATA[s]]></data>
  </Command>
  <Command __id="363" _type="InsertStringCommand" date="Wed Dec 01 15:16:39 EST 2021" starttimestamp="1638389407073" timestamp="392428" timestamp2="392428">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="365" _type="InsertStringCommand" date="Wed Dec 01 15:16:39 EST 2021" starttimestamp="1638389407073" timestamp="392525" timestamp2="392525">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="367" _type="InsertStringCommand" date="Wed Dec 01 15:16:39 EST 2021" starttimestamp="1638389407073" timestamp="392593" timestamp2="392593">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="369" _type="InsertStringCommand" date="Wed Dec 01 15:16:39 EST 2021" starttimestamp="1638389407073" timestamp="392707" timestamp2="392707">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="371" _type="InsertStringCommand" date="Wed Dec 01 15:16:39 EST 2021" starttimestamp="1638389407073" timestamp="392915" timestamp2="392915">
    <data><![CDATA[v]]></data>
  </Command>
  <Command __id="373" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:16:40 EST 2021" starttimestamp="1638389407073" timestamp="393470" />
  <Command __id="375" _type="InsertStringCommand" date="Wed Dec 01 15:16:40 EST 2021" starttimestamp="1638389407073" timestamp="393760" timestamp2="393760">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="377" _type="InsertStringCommand" date="Wed Dec 01 15:16:40 EST 2021" starttimestamp="1638389407073" timestamp="393917" timestamp2="393917">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="379" _type="InsertStringCommand" date="Wed Dec 01 15:16:41 EST 2021" starttimestamp="1638389407073" timestamp="394057" timestamp2="394057">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="381" _type="InsertStringCommand" date="Wed Dec 01 15:16:41 EST 2021" starttimestamp="1638389407073" timestamp="394137" timestamp2="394137">
    <data><![CDATA[y]]></data>
  </Command>
  <Command __id="383" _type="InsertStringCommand" date="Wed Dec 01 15:16:41 EST 2021" starttimestamp="1638389407073" timestamp="394254" timestamp2="394254">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="385" _type="InsertStringCommand" date="Wed Dec 01 15:16:41 EST 2021" starttimestamp="1638389407073" timestamp="394401" timestamp2="394401">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="387" _type="InsertStringCommand" date="Wed Dec 01 15:16:41 EST 2021" starttimestamp="1638389407073" timestamp="394543" timestamp2="394543">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="389" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:16:41 EST 2021" starttimestamp="1638389407073" timestamp="394898" />
  <Command __id="391" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:16:42 EST 2021" starttimestamp="1638389407073" timestamp="395049" />
  <Command __id="393" _type="InsertStringCommand" date="Wed Dec 01 15:16:42 EST 2021" starttimestamp="1638389407073" timestamp="395738" timestamp2="395738">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="395" _type="PasteCommand" date="Wed Dec 01 15:16:43 EST 2021" starttimestamp="1638389407073" timestamp="396098" />
  <Command __id="426" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:16:49 EST 2021" starttimestamp="1638389407073" timestamp="402509" />
  <Command __id="427" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:16:49 EST 2021" starttimestamp="1638389407073" timestamp="402511" />
  <Command __id="428" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:16:49 EST 2021" starttimestamp="1638389407073" timestamp="402511" />
  <Command __id="429" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:16:49 EST 2021" starttimestamp="1638389407073" timestamp="402512" />
  <Command __id="430" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:16:49 EST 2021" starttimestamp="1638389407073" timestamp="402513" />
  <Command __id="431" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:16:49 EST 2021" starttimestamp="1638389407073" timestamp="402515" />
  <Command __id="579" _type="PauseCommand" date="Wed Dec 01 15:19:13 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="546748">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2532]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="578" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:19:13 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="546747" type="Run" />
  <Command __id="580" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:19:14 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="547292" type="Run" />
  <Command __id="582" _type="PauseCommand" date="Wed Dec 01 15:19:52 EST 2021" range="30s-1m" starttimestamp="1638389407073" timestamp="585364">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[38072]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="583" _type="MoveCaretCommand" caretOffset="990" date="Wed Dec 01 15:19:52 EST 2021" docOffset="1120" starttimestamp="1638389407073" timestamp="585451" />
  <Command __id="585" _type="PauseCommand" date="Wed Dec 01 15:20:05 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="598855">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[13404]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="584" _type="ShellCommand" date="Wed Dec 01 15:20:05 EST 2021" starttimestamp="1638389407073" timestamp="598855" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="587" _type="PauseCommand" date="Wed Dec 01 15:20:09 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="602095">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3240]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="586" _type="ShellCommand" date="Wed Dec 01 15:20:09 EST 2021" starttimestamp="1638389407073" timestamp="602095" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="594" _type="PauseCommand" date="Wed Dec 01 15:20:25 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="618283">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[11843]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="593" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:20:25 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="618283" type="Run" />
  <Command __id="595" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:20:25 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="618529" type="Run" />
  <Command __id="596" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:20:25 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="618683" type="Run" />
  <Command __id="597" _type="ConsoleOutput" date="Wed Dec 01 15:20:25 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="618809" type="ConsoleOutput">
    <outputString><![CDATA[JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55.¶")]]]></diff>
  </Command>
  <Command __id="599" _type="PauseCommand" date="Wed Dec 01 15:20:27 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="620065">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1256]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[PasteCommand]]></next>
  </Command>
  <Command __id="598" _type="PasteCommand" date="Wed Dec 01 15:20:27 EST 2021" starttimestamp="1638389407073" timestamp="620065" />
  <Command __id="605" _type="PauseCommand" date="Wed Dec 01 15:20:38 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="631099">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3217]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="604" _type="ShellCommand" date="Wed Dec 01 15:20:38 EST 2021" starttimestamp="1638389407073" timestamp="631099" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="607" _type="MoveCaretCommand" caretOffset="990" date="Wed Dec 01 15:20:38 EST 2021" docOffset="1120" starttimestamp="1638389407073" timestamp="631294" />
  <Command __id="707" _type="PauseCommand" date="Wed Dec 01 15:23:07 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="780783">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[9846]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="706" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:23:07 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="780783" type="Run" />
  <Command __id="708" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:23:08 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="780957" type="Run" />
  <Command __id="709" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:23:08 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="781421" type="Run" />
  <Command __id="710" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:23:08 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="781560" type="Run" />
  <Command __id="711" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:23:09 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="782115" type="Run" />
  <Command __id="712" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:23:09 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="782262" type="Run" />
  <Command __id="713" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:23:09 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="782781" type="Run" />
  <Command __id="714" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:23:09 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="782924" type="Run" />
  <DocumentChange __id="298" _type="Insert" date="Wed Dec 01 15:16:30 EST 2021" docASTNodeCount="196" docActiveCodeLength="1804" docExpressionCount="133" docLength="1985" length="17" offset="727" repeat="17" starttimestamp="1638389407073" timestamp="383077" timestamp2="386779">
    <text><![CDATA[LambdaFactory.new]]></text>
  </DocumentChange>
  <DocumentChange __id="331" _type="Delete" date="Wed Dec 01 15:16:35 EST 2021" docASTNodeCount="319" docActiveCodeLength="1787" docExpressionCount="234" docLength="1968" endLine="20" length="17" offset="727" repeat="17" startLine="20" starttimestamp="1638389407073" timestamp="388245" timestamp2="390918">
    <text><![CDATA[LambdaFactory.new]]></text>
  </DocumentChange>
  <DocumentChange __id="349" _type="Insert" date="Wed Dec 01 15:16:38 EST 2021" docASTNodeCount="324" docActiveCodeLength="1800" docExpressionCount="236" docLength="1981" length="13" offset="727" repeat="13" starttimestamp="1638389407073" timestamp="391163" timestamp2="392911">
    <text><![CDATA[SExpression v]]></text>
  </DocumentChange>
  <DocumentChange __id="372" _type="Delete" date="Wed Dec 01 15:16:40 EST 2021" docASTNodeCount="321" docActiveCodeLength="1799" docExpressionCount="235" docLength="1980" endLine="20" length="1" offset="739" startLine="20" starttimestamp="1638389407073" timestamp="393467">
    <text><![CDATA[v]]></text>
  </DocumentChange>
  <DocumentChange __id="374" _type="Insert" date="Wed Dec 01 15:16:40 EST 2021" docASTNodeCount="324" docActiveCodeLength="1806" docExpressionCount="236" docLength="1987" length="7" offset="739" repeat="7" starttimestamp="1638389407073" timestamp="393756" timestamp2="394538">
    <text><![CDATA[body - ]]></text>
  </DocumentChange>
  <DocumentChange __id="388" _type="Delete" date="Wed Dec 01 15:16:41 EST 2021" docASTNodeCount="324" docActiveCodeLength="1804" docExpressionCount="236" docLength="1985" endLine="20" length="2" offset="744" repeat="2" startLine="20" starttimestamp="1638389407073" timestamp="394895" timestamp2="395047">
    <text><![CDATA[- ]]></text>
  </DocumentChange>
  <DocumentChange __id="392" _type="Insert" date="Wed Dec 01 15:16:42 EST 2021" docASTNodeCount="335" docActiveCodeLength="1859" docExpressionCount="247" docLength="2040" length="55" offset="744" repeat="2" starttimestamp="1638389407073" timestamp="395735" timestamp2="396092">
    <text><![CDATA[=arg0.getTail().getHead().getTail().getTail().getHead()]]></text>
  </DocumentChange>
  <DocumentChange __id="398" _type="Delete" date="Wed Dec 01 15:16:46 EST 2021" docASTNodeCount="325" docActiveCodeLength="1804" docExpressionCount="237" docLength="1985" endLine="21" length="55" offset="848" startLine="21" starttimestamp="1638389407073" timestamp="399356">
    <text><![CDATA[ arg0.getTail().getHead().getTail().getTail().getHead()]]></text>
  </DocumentChange>
  <DocumentChange __id="400" _type="Insert" date="Wed Dec 01 15:16:46 EST 2021" docASTNodeCount="325" docActiveCodeLength="1809" docExpressionCount="237" docLength="1990" length="5" offset="848" repeat="5" starttimestamp="1638389407073" timestamp="399551" timestamp2="400573">
    <text><![CDATA[ body]]></text>
  </DocumentChange>
  <DocumentChange __id="434" _type="Insert" date="Wed Dec 01 15:16:52 EST 2021" docASTNodeCount="325" docActiveCodeLength="1810" docExpressionCount="237" docLength="1991" length="1" offset="799" starttimestamp="1638389407073" timestamp="405842">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <Command __id="477" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:17:06 EST 2021" projectName="null" starttimestamp="1638389407073" timestamp="419486">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="480" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:17:07 EST 2021" docASTNodeCount="288" docActiveCodeLength="1838" docExpressionCount="211" docLength="1923" projectName="a5" starttimestamp="1638389407073" timestamp="420551">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\evaluators\LambdaSExpressionEvaluator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package evaluators;

import main.lisp.evaluator.BasicExpressionEvaluator;
import main.lisp.evaluator.BuiltinOperationManagerSingleton;
import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.Lambda;
import main.lisp.parser.terms.DecimalAtom;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import main.lisp.parser.terms.TAtomicExpressionFactory;

public class LambdaSExpressionEvaluator extends BasicExpressionEvaluator {
	@Override
	public SExpression eval(SExpression expr, Environment environment) {
		// evaluates lambda first
		if (!expr.getHead().isAtom()) {
			SExpression eval = super.eval(expr.getHead(), environment);
			if (eval instanceof Lambda) {
				Environment childEnvironment = environment.newChild();
				return evaluateLambda((Lambda) eval, childEnvironment, environment, expr.getTail());
			}
			SExpression isExpressionNested = expr.getHead().getHead();
			if (!isExpressionNested.isAtom()) {
				eval = super.eval(isExpressionNested, environment);
				if (eval instanceof Lambda) {
					Environment childEnvironment = environment.newChild();
					return evaluateLambda((Lambda) eval, childEnvironment, environment, expr.getTail());
				}
			}
		}
			// when it is not a lambda
			return super.eval(expr, environment);
		}

	// produces your lambda evaluation
	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {
		IdentifierAtom[] argNames = lambda.getArgumentNames();
		for(int i = 0; i < argNames.length; i++) {
			if (current.isAtom()) {
				childEnvironment.assign(argNames[i], current);
			} else {
				childEnvironment.assign(argNames[i], current.getHead().eval(environment));
				current = current.getTail();
			}
		}
	return lambda.eval(childEnvironment);
	}
	

}

]]></snapshot>
  </Command>
  <Command __id="484" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:17:09 EST 2021" projectName="null" starttimestamp="1638389407073" timestamp="422208">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="581" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:19:52 EST 2021" docASTNodeCount="185" docActiveCodeLength="1152" docExpressionCount="142" docLength="1152" projectName="a5" starttimestamp="1638389407073" timestamp="585364">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LetEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class LetEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		Environment childEnvironment = arg1.newChild();¶		SExpression currentDeclare = arg0.getTail().getHead();¶		SExpression currentBody = arg0.getTail().getTail();¶		while (!currentDeclare.getTail().isNIL()) {¶			childEnvironment.assign((IdentifierAtom)currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead());¶			currentDeclare = currentDeclare.getTail();¶		}¶		if (!currentDeclare.isAtom()) {¶			childEnvironment.assign((IdentifierAtom) currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead().eval(arg1));¶		}¶		SExpression currentEval = currentBody.getHead().eval(childEnvironment);¶		while(!currentBody.getTail().isNIL()) {¶			currentEval = currentBody.getHead().eval(childEnvironment);¶			currentBody = currentBody.getTail();¶		}¶		return currentEval;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="588" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:20:12 EST 2021" docASTNodeCount="325" docActiveCodeLength="1810" docExpressionCount="237" docLength="1991" projectName="a5" starttimestamp="1638389407073" timestamp="605460">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.FunctionFactory;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class FunctionEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead().getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶			if (arg0.getTail().isList()) {¶				"), Diff(DELETE,"return LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail()"), Diff(INSERT,"SExpression body =arg0.getTail().getHead().getTail().getTail().getHead();¶				return LambdaFactory.newInstance(argNames1, body"), Diff(EQUAL,");¶			}¶			return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);¶		return FunctionFactory.newInstance(lambda, arg1);¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package functional;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.FunctionFactory;
import main.lisp.evaluator.function.Lambda;
import main.lisp.evaluator.function.LambdaFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class FunctionEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression arg0, Environment arg1) {
		IdentifierAtom[] argNames1 = new IdentifierAtom[1];
		SExpression current = arg0.getTail().getHead().getTail().getHead();
		int index = 0;
		if(current.isAtom()) {
			argNames1 = new IdentifierAtom[0];
			if (arg0.getTail().isList()) {
				SExpression body =arg0.getTail().getHead().getTail().getTail().getHead();
				return LambdaFactory.newInstance(argNames1, body);
			}
			return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());
		}
		while(!current.getTail().isNIL()) {
			// expand size if you still need to add arg names
			argNames1 = expandArray(argNames1, index);
			argNames1[index] = (IdentifierAtom) current.getHead();
			current = current.getTail();
			index++;
		}
		//add last argument (the last argument has nil as its tail)
		if (!current.getHead().isNIL()) {
			argNames1 = expandArray(argNames1, index);
			argNames1[index] = (IdentifierAtom) current.getHead();
		}
		
		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());
	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);
		return FunctionFactory.newInstance(lambda, arg1);
	}
	
	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {
		if (index == array.length) {
			int size = array.length+ 1;
			IdentifierAtom[] newArray = new IdentifierAtom[size];
			for (int i = 0; i < array.length; i++) {
				newArray[i] = array[i];
			}
			//array = newArray;
			return newArray;
		}
		return array;
		
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="606" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:20:38 EST 2021" docASTNodeCount="185" docActiveCodeLength="1152" docExpressionCount="142" docLength="1152" projectName="a5" starttimestamp="1638389407073" timestamp="631214">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LetEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class LetEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		Environment childEnvironment = arg1.newChild();¶		SExpression currentDeclare = arg0.getTail().getHead();¶		SExpression currentBody = arg0.getTail().getTail();¶		while (!currentDeclare.getTail().isNIL()) {¶			childEnvironment.assign((IdentifierAtom)currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead());¶			currentDeclare = currentDeclare.getTail();¶		}¶		if (!currentDeclare.isAtom()) {¶			childEnvironment.assign((IdentifierAtom) currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead().eval(arg1));¶		}¶		SExpression currentEval = currentBody.getHead().eval(childEnvironment);¶		while(!currentBody.getTail().isNIL()) {¶			currentEval = currentBody.getHead().eval(childEnvironment);¶			currentBody = currentBody.getTail();¶		}¶		return currentEval;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="611" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:20:40 EST 2021" docASTNodeCount="411" docActiveCodeLength="2609" docExpressionCount="312" docLength="2609" projectName="a5" starttimestamp="1638389407073" timestamp="633135">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.Optional;¶¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Function;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.ExpressionFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶¶public class FuncallEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		SExpression current = arg0.getTail();¶		¶		SExpression lambdaOrFunction = null;¶		if (!current.getHead().isAtom()) {¶			lambdaOrFunction = current.getHead().eval(arg1);¶		}¶		if (lambdaOrFunction instanceof Lambda) {¶			Environment childEnvironment = arg1.newChild();¶			return evaluateLambda((Lambda) lambdaOrFunction, childEnvironment, arg1, current.getTail());¶		} else if(lambdaOrFunction instanceof Function) {¶			return evaluateLambda (((Function) lambdaOrFunction).getLambda(), ((Function) lambdaOrFunction).getEnvironment().newChild(), ((Function) lambdaOrFunction).getEnvironment(),current.getTail() );¶		} else {¶			final Optional<SExpression> isLambda = arg1.lookup((IdentifierAtom) current.getHead());¶			if (!isLambda.isEmpty() && isLambda.get() instanceof Lambda) {¶				Environment childEnvironment = arg1.newChild();¶				return evaluateLambda((Lambda) isLambda.get(), childEnvironment, arg1, current.getTail());¶			} else if (!isLambda.isEmpty() && isLambda.get() instanceof Function) {¶				¶				return evaluateLambda (((Function) isLambda.get()).getLambda(), ((Function) isLambda.get()).getEnvironment().newChild(), ((Function) isLambda.get()).getEnvironment(),current.getTail() ); ¶			}¶			¶			return ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		}¶	}¶	¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="625" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:21:20 EST 2021" projectName="null" starttimestamp="1638389407073" timestamp="673910">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="715" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:23:16 EST 2021" docASTNodeCount="325" docActiveCodeLength="1810" docExpressionCount="237" docLength="1991" projectName="a5" starttimestamp="1638389407073" timestamp="788952">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.FunctionFactory;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class FunctionEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead().getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶			if (arg0.getTail().isList()) {¶				SExpression body =arg0.getTail().getHead().getTail().getTail().getHead();¶				return LambdaFactory.newInstance(argNames1, body);¶			}¶			return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);¶		return FunctionFactory.newInstance(lambda, arg1);¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="716" _type="PauseCommand" date="Wed Dec 01 15:23:16 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="788953">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6028]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="717" _type="SelectTextCommand" caretOffset="567" date="Wed Dec 01 15:23:16 EST 2021" end="574" start="567" starttimestamp="1638389407073" timestamp="789036" />
  <Command __id="718" _type="SelectTextCommand" caretOffset="532" date="Wed Dec 01 15:23:17 EST 2021" end="574" start="532" starttimestamp="1638389407073" timestamp="789983" />
  <Command __id="719" _type="CopyCommand" date="Wed Dec 01 15:23:17 EST 2021" starttimestamp="1638389407073" timestamp="790792" />
  <Command __id="720" _type="MoveCaretCommand" caretOffset="519" date="Wed Dec 01 15:23:18 EST 2021" docOffset="800" starttimestamp="1638389407073" timestamp="791775" />
  <Command __id="722" _type="InsertStringCommand" date="Wed Dec 01 15:23:19 EST 2021" starttimestamp="1638389407073" timestamp="792098" timestamp2="792098">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="724" _type="InsertStringCommand" date="Wed Dec 01 15:23:19 EST 2021" starttimestamp="1638389407073" timestamp="792812" timestamp2="792812">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="726" _type="InsertStringCommand" date="Wed Dec 01 15:23:20 EST 2021" starttimestamp="1638389407073" timestamp="792973" timestamp2="792973">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="728" _type="InsertStringCommand" date="Wed Dec 01 15:23:20 EST 2021" starttimestamp="1638389407073" timestamp="793098" timestamp2="793098">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="730" _type="InsertStringCommand" date="Wed Dec 01 15:23:20 EST 2021" starttimestamp="1638389407073" timestamp="793314" timestamp2="793314">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="732" _type="InsertStringCommand" date="Wed Dec 01 15:23:20 EST 2021" starttimestamp="1638389407073" timestamp="793373" timestamp2="793373">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="734" _type="InsertStringCommand" date="Wed Dec 01 15:23:20 EST 2021" starttimestamp="1638389407073" timestamp="793450" timestamp2="793450">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="736" _type="InsertStringCommand" date="Wed Dec 01 15:23:20 EST 2021" starttimestamp="1638389407073" timestamp="793678" timestamp2="793678">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="738" _type="InsertStringCommand" date="Wed Dec 01 15:23:20 EST 2021" starttimestamp="1638389407073" timestamp="793914" timestamp2="793914">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="740" _type="InsertStringCommand" date="Wed Dec 01 15:23:21 EST 2021" starttimestamp="1638389407073" timestamp="794008" timestamp2="794008">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="742" _type="InsertStringCommand" date="Wed Dec 01 15:23:21 EST 2021" starttimestamp="1638389407073" timestamp="794157" timestamp2="794157">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="744" _type="InsertStringCommand" date="Wed Dec 01 15:23:21 EST 2021" starttimestamp="1638389407073" timestamp="794340" timestamp2="794340">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="746" _type="InsertStringCommand" date="Wed Dec 01 15:23:21 EST 2021" starttimestamp="1638389407073" timestamp="794409" timestamp2="794409">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="748" _type="InsertStringCommand" date="Wed Dec 01 15:23:21 EST 2021" starttimestamp="1638389407073" timestamp="794485" timestamp2="794485">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="750" _type="InsertStringCommand" date="Wed Dec 01 15:23:21 EST 2021" starttimestamp="1638389407073" timestamp="794593" timestamp2="794593">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="752" _type="InsertStringCommand" date="Wed Dec 01 15:23:21 EST 2021" starttimestamp="1638389407073" timestamp="794734" timestamp2="794734">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="754" _type="InsertStringCommand" date="Wed Dec 01 15:23:21 EST 2021" starttimestamp="1638389407073" timestamp="794849" timestamp2="794849">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="756" _type="PasteCommand" date="Wed Dec 01 15:23:22 EST 2021" starttimestamp="1638389407073" timestamp="795459" />
  <Command __id="759" _type="PauseCommand" date="Wed Dec 01 15:23:24 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="797215">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1756]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[InsertStringCommand]]></next>
  </Command>
  <Command __id="758" _type="InsertStringCommand" date="Wed Dec 01 15:23:24 EST 2021" starttimestamp="1638389407073" timestamp="797215" timestamp2="797215">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="790" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:23:29 EST 2021" starttimestamp="1638389407073" timestamp="802311" />
  <Command __id="791" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:23:29 EST 2021" starttimestamp="1638389407073" timestamp="802312" />
  <Command __id="792" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:23:29 EST 2021" starttimestamp="1638389407073" timestamp="802313" />
  <Command __id="793" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:23:29 EST 2021" starttimestamp="1638389407073" timestamp="802313" />
  <Command __id="794" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:23:29 EST 2021" starttimestamp="1638389407073" timestamp="802314" />
  <Command __id="795" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:23:29 EST 2021" starttimestamp="1638389407073" timestamp="802314" />
  <Command __id="796" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:23:29 EST 2021" starttimestamp="1638389407073" timestamp="802316" />
  <Command __id="817" _type="PauseCommand" date="Wed Dec 01 15:23:42 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="814953">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5170]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="816" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:23:42 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="814953" type="Run" />
  <Command __id="819" _type="PauseCommand" date="Wed Dec 01 15:24:03 EST 2021" range="20s-30s" starttimestamp="1638389407073" timestamp="836840">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[21887]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="818" _type="MoveCaretCommand" caretOffset="604" date="Wed Dec 01 15:24:03 EST 2021" docOffset="885" starttimestamp="1638389407073" timestamp="836840" />
  <Command __id="821" _type="PauseCommand" date="Wed Dec 01 15:24:04 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="837870">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1030]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="820" _type="MoveCaretCommand" caretOffset="603" date="Wed Dec 01 15:24:04 EST 2021" docOffset="884" starttimestamp="1638389407073" timestamp="837870" />
  <Command __id="823" _type="PauseCommand" date="Wed Dec 01 15:24:07 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="840286">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2416]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="822" _type="SelectTextCommand" caretOffset="1330" date="Wed Dec 01 15:24:07 EST 2021" end="1367" start="1330" starttimestamp="1638389407073" timestamp="840286" />
  <Command __id="824" _type="MoveCaretCommand" caretOffset="1369" date="Wed Dec 01 15:24:07 EST 2021" docOffset="1650" starttimestamp="1638389407073" timestamp="840834" />
  <Command __id="826" _type="PauseCommand" date="Wed Dec 01 15:24:09 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="842430">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1596]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="825" _type="SelectTextCommand" caretOffset="1327" date="Wed Dec 01 15:24:09 EST 2021" end="1368" start="1327" starttimestamp="1638389407073" timestamp="842430" />
  <Command __id="827" _type="CopyCommand" date="Wed Dec 01 15:24:10 EST 2021" starttimestamp="1638389407073" timestamp="842933" />
  <Command __id="829" _type="PauseCommand" date="Wed Dec 01 15:24:12 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="845339">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2406]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="828" _type="SelectTextCommand" caretOffset="597" date="Wed Dec 01 15:24:12 EST 2021" end="603" start="597" starttimestamp="1638389407073" timestamp="845339" />
  <Command __id="831" _type="PauseCommand" date="Wed Dec 01 15:24:13 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="846630">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1291]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="832" _type="PasteCommand" date="Wed Dec 01 15:24:13 EST 2021" starttimestamp="1638389407073" timestamp="846639" />
  <Command __id="834" _type="PauseCommand" date="Wed Dec 01 15:24:15 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="848893">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2254]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="833" _type="MoveCaretCommand" caretOffset="720" date="Wed Dec 01 15:24:15 EST 2021" docOffset="1001" starttimestamp="1638389407073" timestamp="848893" />
  <Command __id="836" _type="InsertStringCommand" date="Wed Dec 01 15:24:16 EST 2021" starttimestamp="1638389407073" timestamp="849292" timestamp2="849292">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="838" _type="PauseCommand" date="Wed Dec 01 15:24:17 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="850321">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1029]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Replace]]></next>
  </Command>
  <Command __id="839" _type="PasteCommand" date="Wed Dec 01 15:24:17 EST 2021" starttimestamp="1638389407073" timestamp="850326" />
  <Command __id="841" _type="PauseCommand" date="Wed Dec 01 15:24:19 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="852551">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[2225]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="840" _type="SelectTextCommand" caretOffset="650" date="Wed Dec 01 15:24:19 EST 2021" end="657" start="650" starttimestamp="1638389407073" timestamp="852551" />
  <Command __id="843" _type="InsertStringCommand" date="Wed Dec 01 15:24:19 EST 2021" starttimestamp="1638389407073" timestamp="852921" timestamp2="852921">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="845" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:24:20 EST 2021" starttimestamp="1638389407073" timestamp="853913" />
  <Command __id="847" _type="InsertStringCommand" date="Wed Dec 01 15:24:21 EST 2021" starttimestamp="1638389407073" timestamp="854523" timestamp2="854523">
    <data><![CDATA[L]]></data>
  </Command>
  <Command __id="849" _type="InsertStringCommand" date="Wed Dec 01 15:24:21 EST 2021" starttimestamp="1638389407073" timestamp="854670" timestamp2="854670">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="851" _type="InsertStringCommand" date="Wed Dec 01 15:24:21 EST 2021" starttimestamp="1638389407073" timestamp="854770" timestamp2="854770">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="853" _type="InsertStringCommand" date="Wed Dec 01 15:24:22 EST 2021" starttimestamp="1638389407073" timestamp="854992" timestamp2="854992">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="855" _type="InsertStringCommand" date="Wed Dec 01 15:24:22 EST 2021" starttimestamp="1638389407073" timestamp="855062" timestamp2="855062">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="857" _type="InsertStringCommand" date="Wed Dec 01 15:24:22 EST 2021" starttimestamp="1638389407073" timestamp="855200" timestamp2="855200">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="859" _type="InsertStringCommand" date="Wed Dec 01 15:24:22 EST 2021" starttimestamp="1638389407073" timestamp="855352" timestamp2="855352">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="861" _type="InsertStringCommand" date="Wed Dec 01 15:24:22 EST 2021" starttimestamp="1638389407073" timestamp="855588" timestamp2="855588">
    <data><![CDATA[l]]></data>
  </Command>
  <Command __id="863" _type="InsertStringCommand" date="Wed Dec 01 15:24:22 EST 2021" starttimestamp="1638389407073" timestamp="855772" timestamp2="855772">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="865" _type="InsertStringCommand" date="Wed Dec 01 15:24:22 EST 2021" starttimestamp="1638389407073" timestamp="855862" timestamp2="855862">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="867" _type="InsertStringCommand" date="Wed Dec 01 15:24:23 EST 2021" starttimestamp="1638389407073" timestamp="856051" timestamp2="856051">
    <data><![CDATA[b]]></data>
  </Command>
  <Command __id="869" _type="InsertStringCommand" date="Wed Dec 01 15:24:23 EST 2021" starttimestamp="1638389407073" timestamp="856164" timestamp2="856164">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="871" _type="InsertStringCommand" date="Wed Dec 01 15:24:23 EST 2021" starttimestamp="1638389407073" timestamp="856240" timestamp2="856240">
    <data><![CDATA[a]]></data>
  </Command>
  <Command __id="873" _type="InsertStringCommand" date="Wed Dec 01 15:24:23 EST 2021" starttimestamp="1638389407073" timestamp="856370" timestamp2="856370">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="875" _type="InsertStringCommand" date="Wed Dec 01 15:24:23 EST 2021" starttimestamp="1638389407073" timestamp="856558" timestamp2="856558">
    <data><![CDATA[-]]></data>
  </Command>
  <Command __id="877" _type="InsertStringCommand" date="Wed Dec 01 15:24:23 EST 2021" starttimestamp="1638389407073" timestamp="856647" timestamp2="856647">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="879" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:24:24 EST 2021" starttimestamp="1638389407073" timestamp="857098" />
  <Command __id="881" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:24:24 EST 2021" starttimestamp="1638389407073" timestamp="857273" />
  <Command __id="883" _type="InsertStringCommand" date="Wed Dec 01 15:24:24 EST 2021" starttimestamp="1638389407073" timestamp="857856" timestamp2="857856">
    <data><![CDATA[=]]></data>
  </Command>
  <Command __id="885" _type="InsertStringCommand" date="Wed Dec 01 15:24:25 EST 2021" starttimestamp="1638389407073" timestamp="857967" timestamp2="857967">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="887" _type="PauseCommand" date="Wed Dec 01 15:24:26 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="859541">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1574]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="886" _type="MoveCaretCommand" caretOffset="775" date="Wed Dec 01 15:24:26 EST 2021" docOffset="1056" starttimestamp="1638389407073" timestamp="859541" />
  <Command __id="889" _type="InsertStringCommand" date="Wed Dec 01 15:24:27 EST 2021" starttimestamp="1638389407073" timestamp="860053" timestamp2="860053">
    <data><![CDATA[;]]></data>
  </Command>
  <Command __id="891" _type="PauseCommand" date="Wed Dec 01 15:24:29 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="861963">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1910]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="890" _type="MoveCaretCommand" caretOffset="734" date="Wed Dec 01 15:24:29 EST 2021" docOffset="1015" starttimestamp="1638389407073" timestamp="861963" />
  <Command __id="893" _type="InsertStringCommand" date="Wed Dec 01 15:24:29 EST 2021" starttimestamp="1638389407073" timestamp="862558" timestamp2="862558">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="895" _type="InsertStringCommand" date="Wed Dec 01 15:24:29 EST 2021" starttimestamp="1638389407073" timestamp="862584" timestamp2="862584">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="897" _type="InsertStringCommand" date="Wed Dec 01 15:24:29 EST 2021" starttimestamp="1638389407073" timestamp="862706" timestamp2="862706">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="899" _type="InsertStringCommand" date="Wed Dec 01 15:24:29 EST 2021" starttimestamp="1638389407073" timestamp="862819" timestamp2="862819">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="901" _type="InsertStringCommand" date="Wed Dec 01 15:24:30 EST 2021" starttimestamp="1638389407073" timestamp="862932" timestamp2="862932">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="903" _type="InsertStringCommand" date="Wed Dec 01 15:24:30 EST 2021" starttimestamp="1638389407073" timestamp="863011" timestamp2="863011">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="905" _type="InsertStringCommand" date="Wed Dec 01 15:24:30 EST 2021" starttimestamp="1638389407073" timestamp="863141" timestamp2="863141">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="907" _type="PauseCommand" date="Wed Dec 01 15:24:32 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="865185">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2044]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="906" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Dec 01 15:24:32 EST 2021" starttimestamp="1638389407073" timestamp="865185" />
  <Command __id="908" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:32 EST 2021" starttimestamp="1638389407073" timestamp="865331" />
  <Command __id="909" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:32 EST 2021" starttimestamp="1638389407073" timestamp="865339" />
  <Command __id="910" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:32 EST 2021" starttimestamp="1638389407073" timestamp="865339" />
  <Command __id="911" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:32 EST 2021" starttimestamp="1638389407073" timestamp="865340" />
  <Command __id="912" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:32 EST 2021" starttimestamp="1638389407073" timestamp="865340" />
  <Command __id="913" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:32 EST 2021" starttimestamp="1638389407073" timestamp="865341" />
  <Command __id="914" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:32 EST 2021" starttimestamp="1638389407073" timestamp="865341" />
  <Command __id="915" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:32 EST 2021" starttimestamp="1638389407073" timestamp="865343" />
  <Command __id="916" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:32 EST 2021" starttimestamp="1638389407073" timestamp="865343" />
  <Command __id="917" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:32 EST 2021" starttimestamp="1638389407073" timestamp="865362" />
  <Command __id="918" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:24:32 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="865488" type="Run" />
  <Command __id="919" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:24:32 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="865488" type="Run" />
  <Command __id="920" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:24:32 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="865488" type="Run" />
  <Command __id="921" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:24:32 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="865488" type="Run" />
  <Command __id="922" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:33 EST 2021" starttimestamp="1638389407073" timestamp="866408" />
  <Command __id="923" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:33 EST 2021" starttimestamp="1638389407073" timestamp="866412" />
  <Command __id="924" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:33 EST 2021" starttimestamp="1638389407073" timestamp="866412" />
  <Command __id="925" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:33 EST 2021" starttimestamp="1638389407073" timestamp="866413" />
  <Command __id="926" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:33 EST 2021" starttimestamp="1638389407073" timestamp="866413" />
  <Command __id="927" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:33 EST 2021" starttimestamp="1638389407073" timestamp="866414" />
  <Command __id="928" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:33 EST 2021" starttimestamp="1638389407073" timestamp="866414" />
  <Command __id="929" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:24:33 EST 2021" starttimestamp="1638389407073" timestamp="866416" />
  <Command __id="931" _type="PauseCommand" date="Wed Dec 01 15:24:35 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="868729">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2313]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="930" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:24:35 EST 2021" starttimestamp="1638389407073" timestamp="868729" />
  <Command __id="932" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:24:35 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="868732" type="Run" />
  <Command __id="934" _type="PauseCommand" date="Wed Dec 01 15:24:37 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="870013">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1281]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="933" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:24:37 EST 2021" starttimestamp="1638389407073" timestamp="870013" />
  <Command __id="935" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:24:37 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="870017" type="Run" />
  <Command __id="936" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:24:37 EST 2021" starttimestamp="1638389407073" timestamp="870549" />
  <Command __id="937" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:24:37 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="870552" type="Run" />
  <Command __id="938" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:24:38 EST 2021" starttimestamp="1638389407073" timestamp="871048" />
  <Command __id="939" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:24:38 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="871051" type="Run" />
  <Command __id="940" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:24:38 EST 2021" starttimestamp="1638389407073" timestamp="871492" />
  <Command __id="941" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:24:38 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="871496" type="Run" />
  <Command __id="942" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:24:39 EST 2021" starttimestamp="1638389407073" timestamp="871965" />
  <Command __id="943" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:24:39 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="871968" type="Run" />
  <Command __id="944" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:24:39 EST 2021" starttimestamp="1638389407073" timestamp="872596" />
  <Command __id="945" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:24:39 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="872600" type="Run" />
  <Command __id="959" _type="PauseCommand" date="Wed Dec 01 15:24:46 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="879641">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1654]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="958" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:24:46 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="879641" type="Run" />
  <Command __id="961" _type="MoveCaretCommand" caretOffset="0" date="Wed Dec 01 15:24:47 EST 2021" docOffset="0" starttimestamp="1638389407073" timestamp="880042" />
  <Command __id="962" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:24:47 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="880703" type="Run" />
  <Command __id="964" _type="MoveCaretCommand" caretOffset="762" date="Wed Dec 01 15:24:48 EST 2021" docOffset="892" starttimestamp="1638389407073" timestamp="880964" />
  <Command __id="1003" _type="PauseCommand" date="Wed Dec 01 15:25:15 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="908901">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[4833]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1002" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:25:15 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="908901" type="Debug" />
  <Command __id="1004" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:25:15 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="908901" type="Run" />
  <Command __id="1005" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:25:15 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="908901" type="Debug" />
  <Command __id="1006" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:25:15 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="908901" type="Run" />
  <Command __id="1007" _type="ExceptionCommand" date="Wed Dec 01 15:25:16 EST 2021" starttimestamp="1638389407073" timestamp="908958" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:30)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at a5.RunLisp.main(RunLisp.java:21)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1012" _type="PauseCommand" date="Wed Dec 01 15:25:28 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="920982">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[5219]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1011" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:25:28 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="920982" type="Run" />
  <Command __id="1013" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:25:28 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="920982" type="Run" />
  <Command __id="1014" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:25:28 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="921295" type="Debug" />
  <Command __id="1015" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:25:28 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="921295" type="Run" />
  <Command __id="1016" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:25:28 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="921295" type="Debug" />
  <Command __id="1017" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:25:28 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="921295" type="Run" />
  <Command __id="1018" _type="ShellCommand" date="Wed Dec 01 15:25:28 EST 2021" starttimestamp="1638389407073" timestamp="921308" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1019" _type="ExceptionCommand" date="Wed Dec 01 15:25:28 EST 2021" starttimestamp="1638389407073" timestamp="921377" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.lang.reflect.InvocationTargetException
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndStartAgent(InstrumentationImpl.java:513)
	at java.instrument/sun.instrument.InstrumentationImpl.loadClassAndCallPremain(InstrumentationImpl.java:525)
Caused by: java.lang.RuntimeException: Class java/lang/UnknownError could not be instrumented.
	at org.jacoco.agent.rt.internal_c13123e.core.runtime.ModifiedSystemClassRuntime.createFor(ModifiedSystemClassRuntime.java:140)
	at org.jacoco.agent.rt.internal_c13123e.core.runtime.ModifiedSystemClassRuntime.createFor(ModifiedSystemClassRuntime.java:101)
	at org.jacoco.agent.rt.internal_c13123e.PreMain.createRuntime(PreMain.java:55)
	at org.jacoco.agent.rt.internal_c13123e.PreMain.premain(PreMain.java:47)
	... 6 more
Caused by: java.lang.NoSuchFieldException: $jacocoAccess
	at java.base/java.lang.Class.getField(Class.java:1999)
	at org.jacoco.agent.rt.internal_c13123e.core.runtime.ModifiedSystemClassRuntime.createFor(ModifiedSystemClassRuntime.java:138)
	... 9 more
FATAL ERROR in native method: processing of -javaagent failed
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1021" _type="PauseCommand" date="Wed Dec 01 15:25:29 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="922600">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1223]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1020" _type="ShellCommand" date="Wed Dec 01 15:25:29 EST 2021" starttimestamp="1638389407073" timestamp="922600" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1026" _type="PauseCommand" date="Wed Dec 01 15:25:32 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="925923">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1963]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1025" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 15:25:32 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="925923" type="Run" />
  <Command __id="1027" _type="RunCommand" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 15:25:32 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="925923" type="Run" />
  <Command __id="1029" _type="PauseCommand" date="Wed Dec 01 15:25:35 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="928389">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2466]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1028" _type="ShellCommand" date="Wed Dec 01 15:25:35 EST 2021" starttimestamp="1638389407073" timestamp="928389" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1031" _type="PauseCommand" date="Wed Dec 01 15:25:38 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="931533">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3144]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1030" _type="ConsoleOutput" date="Wed Dec 01 15:25:38 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="931533" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test execution time (ms):10
Test execution time (ms):13
Test execution time (ms):72
Test execution time (ms):74
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55."), Diff(INSERT,"Test execution time (ms):1¶Test execution time (ms):10¶Test execution time (ms):13¶Test execution time (ms):72¶Test execution time (ms):74¶Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1033" _type="PauseCommand" date="Wed Dec 01 15:25:40 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="933469">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1936]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1032" _type="ConsoleOutput" date="Wed Dec 01 15:25:40 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="933469" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):18
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1"), Diff(DELETE,"¶Test execution time (ms):10¶Test execution time (ms):13¶Test execution time (ms):72¶Test execution time (ms):74¶Test execution time (ms):1"), Diff(INSERT,"8"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1035" _type="PauseCommand" date="Wed Dec 01 15:25:41 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="934483">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1014]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="1034" _type="ExceptionCommand" date="Wed Dec 01 15:25:41 EST 2021" starttimestamp="1638389407073" timestamp="934483" type="Exception">
    <exceptionString><![CDATA[java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:30)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1036" _type="ExceptionCommand" date="Wed Dec 01 15:25:42 EST 2021" starttimestamp="1638389407073" timestamp="935357" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'CURRY'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:24)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1037" _type="ConsoleOutput" date="Wed Dec 01 15:25:43 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="936196" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(INSERT,"0¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):"), Diff(EQUAL,"1"), Diff(DELETE,"8"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1038" _type="ConsoleOutput" date="Wed Dec 01 15:25:44 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="936938" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):1¶Test execution time (ms):0¶"), Diff(EQUAL,"Test execution time (ms):0¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1040" _type="PauseCommand" date="Wed Dec 01 15:25:46 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="939381">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2443]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1039" _type="ConsoleOutput" date="Wed Dec 01 15:25:46 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="939381" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):1
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1¶Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"¶Test execution time (ms):0¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"1¶Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1042" _type="PauseCommand" date="Wed Dec 01 15:25:48 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="941894">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2513]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1041" _type="ConsoleOutput" date="Wed Dec 01 15:25:48 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="941894" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):1¶Test execution time (ms):1¶"), Diff(EQUAL,"Test execution time (ms):0¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,"¶Test execution time (ms):0¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1044" _type="PauseCommand" date="Wed Dec 01 15:25:54 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="946939">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5045]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1043" _type="ConsoleOutput" date="Wed Dec 01 15:25:54 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="946939" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶")]]]></diff>
  </Command>
  <Command __id="1046" _type="PauseCommand" date="Wed Dec 01 15:25:58 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="951657">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[4718]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1045" _type="ShellCommand" date="Wed Dec 01 15:25:58 EST 2021" starttimestamp="1638389407073" timestamp="951657" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1047" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:25:59 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="952342" type="Debug" />
  <Command __id="1048" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 15:25:59 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="952342" type="Run" />
  <Command __id="1049" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:25:59 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="952342" type="Debug" />
  <Command __id="1050" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 15:25:59 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="952342" type="Run" />
  <Command __id="1055" _type="PauseCommand" date="Wed Dec 01 15:26:29 EST 2021" range="20s-30s" starttimestamp="1638389407073" timestamp="982717">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[28030]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1054" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:26:29 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="982717" type="Run" />
  <Command __id="1056" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:26:29 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="982717" type="Run" />
  <Command __id="1057" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:26:30 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="982928" type="Run" />
  <Command __id="1058" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:26:30 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="982963" type="Run" />
  <Command __id="1059" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:26:30 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="983116" type="Run" />
  <Command __id="1060" _type="ConsoleOutput" date="Wed Dec 01 15:26:30 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="983222" type="ConsoleOutput">
    <outputString><![CDATA[JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0"), Diff(INSERT,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1061" _type="ShellCommand" date="Wed Dec 01 15:26:30 EST 2021" starttimestamp="1638389407073" timestamp="983724" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1062" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:26:30 EST 2021" starttimestamp="1638389407073" timestamp="983859" />
  <Command __id="1063" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:26:30 EST 2021" starttimestamp="1638389407073" timestamp="983864" />
  <Command __id="1064" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:26:30 EST 2021" starttimestamp="1638389407073" timestamp="983864" />
  <Command __id="1065" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:26:30 EST 2021" starttimestamp="1638389407073" timestamp="983867" />
  <Command __id="1066" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:26:30 EST 2021" starttimestamp="1638389407073" timestamp="983867" />
  <Command __id="1067" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:26:30 EST 2021" starttimestamp="1638389407073" timestamp="983868" />
  <Command __id="1068" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:26:30 EST 2021" starttimestamp="1638389407073" timestamp="983868" />
  <Command __id="1069" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:26:30 EST 2021" starttimestamp="1638389407073" timestamp="983870" />
  <Command __id="1070" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:26:30 EST 2021" starttimestamp="1638389407073" timestamp="983870" />
  <Command __id="1071" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:26:30 EST 2021" starttimestamp="1638389407073" timestamp="983870" />
  <Command __id="1072" _type="ShellCommand" date="Wed Dec 01 15:26:31 EST 2021" starttimestamp="1638389407073" timestamp="984664" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1274" _type="PauseCommand" date="Wed Dec 01 15:31:26 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="1279328">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1229]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1273" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:31:26 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1279328" type="Run" />
  <Command __id="1275" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:31:26 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1279354" type="Debug" />
  <Command __id="1276" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:31:26 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1279354" type="Debug" />
  <Command __id="1277" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:31:26 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="1279354" type="Run" />
  <Command __id="1278" _type="ExceptionCommand" date="Wed Dec 01 15:31:26 EST 2021" starttimestamp="1638389407073" timestamp="1279426" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:30)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at a5.RunLisp.main(RunLisp.java:21)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1283" _type="PauseCommand" date="Wed Dec 01 15:31:39 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1292113">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[4853]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1284" _type="MoveCaretCommand" caretOffset="0" date="Wed Dec 01 15:31:39 EST 2021" docOffset="0" starttimestamp="1638389407073" timestamp="1292185" />
  <Command __id="1286" _type="MoveCaretCommand" caretOffset="2124" date="Wed Dec 01 15:31:40 EST 2021" docOffset="2560" starttimestamp="1638389407073" timestamp="1292942" />
  <Command __id="1288" _type="PauseCommand" date="Wed Dec 01 15:31:45 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="1298016">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5074]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1289" _type="MoveCaretCommand" caretOffset="586" date="Wed Dec 01 15:31:45 EST 2021" docOffset="867" starttimestamp="1638389407073" timestamp="1298082" />
  <Command __id="1291" _type="MoveCaretCommand" caretOffset="990" date="Wed Dec 01 15:31:45 EST 2021" docOffset="1120" starttimestamp="1638389407073" timestamp="1298878" />
  <DocumentChange __id="721" _type="Insert" date="Wed Dec 01 15:23:19 EST 2021" docASTNodeCount="335" docActiveCodeLength="1875" docExpressionCount="244" docLength="2056" length="65" offset="800" repeat="19" starttimestamp="1638389407073" timestamp="792090" timestamp2="797210">
    <text><![CDATA[
				Lambda lambda = LambdaFactory.newInstance(argNames1, body);]]></text>
  </DocumentChange>
  <DocumentChange __id="762" _type="Replace" date="Wed Dec 01 15:23:26 EST 2021" docASTNodeCount="331" docActiveCodeLength="1834" docExpressionCount="240" docLength="2015" endLine="22" insertionLength="1" int_docASTNodeCount="330" int_docActiveCodeLength="1833" int_docExpressionCount="239" int_docLength="2014" length="42" offset="878" startLine="22" starttimestamp="1638389407073" timestamp="799866">
    <deletedText><![CDATA[LambdaFactory.newInstance(argNames1, body)]]></deletedText>
    <insertedText><![CDATA[l]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="764" _type="Insert" date="Wed Dec 01 15:23:27 EST 2021" docASTNodeCount="331" docActiveCodeLength="1839" docExpressionCount="240" docLength="2020" length="5" offset="879" repeat="5" starttimestamp="1638389407073" timestamp="799944" timestamp2="800381">
    <text><![CDATA[ambda]]></text>
  </DocumentChange>
  <DocumentChange __id="830" _type="Replace" date="Wed Dec 01 15:24:13 EST 2021" docASTNodeCount="335" docActiveCodeLength="1874" docExpressionCount="244" docLength="2055" endLine="22" insertionLength="41" int_docASTNodeCount="330" int_docActiveCodeLength="1833" int_docExpressionCount="239" int_docLength="2014" length="6" offset="878" startLine="22" starttimestamp="1638389407073" timestamp="846630">
    <deletedText><![CDATA[lambda]]></deletedText>
    <insertedText><![CDATA[FunctionFactory.newInstance(lambda, arg1)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="835" _type="Insert" date="Wed Dec 01 15:24:16 EST 2021" docASTNodeCount="335" docActiveCodeLength="1879" docExpressionCount="244" docLength="2060" length="5" offset="1001" starttimestamp="1638389407073" timestamp="849286">
    <text><![CDATA[
			]]></text>
  </DocumentChange>
  <DocumentChange __id="837" _type="Replace" date="Wed Dec 01 15:24:17 EST 2021" docASTNodeCount="341" docActiveCodeLength="1920" docExpressionCount="249" docLength="2101" endLine="25" insertionLength="44" int_docASTNodeCount="335" int_docActiveCodeLength="1876" int_docExpressionCount="244" int_docLength="2057" length="3" offset="1003" startLine="25" starttimestamp="1638389407073" timestamp="850321">
    <deletedText><![CDATA[			]]></deletedText>
    <insertedText><![CDATA[			FunctionFactory.newInstance(lambda, arg1)]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="842" _type="Replace" date="Wed Dec 01 15:24:19 EST 2021" docASTNodeCount="341" docActiveCodeLength="1914" docExpressionCount="249" docLength="2095" endLine="24" insertionLength="1" int_docASTNodeCount="341" int_docActiveCodeLength="1913" int_docExpressionCount="249" int_docLength="2094" length="7" offset="931" startLine="24" starttimestamp="1638389407073" timestamp="852917">
    <deletedText><![CDATA[return ]]></deletedText>
    <insertedText><![CDATA[=]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="844" _type="Delete" date="Wed Dec 01 15:24:20 EST 2021" docASTNodeCount="341" docActiveCodeLength="1913" docExpressionCount="249" docLength="2094" endLine="24" length="1" offset="931" startLine="24" starttimestamp="1638389407073" timestamp="853911">
    <text><![CDATA[=]]></text>
  </DocumentChange>
  <DocumentChange __id="846" _type="Insert" date="Wed Dec 01 15:24:21 EST 2021" docASTNodeCount="346" docActiveCodeLength="1929" docExpressionCount="252" docLength="2110" length="16" offset="931" repeat="16" starttimestamp="1638389407073" timestamp="854520" timestamp2="856645">
    <text><![CDATA[Lambda lambda - ]]></text>
  </DocumentChange>
  <DocumentChange __id="878" _type="Delete" date="Wed Dec 01 15:24:24 EST 2021" docASTNodeCount="346" docActiveCodeLength="1927" docExpressionCount="251" docLength="2108" endLine="24" length="2" offset="945" repeat="2" startLine="24" starttimestamp="1638389407073" timestamp="857096" timestamp2="857271">
    <text><![CDATA[- ]]></text>
  </DocumentChange>
  <DocumentChange __id="882" _type="Insert" date="Wed Dec 01 15:24:24 EST 2021" docASTNodeCount="345" docActiveCodeLength="1929" docExpressionCount="251" docLength="2110" length="2" offset="945" repeat="2" starttimestamp="1638389407073" timestamp="857853" timestamp2="857964">
    <text><![CDATA[= ]]></text>
  </DocumentChange>
  <DocumentChange __id="888" _type="Insert" date="Wed Dec 01 15:24:27 EST 2021" docASTNodeCount="345" docActiveCodeLength="1930" docExpressionCount="251" docLength="2111" length="1" offset="1056" starttimestamp="1638389407073" timestamp="860049">
    <text><![CDATA[;]]></text>
  </DocumentChange>
  <DocumentChange __id="892" _type="Insert" date="Wed Dec 01 15:24:29 EST 2021" docASTNodeCount="345" docActiveCodeLength="1937" docExpressionCount="251" docLength="2118" length="7" offset="1015" repeat="7" starttimestamp="1638389407073" timestamp="862555" timestamp2="863137">
    <text><![CDATA[return ]]></text>
  </DocumentChange>
  <Command __id="951" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:24:42 EST 2021" projectName="null" starttimestamp="1638389407073" timestamp="875436">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="956" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:24:44 EST 2021" docASTNodeCount="288" docActiveCodeLength="1838" docExpressionCount="211" docLength="1923" projectName="a5" starttimestamp="1638389407073" timestamp="877870">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\evaluators\LambdaSExpressionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package evaluators;¶¶import main.lisp.evaluator.BasicExpressionEvaluator;¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.DecimalAtom;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶import main.lisp.parser.terms.TAtomicExpressionFactory;¶¶public class LambdaSExpressionEvaluator extends BasicExpressionEvaluator {¶	@Override¶	public SExpression eval(SExpression expr, Environment environment) {¶		// evaluates lambda first¶		if (!expr.getHead().isAtom()) {¶			SExpression eval = super.eval(expr.getHead(), environment);¶			if (eval instanceof Lambda) {¶				Environment childEnvironment = environment.newChild();¶				return evaluateLambda((Lambda) eval, childEnvironment, environment, expr.getTail());¶			}¶			SExpression isExpressionNested = expr.getHead().getHead();¶			if (!isExpressionNested.isAtom()) {¶				eval = super.eval(isExpressionNested, environment);¶				if (eval instanceof Lambda) {¶					Environment childEnvironment = environment.newChild();¶					return evaluateLambda((Lambda) eval, childEnvironment, environment, expr.getTail());¶				}¶			}¶		}¶			// when it is not a lambda¶			return super.eval(expr, environment);¶		}¶¶	// produces your lambda evaluation¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶	¶¶}¶¶")]]]></diff>
  </Command>
  <Command __id="960" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:24:46 EST 2021" projectName="null" starttimestamp="1638389407073" timestamp="879867">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="963" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:24:47 EST 2021" docASTNodeCount="185" docActiveCodeLength="1152" docExpressionCount="142" docLength="1152" projectName="a5" starttimestamp="1638389407073" timestamp="880843">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LetEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class LetEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		Environment childEnvironment = arg1.newChild();¶		SExpression currentDeclare = arg0.getTail().getHead();¶		SExpression currentBody = arg0.getTail().getTail();¶		while (!currentDeclare.getTail().isNIL()) {¶			childEnvironment.assign((IdentifierAtom)currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead());¶			currentDeclare = currentDeclare.getTail();¶		}¶		if (!currentDeclare.isAtom()) {¶			childEnvironment.assign((IdentifierAtom) currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead().eval(arg1));¶		}¶		SExpression currentEval = currentBody.getHead().eval(childEnvironment);¶		while(!currentBody.getTail().isNIL()) {¶			currentEval = currentBody.getHead().eval(childEnvironment);¶			currentBody = currentBody.getTail();¶		}¶		return currentEval;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1008" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:25:22 EST 2021" docASTNodeCount="411" docActiveCodeLength="2609" docExpressionCount="312" docLength="2609" projectName="a5" starttimestamp="1638389407073" timestamp="915676">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.Optional;¶¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Function;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.ExpressionFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶¶public class FuncallEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		SExpression current = arg0.getTail();¶		¶		SExpression lambdaOrFunction = null;¶		if (!current.getHead().isAtom()) {¶			lambdaOrFunction = current.getHead().eval(arg1);¶		}¶		if (lambdaOrFunction instanceof Lambda) {¶			Environment childEnvironment = arg1.newChild();¶			return evaluateLambda((Lambda) lambdaOrFunction, childEnvironment, arg1, current.getTail());¶		} else if(lambdaOrFunction instanceof Function) {¶			return evaluateLambda (((Function) lambdaOrFunction).getLambda(), ((Function) lambdaOrFunction).getEnvironment().newChild(), ((Function) lambdaOrFunction).getEnvironment(),current.getTail() );¶		} else {¶			final Optional<SExpression> isLambda = arg1.lookup((IdentifierAtom) current.getHead());¶			if (!isLambda.isEmpty() && isLambda.get() instanceof Lambda) {¶				Environment childEnvironment = arg1.newChild();¶				return evaluateLambda((Lambda) isLambda.get(), childEnvironment, arg1, current.getTail());¶			} else if (!isLambda.isEmpty() && isLambda.get() instanceof Function) {¶				¶				return evaluateLambda (((Function) isLambda.get()).getLambda(), ((Function) isLambda.get()).getEnvironment().newChild(), ((Function) isLambda.get()).getEnvironment(),current.getTail() ); ¶			}¶			¶			return ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		}¶	}¶	¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1051" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:26:01 EST 2021" docASTNodeCount="345" docActiveCodeLength="1937" docExpressionCount="251" docLength="2118" projectName="a5" starttimestamp="1638389407073" timestamp="954629">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.FunctionFactory;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class FunctionEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead().getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶			if (arg0.getTail().isList()) {¶				SExpression body =arg0.getTail().getHead().getTail().getTail().getHead();¶				"), Diff(DELETE,"return"), Diff(INSERT,"Lambda lambda ="), Diff(EQUAL," LambdaFactory.newInstance(argNames1, body);¶			"), Diff(DELETE,"}¶		"), Diff(EQUAL,"	return"), Diff(INSERT," FunctionFactory.newInstance(lambda, arg1);¶			}¶			Lambda lambda ="), Diff(EQUAL," LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶		"), Diff(INSERT,"	return FunctionFactory.newInstance(lambda, arg1);¶		"), Diff(EQUAL,"}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);¶		return FunctionFactory.newInstance(lambda, arg1);¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package functional;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.FunctionFactory;
import main.lisp.evaluator.function.Lambda;
import main.lisp.evaluator.function.LambdaFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class FunctionEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression arg0, Environment arg1) {
		IdentifierAtom[] argNames1 = new IdentifierAtom[1];
		SExpression current = arg0.getTail().getHead().getTail().getHead();
		int index = 0;
		if(current.isAtom()) {
			argNames1 = new IdentifierAtom[0];
			if (arg0.getTail().isList()) {
				SExpression body =arg0.getTail().getHead().getTail().getTail().getHead();
				Lambda lambda = LambdaFactory.newInstance(argNames1, body);
				return FunctionFactory.newInstance(lambda, arg1);
			}
			Lambda lambda = LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());
			return FunctionFactory.newInstance(lambda, arg1);
		}
		while(!current.getTail().isNIL()) {
			// expand size if you still need to add arg names
			argNames1 = expandArray(argNames1, index);
			argNames1[index] = (IdentifierAtom) current.getHead();
			current = current.getTail();
			index++;
		}
		//add last argument (the last argument has nil as its tail)
		if (!current.getHead().isNIL()) {
			argNames1 = expandArray(argNames1, index);
			argNames1[index] = (IdentifierAtom) current.getHead();
		}
		
		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());
	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);
		return FunctionFactory.newInstance(lambda, arg1);
	}
	
	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {
		if (index == array.length) {
			int size = array.length+ 1;
			IdentifierAtom[] newArray = new IdentifierAtom[size];
			for (int i = 0; i < array.length; i++) {
				newArray[i] = array[i];
			}
			//array = newArray;
			return newArray;
		}
		return array;
		
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="1279" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:31:34 EST 2021" docASTNodeCount="280" docActiveCodeLength="1531" docExpressionCount="200" docLength="1785" projectName="a5" starttimestamp="1638389407073" timestamp="1287175">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package functional;

import java.util.ArrayList;
import java.util.List;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.Lambda;
import main.lisp.evaluator.function.LambdaFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class LambdaEvaluator implements Evaluator {

	@Override
	public SExpression eval(SExpression arg0, Environment arg1) {
		IdentifierAtom[] argNames1 = new IdentifierAtom[1];
		SExpression current = arg0.getTail().getHead();
		int index = 0;
		if(current.isAtom()) {
			argNames1 = new IdentifierAtom[0];
//			if (arg0.getTail().isList()) {
//				return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail().getHead());
//			}
			return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());
		}
		while(!current.getTail().isNIL()) {
			// expand size if you still need to add arg names
			argNames1 = expandArray(argNames1, index);
			argNames1[index] = (IdentifierAtom) current.getHead();
			current = current.getTail();
			index++;
		}
		//add last argument (the last argument has nil as its tail)
		if (!current.getHead().isNIL()) {
			argNames1 = expandArray(argNames1, index);
			argNames1[index] = (IdentifierAtom) current.getHead();
		}
		
		return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());
	}
	
	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {
		if (index == array.length) {
			int size = array.length+ 1;
			IdentifierAtom[] newArray = new IdentifierAtom[size];
			for (int i = 0; i < array.length; i++) {
				newArray[i] = array[i];
			}
			//array = newArray;
			return newArray;
		}
		return array;
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="1282" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:31:39 EST 2021" projectName="null" starttimestamp="1638389407073" timestamp="1292113">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="1285" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:31:39 EST 2021" docASTNodeCount="411" docActiveCodeLength="2609" docExpressionCount="312" docLength="2609" projectName="a5" starttimestamp="1638389407073" timestamp="1292873">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.Optional;¶¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Function;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.ExpressionFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶¶public class FuncallEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		SExpression current = arg0.getTail();¶		¶		SExpression lambdaOrFunction = null;¶		if (!current.getHead().isAtom()) {¶			lambdaOrFunction = current.getHead().eval(arg1);¶		}¶		if (lambdaOrFunction instanceof Lambda) {¶			Environment childEnvironment = arg1.newChild();¶			return evaluateLambda((Lambda) lambdaOrFunction, childEnvironment, arg1, current.getTail());¶		} else if(lambdaOrFunction instanceof Function) {¶			return evaluateLambda (((Function) lambdaOrFunction).getLambda(), ((Function) lambdaOrFunction).getEnvironment().newChild(), ((Function) lambdaOrFunction).getEnvironment(),current.getTail() );¶		} else {¶			final Optional<SExpression> isLambda = arg1.lookup((IdentifierAtom) current.getHead());¶			if (!isLambda.isEmpty() && isLambda.get() instanceof Lambda) {¶				Environment childEnvironment = arg1.newChild();¶				return evaluateLambda((Lambda) isLambda.get(), childEnvironment, arg1, current.getTail());¶			} else if (!isLambda.isEmpty() && isLambda.get() instanceof Function) {¶				¶				return evaluateLambda (((Function) isLambda.get()).getLambda(), ((Function) isLambda.get()).getEnvironment().newChild(), ((Function) isLambda.get()).getEnvironment(),current.getTail() ); ¶			}¶			¶			return ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		}¶	}¶	¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1287" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:31:45 EST 2021" docASTNodeCount="345" docActiveCodeLength="1937" docExpressionCount="251" docLength="2118" projectName="a5" starttimestamp="1638389407073" timestamp="1298016">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.FunctionFactory;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class FunctionEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead().getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶			if (arg0.getTail().isList()) {¶				SExpression body =arg0.getTail().getHead().getTail().getTail().getHead();¶				Lambda lambda = LambdaFactory.newInstance(argNames1, body);¶				return FunctionFactory.newInstance(lambda, arg1);¶			}¶			Lambda lambda = LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶			return FunctionFactory.newInstance(lambda, arg1);¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);¶		return FunctionFactory.newInstance(lambda, arg1);¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1290" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:31:45 EST 2021" docASTNodeCount="185" docActiveCodeLength="1152" docExpressionCount="142" docLength="1152" projectName="a5" starttimestamp="1638389407073" timestamp="1298827">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LetEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class LetEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		Environment childEnvironment = arg1.newChild();¶		SExpression currentDeclare = arg0.getTail().getHead();¶		SExpression currentBody = arg0.getTail().getTail();¶		while (!currentDeclare.getTail().isNIL()) {¶			childEnvironment.assign((IdentifierAtom)currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead());¶			currentDeclare = currentDeclare.getTail();¶		}¶		if (!currentDeclare.isAtom()) {¶			childEnvironment.assign((IdentifierAtom) currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead().eval(arg1));¶		}¶		SExpression currentEval = currentBody.getHead().eval(childEnvironment);¶		while(!currentBody.getTail().isNIL()) {¶			currentEval = currentBody.getHead().eval(childEnvironment);¶			currentBody = currentBody.getTail();¶		}¶		return currentEval;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1293" _type="PauseCommand" date="Wed Dec 01 15:31:49 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1302811">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3933]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1294" _type="MoveCaretCommand" caretOffset="0" date="Wed Dec 01 15:31:49 EST 2021" docOffset="0" starttimestamp="1638389407073" timestamp="1302897" />
  <Command __id="1296" _type="PauseCommand" date="Wed Dec 01 15:32:05 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="1317970">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[15073]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1297" _type="SelectTextCommand" caretOffset="444" date="Wed Dec 01 15:32:05 EST 2021" end="444" start="410" starttimestamp="1638389407073" timestamp="1318068" />
  <Command __id="1340" _type="PauseCommand" date="Wed Dec 01 15:32:22 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1335874">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3111]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1339" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:32:22 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="1335874" type="Run" />
  <Command __id="1341" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:32:22 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="1335874" type="Run" />
  <Command __id="1342" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:32:22 EST 2021" starttimestamp="1638389407073" timestamp="1335921" />
  <Command __id="1343" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:32:22 EST 2021" starttimestamp="1638389407073" timestamp="1335925" />
  <Command __id="1344" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:32:22 EST 2021" starttimestamp="1638389407073" timestamp="1335925" />
  <Command __id="1345" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:32:22 EST 2021" starttimestamp="1638389407073" timestamp="1335926" />
  <Command __id="1346" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:32:22 EST 2021" starttimestamp="1638389407073" timestamp="1335926" />
  <Command __id="1347" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:32:23 EST 2021" starttimestamp="1638389407073" timestamp="1335927" />
  <Command __id="1348" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:32:23 EST 2021" starttimestamp="1638389407073" timestamp="1335928" />
  <Command __id="1349" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:32:23 EST 2021" starttimestamp="1638389407073" timestamp="1335930" />
  <Command __id="1351" _type="PauseCommand" date="Wed Dec 01 15:32:26 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1339210">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3280]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[PasteCommand]]></next>
  </Command>
  <Command __id="1350" _type="PasteCommand" date="Wed Dec 01 15:32:26 EST 2021" starttimestamp="1638389407073" timestamp="1339210" />
  <Command __id="1352" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:32:27 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1340010" type="Debug" />
  <Command __id="1353" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:32:27 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="1340010" type="Run" />
  <Command __id="1354" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:32:27 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1340010" type="Debug" />
  <Command __id="1355" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:32:27 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="1340010" type="Run" />
  <Command __id="1356" _type="ExceptionCommand" date="Wed Dec 01 15:32:27 EST 2021" starttimestamp="1638389407073" timestamp="1340091" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:30)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at a5.RunLisp.main(RunLisp.java:21)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1358" _type="PauseCommand" date="Wed Dec 01 15:32:35 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="1348424">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[8333]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1357" _type="MoveCaretCommand" caretOffset="456" date="Wed Dec 01 15:32:35 EST 2021" docOffset="641" starttimestamp="1638389407073" timestamp="1348424" />
  <Command __id="1360" _type="PauseCommand" date="Wed Dec 01 15:32:46 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="1359324">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[10900]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1359" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.ToggleBreakpoint" date="Wed Dec 01 15:32:46 EST 2021" starttimestamp="1638389407073" timestamp="1359324" />
  <Command __id="1361" _type="BreakPointCommand" date="Wed Dec 01 15:32:46 EST 2021" lineNumber="-1" starttimestamp="1638389407073" timestamp="1359341" type="BreakPointAdded" />
  <Command __id="1363" _type="PauseCommand" date="Wed Dec 01 15:32:49 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1362491">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[BreakPointCommand]]></prev>
    <pause><![CDATA[3150]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1364" _type="SelectTextCommand" caretOffset="2162" date="Wed Dec 01 15:32:49 EST 2021" end="2162" start="2124" starttimestamp="1638389407073" timestamp="1362573" />
  <Command __id="1369" _type="PauseCommand" date="Wed Dec 01 15:32:55 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1368429">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[3612]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1368" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:32:55 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="1368429" type="Run" />
  <Command __id="1370" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:32:55 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="1368438" type="Run" />
  <Command __id="1371" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:32:55 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1368645" type="Run" />
  <Command __id="1372" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:32:55 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1368681" type="Run" />
  <Command __id="1373" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:32:55 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1368836" type="Run" />
  <Command __id="1374" _type="ConsoleOutput" date="Wed Dec 01 15:32:56 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="1368971" type="ConsoleOutput">
    <outputString><![CDATA[JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55.
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55.¶")]]]></diff>
  </Command>
  <Command __id="1375" _type="ShellCommand" date="Wed Dec 01 15:32:56 EST 2021" starttimestamp="1638389407073" timestamp="1369004" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1376" _type="ShellCommand" date="Wed Dec 01 15:32:56 EST 2021" starttimestamp="1638389407073" timestamp="1369761" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1395" _type="PauseCommand" date="Wed Dec 01 15:33:22 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="1395089">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1643]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1394" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:33:22 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1395089" type="Run" />
  <Command __id="1402" _type="PauseCommand" date="Wed Dec 01 15:33:45 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1418765">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2507]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1403" _type="MoveCaretCommand" caretOffset="0" date="Wed Dec 01 15:33:45 EST 2021" docOffset="0" starttimestamp="1638389407073" timestamp="1418829" />
  <Command __id="1410" _type="PauseCommand" date="Wed Dec 01 15:34:05 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="1437972">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[16918]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="1409" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:34:05 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="1437972" type="Run" />
  <Command __id="1412" _type="PauseCommand" date="Wed Dec 01 15:34:11 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="1444504">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[6532]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1411" _type="ConsoleInput" date="Wed Dec 01 15:34:11 EST 2021" starttimestamp="1638389407073" timestamp="1444504" type="Exception">
    <outputString><![CDATA[(lambda NIL 42)
]]></outputString>
  </Command>
  <Command __id="1413" _type="ConsoleOutput" date="Wed Dec 01 15:34:11 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="1444605" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA () 42
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55."), Diff(INSERT,"LAMBDA () 42"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1415" _type="PauseCommand" date="Wed Dec 01 15:34:23 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="1456243">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11638]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1414" _type="ConsoleInput" date="Wed Dec 01 15:34:23 EST 2021" starttimestamp="1638389407073" timestamp="1456243" type="Exception">
    <outputString><![CDATA[(setq f (lambda NIL 42))
]]></outputString>
  </Command>
  <Command __id="1416" _type="ConsoleOutput" date="Wed Dec 01 15:34:23 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="1456296" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA () 42
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"LAMBDA () 42¶")]]]></diff>
  </Command>
  <Command __id="1418" _type="PauseCommand" date="Wed Dec 01 15:34:31 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="1464552">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8256]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1417" _type="ConsoleInput" date="Wed Dec 01 15:34:31 EST 2021" starttimestamp="1638389407073" timestamp="1464552" type="Exception">
    <outputString><![CDATA[(funcall f)
]]></outputString>
  </Command>
  <Command __id="1419" _type="ConsoleOutput" date="Wed Dec 01 15:34:31 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="1464653" type="ConsoleOutput">
    <outputString><![CDATA[42
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"LAMBDA () "), Diff(EQUAL,"42¶")]]]></diff>
  </Command>
  <Command __id="1421" _type="PauseCommand" date="Wed Dec 01 15:34:37 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="1470362">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5709]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1420" _type="ConsoleInput" date="Wed Dec 01 15:34:37 EST 2021" starttimestamp="1638389407073" timestamp="1470362" type="Exception">
    <outputString><![CDATA[(setq x 10)
]]></outputString>
  </Command>
  <Command __id="1422" _type="ConsoleOutput" date="Wed Dec 01 15:34:37 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="1470413" type="ConsoleOutput">
    <outputString><![CDATA[10
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"42"), Diff(INSERT,"10"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1424" _type="PauseCommand" date="Wed Dec 01 15:34:40 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1473522">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3108]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1423" _type="ConsoleInput" date="Wed Dec 01 15:34:40 EST 2021" starttimestamp="1638389407073" timestamp="1473521" type="Exception">
    <outputString><![CDATA[(setq y 11)
]]></outputString>
  </Command>
  <Command __id="1425" _type="ConsoleOutput" date="Wed Dec 01 15:34:40 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="1473623" type="ConsoleOutput">
    <outputString><![CDATA[11
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"1"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1427" _type="PauseCommand" date="Wed Dec 01 15:34:49 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="1482010">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[8387]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1426" _type="ConsoleInput" date="Wed Dec 01 15:34:49 EST 2021" starttimestamp="1638389407073" timestamp="1482010" type="Exception">
    <outputString><![CDATA[(setq g (lambda NIL (+ x y)))
]]></outputString>
  </Command>
  <Command __id="1428" _type="ConsoleOutput" date="Wed Dec 01 15:34:49 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="1482111" type="ConsoleOutput">
    <outputString><![CDATA[LAMBDA () (+ X Y)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"11"), Diff(INSERT,"LAMBDA () (+ X Y)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1430" _type="PauseCommand" date="Wed Dec 01 15:34:56 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="1489337">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7226]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="1429" _type="ConsoleInput" date="Wed Dec 01 15:34:56 EST 2021" starttimestamp="1638389407073" timestamp="1489337" type="Exception">
    <outputString><![CDATA[(funcall g)
]]></outputString>
  </Command>
  <Command __id="1431" _type="ConsoleOutput" date="Wed Dec 01 15:34:56 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="1489438" type="ConsoleOutput">
    <outputString><![CDATA[21
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"LAMBDA () (+ X Y)"), Diff(INSERT,"21"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1433" _type="PauseCommand" date="Wed Dec 01 15:35:02 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="1495260">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[5822]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[PasteCommand]]></next>
  </Command>
  <Command __id="1432" _type="PasteCommand" date="Wed Dec 01 15:35:02 EST 2021" starttimestamp="1638389407073" timestamp="1495260" />
  <Command __id="1434" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:35:03 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1496188" type="Debug" />
  <Command __id="1435" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:35:03 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="1496188" type="Run" />
  <Command __id="1436" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:35:03 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="1496188" type="Run" />
  <Command __id="1437" _type="ExceptionCommand" date="Wed Dec 01 15:35:03 EST 2021" starttimestamp="1638389407073" timestamp="1496189" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:30)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at a5.RunLisp.main(RunLisp.java:21)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="1439" _type="PauseCommand" date="Wed Dec 01 15:35:05 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1498914">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[2725]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1438" _type="ShellCommand" date="Wed Dec 01 15:35:05 EST 2021" starttimestamp="1638389407073" timestamp="1498914" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1441" _type="PauseCommand" date="Wed Dec 01 15:35:10 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1503194">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4280]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1440" _type="ShellCommand" date="Wed Dec 01 15:35:10 EST 2021" starttimestamp="1638389407073" timestamp="1503194" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1443" _type="PauseCommand" date="Wed Dec 01 15:35:20 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="1513730">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[10536]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1444" _type="MoveCaretCommand" caretOffset="198" date="Wed Dec 01 15:35:20 EST 2021" docOffset="479" starttimestamp="1638389407073" timestamp="1513812" />
  <Command __id="1446" _type="PauseCommand" date="Wed Dec 01 15:35:24 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1517466">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3654]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1445" _type="MoveCaretCommand" caretOffset="517" date="Wed Dec 01 15:35:24 EST 2021" docOffset="798" starttimestamp="1638389407073" timestamp="1517466" />
  <Command __id="1448" _type="PauseCommand" date="Wed Dec 01 15:35:27 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1520059">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2593]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1447" _type="SelectTextCommand" caretOffset="508" date="Wed Dec 01 15:35:27 EST 2021" end="518" start="508" starttimestamp="1638389407073" timestamp="1520059" />
  <Command __id="1449" _type="CopyCommand" date="Wed Dec 01 15:35:27 EST 2021" starttimestamp="1638389407073" timestamp="1520697" />
  <Command __id="1451" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:35:28 EST 2021" starttimestamp="1638389407073" timestamp="1520938" />
  <Command __id="1467" _type="PauseCommand" date="Wed Dec 01 15:35:31 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="1524695">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1087]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1466" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:35:31 EST 2021" starttimestamp="1638389407073" timestamp="1524695" />
  <Command __id="1468" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:35:31 EST 2021" starttimestamp="1638389407073" timestamp="1524699" />
  <Command __id="1469" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:35:31 EST 2021" starttimestamp="1638389407073" timestamp="1524699" />
  <Command __id="1470" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:35:31 EST 2021" starttimestamp="1638389407073" timestamp="1524700" />
  <Command __id="1471" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:35:31 EST 2021" starttimestamp="1638389407073" timestamp="1524700" />
  <Command __id="1472" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:35:31 EST 2021" starttimestamp="1638389407073" timestamp="1524701" />
  <Command __id="1473" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:35:31 EST 2021" starttimestamp="1638389407073" timestamp="1524701" />
  <Command __id="1474" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:35:31 EST 2021" starttimestamp="1638389407073" timestamp="1524710" />
  <Command __id="1482" _type="PauseCommand" date="Wed Dec 01 15:35:39 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="1532894">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5571]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1481" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:35:39 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="1532894" type="Run" />
  <Command __id="1483" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 15:35:39 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="1532894" type="Run" />
  <Command __id="1484" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:35:40 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1533101" type="Run" />
  <Command __id="1485" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:35:40 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1533134" type="Run" />
  <Command __id="1486" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:35:40 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1533300" type="Run" />
  <Command __id="1487" _type="ConsoleOutput" date="Wed Dec 01 15:35:40 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="1533435" type="ConsoleOutput">
    <outputString><![CDATA[JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"21"), Diff(INSERT,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1489" _type="PauseCommand" date="Wed Dec 01 15:35:43 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1536789">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[3354]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[PasteCommand]]></next>
  </Command>
  <Command __id="1488" _type="PasteCommand" date="Wed Dec 01 15:35:43 EST 2021" starttimestamp="1638389407073" timestamp="1536789" />
  <Command __id="1491" _type="PauseCommand" date="Wed Dec 01 15:35:47 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1540184">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[3395]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1490" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:35:47 EST 2021" starttimestamp="1638389407073" timestamp="1540184" />
  <Command __id="1492" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:35:47 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1540188" type="Run" />
  <Command __id="1493" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:35:47 EST 2021" starttimestamp="1638389407073" timestamp="1540712" />
  <Command __id="1494" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:35:47 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1540715" type="Run" />
  <Command __id="1495" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:35:48 EST 2021" starttimestamp="1638389407073" timestamp="1541268" />
  <Command __id="1496" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:35:48 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1541271" type="Run" />
  <Command __id="1497" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:35:49 EST 2021" starttimestamp="1638389407073" timestamp="1542207" />
  <Command __id="1498" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:35:49 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1542210" type="Run" />
  <Command __id="1499" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:35:49 EST 2021" starttimestamp="1638389407073" timestamp="1542742" />
  <Command __id="1500" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:35:49 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1542745" type="Run" />
  <Command __id="1501" _type="EclipseCommand" commandID="org.eclipse.debug.ui.commands.StepOver" date="Wed Dec 01 15:35:50 EST 2021" starttimestamp="1638389407073" timestamp="1543583" />
  <Command __id="1502" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:35:50 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1543586" type="Run" />
  <Command __id="1583" _type="PauseCommand" date="Wed Dec 01 15:36:57 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="1610708">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1293]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1582" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:36:57 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1610708" type="Run" />
  <Command __id="1589" _type="PauseCommand" date="Wed Dec 01 15:37:02 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="1615053">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1045]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1588" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:02 EST 2021" starttimestamp="1638389407073" timestamp="1615053" />
  <Command __id="1590" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:02 EST 2021" starttimestamp="1638389407073" timestamp="1615058" />
  <Command __id="1591" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:02 EST 2021" starttimestamp="1638389407073" timestamp="1615059" />
  <Command __id="1592" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:02 EST 2021" starttimestamp="1638389407073" timestamp="1615060" />
  <Command __id="1593" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:02 EST 2021" starttimestamp="1638389407073" timestamp="1615060" />
  <Command __id="1594" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:02 EST 2021" starttimestamp="1638389407073" timestamp="1615061" />
  <Command __id="1595" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:02 EST 2021" starttimestamp="1638389407073" timestamp="1615061" />
  <Command __id="1596" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Dec 01 15:37:02 EST 2021" starttimestamp="1638389407073" timestamp="1615062" />
  <Command __id="1597" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:02 EST 2021" starttimestamp="1638389407073" timestamp="1615063" />
  <Command __id="1598" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:02 EST 2021" starttimestamp="1638389407073" timestamp="1615063" />
  <Command __id="1599" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:02 EST 2021" starttimestamp="1638389407073" timestamp="1615086" />
  <Command __id="1600" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:37:02 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1615195" type="Run" />
  <Command __id="1601" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:37:02 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1615195" type="Run" />
  <Command __id="1602" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:37:02 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1615195" type="Run" />
  <Command __id="1603" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:37:02 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1615195" type="Run" />
  <Command __id="1604" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:03 EST 2021" starttimestamp="1638389407073" timestamp="1616136" />
  <Command __id="1605" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:03 EST 2021" starttimestamp="1638389407073" timestamp="1616140" />
  <Command __id="1606" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:03 EST 2021" starttimestamp="1638389407073" timestamp="1616140" />
  <Command __id="1607" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:03 EST 2021" starttimestamp="1638389407073" timestamp="1616141" />
  <Command __id="1608" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:03 EST 2021" starttimestamp="1638389407073" timestamp="1616141" />
  <Command __id="1609" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:03 EST 2021" starttimestamp="1638389407073" timestamp="1616142" />
  <Command __id="1610" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:03 EST 2021" starttimestamp="1638389407073" timestamp="1616142" />
  <Command __id="1611" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:37:03 EST 2021" starttimestamp="1638389407073" timestamp="1616152" />
  <Command __id="1639" _type="MoveCaretCommand" caretOffset="0" date="Wed Dec 01 15:37:14 EST 2021" docOffset="0" starttimestamp="1638389407073" timestamp="1627034" />
  <Command __id="1640" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:37:14 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1627867" type="Run" />
  <Command __id="1642" _type="MoveCaretCommand" caretOffset="762" date="Wed Dec 01 15:37:15 EST 2021" docOffset="892" starttimestamp="1638389407073" timestamp="1628109" />
  <Command __id="1680" _type="PauseCommand" date="Wed Dec 01 15:37:57 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1670723">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3765]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="1679" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:37:57 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1670723" type="Run" />
  <Command __id="1682" _type="PauseCommand" date="Wed Dec 01 15:38:01 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1674710">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3987]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="1683" _type="MoveCaretCommand" caretOffset="367" date="Wed Dec 01 15:38:01 EST 2021" docOffset="552" starttimestamp="1638389407073" timestamp="1674771" />
  <Command __id="1715" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:38:07 EST 2021" starttimestamp="1638389407073" timestamp="1679979" />
  <Command __id="1716" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:38:07 EST 2021" starttimestamp="1638389407073" timestamp="1679979" />
  <Command __id="1717" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:38:07 EST 2021" starttimestamp="1638389407073" timestamp="1679980" />
  <Command __id="1718" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:38:07 EST 2021" starttimestamp="1638389407073" timestamp="1679980" />
  <Command __id="1719" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:38:07 EST 2021" starttimestamp="1638389407073" timestamp="1679983" />
  <Command __id="1721" _type="PauseCommand" date="Wed Dec 01 15:38:08 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="1680989">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1006]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1720" _type="MoveCaretCommand" caretOffset="376" date="Wed Dec 01 15:38:08 EST 2021" docOffset="561" starttimestamp="1638389407073" timestamp="1680989" />
  <Command __id="1723" _type="PauseCommand" date="Wed Dec 01 15:38:10 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1683184">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2195]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1722" _type="MoveCaretCommand" caretOffset="334" date="Wed Dec 01 15:38:10 EST 2021" docOffset="519" starttimestamp="1638389407073" timestamp="1683184" />
  <Command __id="1725" _type="PauseCommand" date="Wed Dec 01 15:38:11 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="1684281">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1097]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1724" _type="SelectTextCommand" caretOffset="374" date="Wed Dec 01 15:38:11 EST 2021" end="383" start="374" starttimestamp="1638389407073" timestamp="1684281" />
  <Command __id="1727" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:38:11 EST 2021" starttimestamp="1638389407073" timestamp="1684725" />
  <Command __id="1729" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:38:12 EST 2021" starttimestamp="1638389407073" timestamp="1685246" />
  <Command __id="1731" _type="InsertStringCommand" date="Wed Dec 01 15:38:12 EST 2021" starttimestamp="1638389407073" timestamp="1685853" timestamp2="1685853">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1732" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Dec 01 15:38:12 EST 2021" start_end="START" starttimestamp="1638389407073" timestamp="1685856" />
  <Command __id="1734" _type="PauseCommand" date="Wed Dec 01 15:38:16 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1689166">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[3310]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="1735" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Dec 01 15:38:17 EST 2021" start_end="END" starttimestamp="1638389407073" timestamp="1690142" />
  <Command __id="1736" _type="MoveCaretCommand" caretOffset="492" date="Wed Dec 01 15:38:17 EST 2021" docOffset="677" starttimestamp="1638389407073" timestamp="1690180" />
  <Command __id="1738" _type="PauseCommand" date="Wed Dec 01 15:38:22 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="1695682">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[5502]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="1737" _type="MoveCaretCommand" caretOffset="373" date="Wed Dec 01 15:38:22 EST 2021" docOffset="558" starttimestamp="1638389407073" timestamp="1695682" />
  <Command __id="1292" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:31:49 EST 2021" docASTNodeCount="207" docActiveCodeLength="1237" docExpressionCount="136" docLength="1271" projectName="a5" starttimestamp="1638389407073" timestamp="1302811">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\environments\EnvironmentImplementation.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package environments;

import java.util.Optional;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.environment.AbstractEnvironment;
import main.lisp.evaluator.function.Function;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class EnvironmentImplementation extends AbstractEnvironment {

	public EnvironmentImplementation() {
		super();
	}
	
	public EnvironmentImplementation(Environment parent) {
		super(parent);
	}
	@Override
	public void assign(IdentifierAtom arg0, SExpression arg1) {
		this.put(arg0, arg1);
	}

	@Override
	public void assignFun(IdentifierAtom arg0, Function arg1) {
		this.getFunctionMap().put(arg0.toString(), arg1);
	}

	@Override
	public Environment copy() {
		return this;
	}

	@Override
	public Optional<SExpression> lookup(IdentifierAtom arg0) {
		if(this.get(arg0).isEmpty() && this.getParent() != null) {
			return this.getParent().get(arg0);
		}
		return this.get(arg0);
	}

	@Override
	public Optional<Function> lookupFun(IdentifierAtom arg0) {
		// TODO Auto-generated method stub
		return this.getFun(arg0);
	}

	@Override
	public Environment newChild() {
		return new EnvironmentImplementation(this);
		
	}

}
]]></snapshot>
  </Command>
  <Command __id="1295" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:32:05 EST 2021" docASTNodeCount="123" docActiveCodeLength="680" docExpressionCount="90" docLength="680" projectName="a5" starttimestamp="1638389407073" timestamp="1317970">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\a5\VariableEval.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package a5;

import main.lisp.evaluator.Environment;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import main.lisp.scanner.tokens.Token;
import main.lisp.parser.terms.IdentifierAtomFactory;

public class VariableEval extends IdentifierAtom {

	public VariableEval(String string) {
		super(string);
	}
	public VariableEval(Token token) {
		super(token);
	}
	
	@Override
	public SExpression eval(Environment arg0) {
		IdentifierAtomFactory.setClass(this.getClass());
		if (arg0.lookup(this).isEmpty() && arg0.getParent() != null) {
			return arg0.lookup(this).get();
		}
		return arg0.lookup(this).get();
	}

}
]]></snapshot>
  </Command>
  <DocumentChange __id="1301" _type="Insert" date="Wed Dec 01 15:32:15 EST 2021" docASTNodeCount="125" docActiveCodeLength="692" docExpressionCount="92" docLength="692" length="12" offset="610" repeat="12" starttimestamp="1638389407073" timestamp="1328384" timestamp2="1331303">
    <text><![CDATA[getParent().]]></text>
  </DocumentChange>
  <Command __id="1362" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:32:49 EST 2021" docASTNodeCount="411" docActiveCodeLength="2609" docExpressionCount="312" docLength="2609" projectName="a5" starttimestamp="1638389407073" timestamp="1362491">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.Optional;¶¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Function;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.ExpressionFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶¶public class FuncallEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		SExpression current = arg0.getTail();¶		¶		SExpression lambdaOrFunction = null;¶		if (!current.getHead().isAtom()) {¶			lambdaOrFunction = current.getHead().eval(arg1);¶		}¶		if (lambdaOrFunction instanceof Lambda) {¶			Environment childEnvironment = arg1.newChild();¶			return evaluateLambda((Lambda) lambdaOrFunction, childEnvironment, arg1, current.getTail());¶		} else if(lambdaOrFunction instanceof Function) {¶			return evaluateLambda (((Function) lambdaOrFunction).getLambda(), ((Function) lambdaOrFunction).getEnvironment().newChild(), ((Function) lambdaOrFunction).getEnvironment(),current.getTail() );¶		} else {¶			final Optional<SExpression> isLambda = arg1.lookup((IdentifierAtom) current.getHead());¶			if (!isLambda.isEmpty() && isLambda.get() instanceof Lambda) {¶				Environment childEnvironment = arg1.newChild();¶				return evaluateLambda((Lambda) isLambda.get(), childEnvironment, arg1, current.getTail());¶			} else if (!isLambda.isEmpty() && isLambda.get() instanceof Function) {¶				¶				return evaluateLambda (((Function) isLambda.get()).getLambda(), ((Function) isLambda.get()).getEnvironment().newChild(), ((Function) isLambda.get()).getEnvironment(),current.getTail() ); ¶			}¶			¶			return ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		}¶	}¶	¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1365" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:32:51 EST 2021" docASTNodeCount="125" docActiveCodeLength="692" docExpressionCount="92" docLength="692" projectName="a5" starttimestamp="1638389407073" timestamp="1364742">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\a5\VariableEval.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package a5;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶import main.lisp.scanner.tokens.Token;¶import main.lisp.parser.terms.IdentifierAtomFactory;¶¶public class VariableEval extends IdentifierAtom {¶¶	public VariableEval(String string) {¶		super(string);¶	}¶	public VariableEval(Token token) {¶		super(token);¶	}¶	¶	@Override¶	public SExpression eval(Environment arg0) {¶		IdentifierAtomFactory.setClass(this.getClass());¶		if (arg0.lookup(this).isEmpty() && arg0.getParent() != null) {¶			return arg0."), Diff(INSERT,"getParent()."), Diff(EQUAL,"lookup(this).get();¶		}¶		return arg0.lookup(this).get();¶	}¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package a5;

import main.lisp.evaluator.Environment;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;
import main.lisp.scanner.tokens.Token;
import main.lisp.parser.terms.IdentifierAtomFactory;

public class VariableEval extends IdentifierAtom {

	public VariableEval(String string) {
		super(string);
	}
	public VariableEval(Token token) {
		super(token);
	}
	
	@Override
	public SExpression eval(Environment arg0) {
		IdentifierAtomFactory.setClass(this.getClass());
		if (arg0.lookup(this).isEmpty() && arg0.getParent() != null) {
			return arg0.getParent().lookup(this).get();
		}
		return arg0.lookup(this).get();
	}

}
]]></snapshot>
  </Command>
  <Command __id="1396" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:33:42 EST 2021" docASTNodeCount="207" docActiveCodeLength="1237" docExpressionCount="136" docLength="1271" projectName="a5" starttimestamp="1638389407073" timestamp="1415216">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\environments\EnvironmentImplementation.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package environments;¶¶import java.util.Optional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.environment.AbstractEnvironment;¶import main.lisp.evaluator.function.Function;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class EnvironmentImplementation extends AbstractEnvironment {¶¶	public EnvironmentImplementation() {¶		super();¶	}¶	¶	public EnvironmentImplementation(Environment parent) {¶		super(parent);¶	}¶	@Override¶	public void assign(IdentifierAtom arg0, SExpression arg1) {¶		this.put(arg0, arg1);¶	}¶¶	@Override¶	public void assignFun(IdentifierAtom arg0, Function arg1) {¶		this.getFunctionMap().put(arg0.toString(), arg1);¶	}¶¶	@Override¶	public Environment copy() {¶		return this;¶	}¶¶	@Override¶	public Optional<SExpression> lookup(IdentifierAtom arg0) {¶		if(this.get(arg0).isEmpty() && this.getParent() != null) {¶			return this.getParent().get(arg0);¶		}¶		return this.get(arg0);¶	}¶¶	@Override¶	public Optional<Function> lookupFun(IdentifierAtom arg0) {¶		// TODO Auto-generated method stub¶		return this.getFun(arg0);¶	}¶¶	@Override¶	public Environment newChild() {¶		return new EnvironmentImplementation(this);¶		¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1399" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:33:43 EST 2021" docASTNodeCount="280" docActiveCodeLength="1531" docExpressionCount="200" docLength="1785" projectName="a5" starttimestamp="1638389407073" timestamp="1416204">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.ArrayList;¶import java.util.List;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class LambdaEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶//			if (arg0.getTail().isList()) {¶//				return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail().getHead());¶//			}¶			return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1401" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:33:45 EST 2021" projectName="null" starttimestamp="1638389407073" timestamp="1418765">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="1404" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:33:47 EST 2021" docASTNodeCount="280" docActiveCodeLength="1531" docExpressionCount="200" docLength="1785" projectName="a5" starttimestamp="1638389407073" timestamp="1420297">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.ArrayList;¶import java.util.List;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class LambdaEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶//			if (arg0.getTail().isList()) {¶//				return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail().getHead());¶//			}¶			return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1407" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:33:48 EST 2021" docASTNodeCount="411" docActiveCodeLength="2609" docExpressionCount="312" docLength="2609" projectName="a5" starttimestamp="1638389407073" timestamp="1420996">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.Optional;¶¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Function;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.ExpressionFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶¶public class FuncallEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		SExpression current = arg0.getTail();¶		¶		SExpression lambdaOrFunction = null;¶		if (!current.getHead().isAtom()) {¶			lambdaOrFunction = current.getHead().eval(arg1);¶		}¶		if (lambdaOrFunction instanceof Lambda) {¶			Environment childEnvironment = arg1.newChild();¶			return evaluateLambda((Lambda) lambdaOrFunction, childEnvironment, arg1, current.getTail());¶		} else if(lambdaOrFunction instanceof Function) {¶			return evaluateLambda (((Function) lambdaOrFunction).getLambda(), ((Function) lambdaOrFunction).getEnvironment().newChild(), ((Function) lambdaOrFunction).getEnvironment(),current.getTail() );¶		} else {¶			final Optional<SExpression> isLambda = arg1.lookup((IdentifierAtom) current.getHead());¶			if (!isLambda.isEmpty() && isLambda.get() instanceof Lambda) {¶				Environment childEnvironment = arg1.newChild();¶				return evaluateLambda((Lambda) isLambda.get(), childEnvironment, arg1, current.getTail());¶			} else if (!isLambda.isEmpty() && isLambda.get() instanceof Function) {¶				¶				return evaluateLambda (((Function) isLambda.get()).getLambda(), ((Function) isLambda.get()).getEnvironment().newChild(), ((Function) isLambda.get()).getEnvironment(),current.getTail() ); ¶			}¶			¶			return ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		}¶	}¶	¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1442" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:35:20 EST 2021" docASTNodeCount="345" docActiveCodeLength="1937" docExpressionCount="251" docLength="2118" projectName="a5" starttimestamp="1638389407073" timestamp="1513730">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.FunctionFactory;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class FunctionEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead().getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶			if (arg0.getTail().isList()) {¶				SExpression body =arg0.getTail().getHead().getTail().getTail().getHead();¶				Lambda lambda = LambdaFactory.newInstance(argNames1, body);¶				return FunctionFactory.newInstance(lambda, arg1);¶			}¶			Lambda lambda = LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶			return FunctionFactory.newInstance(lambda, arg1);¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);¶		return FunctionFactory.newInstance(lambda, arg1);¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1450" _type="Delete" date="Wed Dec 01 15:35:28 EST 2021" docASTNodeCount="343" docActiveCodeLength="1927" docExpressionCount="249" docLength="2108" endLine="20" length="10" offset="789" startLine="20" starttimestamp="1638389407073" timestamp="1520932">
    <text><![CDATA[.getHead()]]></text>
  </DocumentChange>
  <DocumentChange __id="1452" _type="Insert" date="Wed Dec 01 15:35:29 EST 2021" docASTNodeCount="345" docActiveCodeLength="1937" docExpressionCount="251" docLength="2118" length="10" offset="789" starttimestamp="1638389407073" timestamp="1522888">
    <text><![CDATA[.getHead()]]></text>
  </DocumentChange>
  <DocumentChange __id="1586" _type="Delete" date="Wed Dec 01 15:37:01 EST 2021" docASTNodeCount="343" docActiveCodeLength="1927" docExpressionCount="249" docLength="2108" endLine="20" length="10" offset="789" startLine="20" starttimestamp="1638389407073" timestamp="1614004">
    <text><![CDATA[.getHead()]]></text>
  </DocumentChange>
  <Command __id="1631" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:37:12 EST 2021" projectName="null" starttimestamp="1638389407073" timestamp="1625840">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="1635" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:37:13 EST 2021" docASTNodeCount="288" docActiveCodeLength="1838" docExpressionCount="211" docLength="1923" projectName="a5" starttimestamp="1638389407073" timestamp="1626120">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\evaluators\LambdaSExpressionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package evaluators;¶¶import main.lisp.evaluator.BasicExpressionEvaluator;¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.DecimalAtom;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶import main.lisp.parser.terms.TAtomicExpressionFactory;¶¶public class LambdaSExpressionEvaluator extends BasicExpressionEvaluator {¶	@Override¶	public SExpression eval(SExpression expr, Environment environment) {¶		// evaluates lambda first¶		if (!expr.getHead().isAtom()) {¶			SExpression eval = super.eval(expr.getHead(), environment);¶			if (eval instanceof Lambda) {¶				Environment childEnvironment = environment.newChild();¶				return evaluateLambda((Lambda) eval, childEnvironment, environment, expr.getTail());¶			}¶			SExpression isExpressionNested = expr.getHead().getHead();¶			if (!isExpressionNested.isAtom()) {¶				eval = super.eval(isExpressionNested, environment);¶				if (eval instanceof Lambda) {¶					Environment childEnvironment = environment.newChild();¶					return evaluateLambda((Lambda) eval, childEnvironment, environment, expr.getTail());¶				}¶			}¶		}¶			// when it is not a lambda¶			return super.eval(expr, environment);¶		}¶¶	// produces your lambda evaluation¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶	¶¶}¶¶")]]]></diff>
  </Command>
  <Command __id="1638" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:37:13 EST 2021" projectName="null" starttimestamp="1638389407073" timestamp="1626911">
    <filePath><![CDATA[null]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="1641" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:37:15 EST 2021" docASTNodeCount="185" docActiveCodeLength="1152" docExpressionCount="142" docLength="1152" projectName="a5" starttimestamp="1638389407073" timestamp="1627957">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LetEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class LetEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		Environment childEnvironment = arg1.newChild();¶		SExpression currentDeclare = arg0.getTail().getHead();¶		SExpression currentBody = arg0.getTail().getTail();¶		while (!currentDeclare.getTail().isNIL()) {¶			childEnvironment.assign((IdentifierAtom)currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead());¶			currentDeclare = currentDeclare.getTail();¶		}¶		if (!currentDeclare.isAtom()) {¶			childEnvironment.assign((IdentifierAtom) currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead().eval(arg1));¶		}¶		SExpression currentEval = currentBody.getHead().eval(childEnvironment);¶		while(!currentBody.getTail().isNIL()) {¶			currentEval = currentBody.getHead().eval(childEnvironment);¶			currentBody = currentBody.getTail();¶		}¶		return currentEval;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="1681" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:38:01 EST 2021" docASTNodeCount="125" docActiveCodeLength="692" docExpressionCount="92" docLength="692" projectName="a5" starttimestamp="1638389407073" timestamp="1674710">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\a5\VariableEval.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package a5;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶import main.lisp.scanner.tokens.Token;¶import main.lisp.parser.terms.IdentifierAtomFactory;¶¶public class VariableEval extends IdentifierAtom {¶¶	public VariableEval(String string) {¶		super(string);¶	}¶	public VariableEval(Token token) {¶		super(token);¶	}¶	¶	@Override¶	public SExpression eval(Environment arg0) {¶		IdentifierAtomFactory.setClass(this.getClass());¶		if (arg0.lookup(this).isEmpty() && arg0.getParent() != null) {¶			return arg0.getParent().lookup(this).get();¶		}¶		return arg0.lookup(this).get();¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="1684" _type="Insert" date="Wed Dec 01 15:38:03 EST 2021" docASTNodeCount="128" docActiveCodeLength="699" docExpressionCount="95" docLength="699" length="7" offset="552" repeat="6" starttimestamp="1638389407073" timestamp="1675989" timestamp2="1677472">
    <text><![CDATA[.get()/]]></text>
  </DocumentChange>
  <DocumentChange __id="1695" _type="Delete" date="Wed Dec 01 15:38:05 EST 2021" docASTNodeCount="127" docActiveCodeLength="698" docExpressionCount="94" docLength="698" endLine="20" length="1" offset="558" startLine="20" starttimestamp="1638389407073" timestamp="1677965">
    <text><![CDATA[/]]></text>
  </DocumentChange>
  <DocumentChange __id="1726" _type="Delete" date="Wed Dec 01 15:38:11 EST 2021" docASTNodeCount="125" docActiveCodeLength="688" docExpressionCount="92" docLength="688" endLine="20" length="10" offset="558" repeat="2" startLine="20" starttimestamp="1638389407073" timestamp="1684721" timestamp2="1685245">
    <text><![CDATA[.isEmpty()]]></text>
  </DocumentChange>
  <DocumentChange __id="1730" _type="Insert" date="Wed Dec 01 15:38:12 EST 2021" docASTNodeCount="125" docActiveCodeLength="689" docExpressionCount="92" docLength="689" length="1" offset="558" starttimestamp="1638389407073" timestamp="1685851">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="1733" _type="Delete" date="Wed Dec 01 15:38:16 EST 2021" docASTNodeCount="125" docActiveCodeLength="688" docExpressionCount="92" docLength="688" endLine="20" length="1" offset="558" startLine="20" starttimestamp="1638389407073" timestamp="1689166">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <Command __id="1740" _type="PauseCommand" date="Wed Dec 01 15:38:24 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1697723">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2041]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1739" _type="SelectTextCommand" caretOffset="368" date="Wed Dec 01 15:38:24 EST 2021" end="373" start="368" starttimestamp="1638389407073" timestamp="1697723" />
  <DocumentChange __id="1741" _type="Delete" date="Wed Dec 01 15:38:25 EST 2021" docASTNodeCount="123" docActiveCodeLength="682" docExpressionCount="90" docLength="682" endLine="20" length="6" offset="552" repeat="2" startLine="20" starttimestamp="1638389407073" timestamp="1698464" timestamp2="1698695">
    <text><![CDATA[.get()]]></text>
  </DocumentChange>
  <Command __id="1742" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:38:25 EST 2021" starttimestamp="1638389407073" timestamp="1698466" />
  <Command __id="1744" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:38:25 EST 2021" starttimestamp="1638389407073" timestamp="1698696" />
  <Command __id="1746" _type="InsertStringCommand" date="Wed Dec 01 15:38:26 EST 2021" starttimestamp="1638389407073" timestamp="1699428" timestamp2="1699428">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="1747" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Dec 01 15:38:26 EST 2021" start_end="START" starttimestamp="1638389407073" timestamp="1699430" />
  <Command __id="1749" _type="PauseCommand" date="Wed Dec 01 15:38:31 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="1704639">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[5209]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="1748" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Dec 01 15:38:31 EST 2021" start_end="END" starttimestamp="1638389407073" timestamp="1704639" />
  <Command __id="1751" _type="InsertStringCommand" date="Wed Dec 01 15:38:31 EST 2021" starttimestamp="1638389407073" timestamp="1704642" timestamp2="1704642">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="1961" _type="PauseCommand" date="Wed Dec 01 15:41:01 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1854773">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2290]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="1960" _type="ConsoleOutput" date="Wed Dec 01 15:41:01 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="1854773" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp524f21.assignment6.style.A6NonPublicAccessModifiersMatched@5277f88d . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A6CommonPropertiesInherited did not pass completely:See console trace about lines fail"), Diff(INSERT,"Re-runn"), Diff(EQUAL,"ing "), Diff(DELETE," "), Diff(EQUAL,"t"), Diff(DELETE,"his check%0.0¶¶Test execution time (ms):6¶A6CommonSignaturesAreInherited did not pass completely:See console trace about lines failing  this check%0.7861271676300579¶¶Test execution time (ms):6¶Test execution time (ms):3¶Test execution time (ms):2¶A6NonPublicAccessModifiersMatched did not pass completely:See console trace about lines failing  this check%0.75¶¶Test execution time (ms):6¶Test execution time (ms):6¶Test execution time (ms):3¶Test execution time (ms):3¶F21A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):3"), Diff(INSERT,"est gradingTools.comp524f21.assignment6.style.A6NonPublicAccessModifiersMatched@5277f88d . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="1963" _type="PauseCommand" date="Wed Dec 01 15:41:08 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="1861489">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6716]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1962" _type="ShellCommand" date="Wed Dec 01 15:41:08 EST 2021" starttimestamp="1638389407073" timestamp="1861489" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1968" _type="PauseCommand" date="Wed Dec 01 15:41:22 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="1875764">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1724]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="1967" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:41:22 EST 2021" starttimestamp="1638389407073" timestamp="1875764" />
  <Command __id="1969" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:41:22 EST 2021" starttimestamp="1638389407073" timestamp="1875768" />
  <Command __id="1970" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:41:22 EST 2021" starttimestamp="1638389407073" timestamp="1875769" />
  <Command __id="1971" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:41:22 EST 2021" starttimestamp="1638389407073" timestamp="1875769" />
  <Command __id="1972" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:41:22 EST 2021" starttimestamp="1638389407073" timestamp="1875770" />
  <Command __id="1973" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:41:22 EST 2021" starttimestamp="1638389407073" timestamp="1875770" />
  <Command __id="1974" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:41:22 EST 2021" starttimestamp="1638389407073" timestamp="1875770" />
  <Command __id="1975" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:41:22 EST 2021" starttimestamp="1638389407073" timestamp="1875772" />
  <Command __id="1976" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:41:22 EST 2021" starttimestamp="1638389407073" timestamp="1875772" />
  <Command __id="1977" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:41:22 EST 2021" starttimestamp="1638389407073" timestamp="1875773" />
  <Command __id="1979" _type="PauseCommand" date="Wed Dec 01 15:41:51 EST 2021" range="20s-30s" starttimestamp="1638389407073" timestamp="1904501">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[28728]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1978" _type="ShellCommand" date="Wed Dec 01 15:41:51 EST 2021" starttimestamp="1638389407073" timestamp="1904501" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1981" _type="PauseCommand" date="Wed Dec 01 15:42:21 EST 2021" range="30s-1m" starttimestamp="1638389407073" timestamp="1934746">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[30245]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1980" _type="ShellCommand" date="Wed Dec 01 15:42:21 EST 2021" starttimestamp="1638389407073" timestamp="1934746" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1983" _type="PauseCommand" date="Wed Dec 01 15:42:23 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="1936082">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1336]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1982" _type="ShellCommand" date="Wed Dec 01 15:42:23 EST 2021" starttimestamp="1638389407073" timestamp="1936082" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="1985" _type="PauseCommand" date="Wed Dec 01 15:42:24 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="1937823">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1741]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="1984" _type="ShellCommand" date="Wed Dec 01 15:42:24 EST 2021" starttimestamp="1638389407073" timestamp="1937823" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="1987" _type="PauseCommand" date="Wed Dec 01 15:42:27 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1940221">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2398]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="1986" _type="SelectTextCommand" caretOffset="1039" date="Wed Dec 01 15:42:27 EST 2021" end="1047" start="1039" starttimestamp="1638389407073" timestamp="1940221" />
  <Command __id="1989" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:42:27 EST 2021" starttimestamp="1638389407073" timestamp="1940875" />
  <Command __id="1990" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Dec 01 15:42:28 EST 2021" starttimestamp="1638389407073" timestamp="1941477" />
  <Command __id="1991" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:29 EST 2021" starttimestamp="1638389407073" timestamp="1941971" />
  <Command __id="1992" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:29 EST 2021" starttimestamp="1638389407073" timestamp="1941974" />
  <Command __id="1993" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:29 EST 2021" starttimestamp="1638389407073" timestamp="1941974" />
  <Command __id="1994" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:29 EST 2021" starttimestamp="1638389407073" timestamp="1941975" />
  <Command __id="1995" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:29 EST 2021" starttimestamp="1638389407073" timestamp="1941975" />
  <Command __id="1996" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:29 EST 2021" starttimestamp="1638389407073" timestamp="1941975" />
  <Command __id="1997" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:29 EST 2021" starttimestamp="1638389407073" timestamp="1941975" />
  <Command __id="1998" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:29 EST 2021" starttimestamp="1638389407073" timestamp="1941977" />
  <Command __id="1999" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:29 EST 2021" starttimestamp="1638389407073" timestamp="1941977" />
  <Command __id="2000" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:29 EST 2021" starttimestamp="1638389407073" timestamp="1942010" />
  <Command __id="2001" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:42:29 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1942147" type="Run" />
  <Command __id="2002" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:42:29 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1942147" type="Run" />
  <Command __id="2003" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:42:29 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="1942147" type="Run" />
  <Command __id="2004" _type="ShellCommand" date="Wed Dec 01 15:42:29 EST 2021" starttimestamp="1638389407073" timestamp="1942153" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2008" _type="PauseCommand" date="Wed Dec 01 15:42:54 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1967148">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3805]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="2007" _type="RunCommand" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 15:42:54 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="1967148" type="Run" />
  <Command __id="2009" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:54 EST 2021" starttimestamp="1638389407073" timestamp="1967243" />
  <Command __id="2010" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:54 EST 2021" starttimestamp="1638389407073" timestamp="1967247" />
  <Command __id="2011" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:54 EST 2021" starttimestamp="1638389407073" timestamp="1967247" />
  <Command __id="2012" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:54 EST 2021" starttimestamp="1638389407073" timestamp="1967248" />
  <Command __id="2013" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:54 EST 2021" starttimestamp="1638389407073" timestamp="1967248" />
  <Command __id="2014" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:54 EST 2021" starttimestamp="1638389407073" timestamp="1967249" />
  <Command __id="2015" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:54 EST 2021" starttimestamp="1638389407073" timestamp="1967249" />
  <Command __id="2016" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:42:54 EST 2021" starttimestamp="1638389407073" timestamp="1967252" />
  <Command __id="2018" _type="PauseCommand" date="Wed Dec 01 15:42:56 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="1969577">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2325]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2017" _type="ShellCommand" date="Wed Dec 01 15:42:56 EST 2021" starttimestamp="1638389407073" timestamp="1969577" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2020" _type="PauseCommand" date="Wed Dec 01 15:45:51 EST 2021" range="2m-5m" starttimestamp="1638389407073" timestamp="2144103">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[174526]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2019" _type="ShellCommand" date="Wed Dec 01 15:45:51 EST 2021" starttimestamp="1638389407073" timestamp="2144103" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2028" _type="PauseCommand" date="Wed Dec 01 15:47:30 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="2243626">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1792]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2027" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 15:47:30 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="2243626" type="Debug" />
  <Command __id="2029" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 15:47:30 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="2243626" type="Run" />
  <Command __id="2030" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 15:47:30 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="2243626" type="Run" />
  <Command __id="2032" _type="PauseCommand" date="Wed Dec 01 15:47:35 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="2248121">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[4495]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2031" _type="ShellCommand" date="Wed Dec 01 15:47:35 EST 2021" starttimestamp="1638389407073" timestamp="2248121" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2034" _type="PauseCommand" date="Wed Dec 01 15:47:38 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="2251892">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3771]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2033" _type="ShellCommand" date="Wed Dec 01 15:47:38 EST 2021" starttimestamp="1638389407073" timestamp="2251892" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2036" _type="PauseCommand" date="Wed Dec 01 15:50:07 EST 2021" range="2m-5m" starttimestamp="1638389407073" timestamp="2400271">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[148379]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2035" _type="ShellCommand" date="Wed Dec 01 15:50:07 EST 2021" starttimestamp="1638389407073" timestamp="2400271" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2037" _type="ShellCommand" date="Wed Dec 01 15:50:08 EST 2021" starttimestamp="1638389407073" timestamp="2401007" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2038" _type="ShellCommand" date="Wed Dec 01 15:50:08 EST 2021" starttimestamp="1638389407073" timestamp="2401099" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2039" _type="ShellCommand" date="Wed Dec 01 15:50:08 EST 2021" starttimestamp="1638389407073" timestamp="2401920" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2043" _type="PauseCommand" date="Wed Dec 01 15:55:02 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="2695758">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6230]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2042" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 15:55:02 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="2695758" type="Run" />
  <Command __id="2044" _type="RunCommand" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 15:55:02 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="2695758" type="Run" />
  <Command __id="2046" _type="PauseCommand" date="Wed Dec 01 15:55:05 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="2698220">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2462]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2045" _type="ShellCommand" date="Wed Dec 01 15:55:05 EST 2021" starttimestamp="1638389407073" timestamp="2698220" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2048" _type="PauseCommand" date="Wed Dec 01 15:55:08 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="2701565">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3345]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="2047" _type="ConsoleOutput" date="Wed Dec 01 15:55:08 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="2701565" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):2
Test execution time (ms):8
Test execution time (ms):11
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Re-running test gradingTools.comp524f21.assignment6.style.A6NonPublicAccessModifiersMatched@5277f88d . Results may change."), Diff(INSERT,"Test execution time (ms):2¶Test execution time (ms):8¶Test execution time (ms):11"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2049" _type="ConsoleOutput" date="Wed Dec 01 15:55:08 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="2701666" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):76
Test execution time (ms):78
Test execution time (ms):0
Test execution time (ms):1
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):2
Test execution time (ms):0
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):1
Test execution time (ms):1
Test execution time (ms):1
Test execution time (ms):1
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"2¶Test execution time (ms):8¶Test execution time (ms):11"), Diff(INSERT,"76¶Test execution time (ms):78¶Test execution time (ms):0¶Test execution time (ms):1¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):2¶Test execution time (ms):0¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):1¶Test execution time (ms):1¶Test execution time (ms):1¶Test execution time (ms):1¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2050" _type="ConsoleOutput" date="Wed Dec 01 15:55:08 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="2701784" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):23
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
Building symbol table and running first pass checks:Wed Dec 01 15:55:08 EST 2021
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"76"), Diff(INSERT,"23"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"78"), Diff(INSERT,"1"), Diff(EQUAL,"¶Test execution time (ms):0¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"0"), Diff(EQUAL,"¶Test execution time (ms):0¶Test execution time (ms):"), Diff(DELETE,"2¶Test execution time (ms):0¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):1¶Test execution time (ms):1¶Test execution time (ms):1¶Test execution time (ms):1¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0"), Diff(INSERT,"0¶Building symbol table and running first pass checks:Wed Dec 01 15:55:08 EST 2021"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2052" _type="PauseCommand" date="Wed Dec 01 15:55:10 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="2703330">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1546]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="2051" _type="ConsoleOutput" date="Wed Dec 01 15:55:10 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="2703330" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:41
Running second pass checks Wed Dec 01 15:55:10 EST 2021
Start O(n2) inter- and intra class method calls:Wed Dec 01 15:55:10 EST 2021
End O(n2) inter- and intra class method calls:Wed Dec 01 15:55:10 EST 2021
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):23¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶Building symbol table and running first pass check"), Diff(INSERT,"Symbol table size:41¶Running second pass checks Wed Dec 01 15:55:10 EST 2021¶Start O(n2) inter- and intra class method calls:Wed Dec 01 15:55:10 EST 2021¶End O(n2) inter- and intra class method call"), Diff(EQUAL,"s:Wed Dec 01 15:55:"), Diff(INSERT,"1"), Diff(EQUAL,"0"), Diff(DELETE,"8"), Diff(EQUAL," EST 2021¶")]]]></diff>
  </Command>
  <Command __id="2053" _type="ConsoleOutput" date="Wed Dec 01 15:55:11 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="2704181" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Wed Dec 01 15:55:11 EST 2021
Generating checks:Wed Dec 01 15:55:11 EST 2021
Finished Generating checks:Wed Dec 01 15:55:11 EST 2021
Generating externals:Wed Dec 01 15:55:11 EST 2021
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:41¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Wed Dec 01 15:55:1"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL," EST 2021¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating check"), Diff(EQUAL,"s:Wed Dec 01 15:55:1"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL," EST 2021¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Finished Generating checks:Wed Dec 01 15:55:11 EST 2021¶Generating externa"), Diff(EQUAL,"ls:Wed Dec 01 15:55:1"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL," EST 2021¶")]]]></diff>
  </Command>
  <Command __id="2054" _type="ConsoleOutput" date="Wed Dec 01 15:55:11 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="2704294" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Wed Dec 01 15:55:11 EST 2021
A6CommonPropertiesInherited did not pass completely:See console trace about lines failing  this check%0.0

Test execution time (ms):2577
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass check"), Diff(INSERT,"Generating external"), Diff(EQUAL,"s:Wed Dec 01 15:55:11 EST 2021¶"), Diff(DELETE,"Gen"), Diff(INSERT,"A6CommonProp"), Diff(EQUAL,"er"), Diff(DELETE,"a"), Diff(EQUAL,"ti"), Diff(DELETE,"ng checks:Wed Dec 01 15:55:11 EST 2021¶Finished Generating checks:Wed Dec 01 15:55:11 EST 2021¶Generating externals:Wed Dec 01 15:55:11 EST 2021"), Diff(INSERT,"esInherited did not pass completely:See console trace about lines failing  this check%0.0¶¶Test execution time (ms):2577"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2055" _type="ConsoleOutput" date="Wed Dec 01 15:55:11 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="2704412" type="ConsoleOutput">
    <outputString><![CDATA[A6CommonSignaturesAreInherited did not pass completely:See console trace about lines failing  this check%0.7861271676300579

Test execution time (ms):30
Test execution time (ms):4
Test execution time (ms):4
A6NonPublicAccessModifiersMatched did not pass completely:See console trace about lines failing  this check%0.75

Test execution time (ms):7
Test execution time (ms):8
Test execution time (ms):4
Test execution time (ms):3
F21A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0

Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Wed Dec 01 15:55:11 EST 2021¶A6CommonPropertiesInherited did not pass completely:See console trace about lines failing  this check"), Diff(INSERT,"A6CommonSignaturesAreInherited did not pass completely:See console trace about lines failing  this check%0.7861271676300579¶¶Test execution time (ms):30¶Test execution time (ms):4¶Test execution time (ms):4¶A6NonPublicAccessModifiersMatched did not pass completely:See console trace about lines failing  this check%0.75¶¶Test execution time (ms):7¶Test execution time (ms):8¶Test execution time (ms):4¶Test execution time (ms):3¶F21A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output"), Diff(EQUAL,"%0.0¶¶Test execution time (ms):"), Diff(DELETE,"2577"), Diff(INSERT,"1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2056" _type="ShellCommand" date="Wed Dec 01 15:55:11 EST 2021" starttimestamp="1638389407073" timestamp="2704568" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2058" _type="PauseCommand" date="Wed Dec 01 15:55:13 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="2706664">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2096]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2057" _type="ShellCommand" date="Wed Dec 01 15:55:13 EST 2021" starttimestamp="1638389407073" timestamp="2706664" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2059" _type="ConsoleOutput" date="Wed Dec 01 15:55:14 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="2706956" type="ConsoleOutput">
    <outputString><![CDATA[Re-running test gradingTools.comp524f21.assignment6.style.A6NonPublicAccessModifiersMatched@447f7712 . Results may change.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A6CommonSignaturesAreInherited did not pass completely:See console trace about lines failing  this check%0.7861271676300579¶¶Test execution time (ms):30¶Test execution time (ms):4¶Test execution time (ms):4¶A6NonPublicAccessModifiersMatched did not pass completely:See console trace about lines failing  this check%0.75¶¶Test execution time (ms):7¶Test execution time (ms):8¶Test execution time (ms):4¶Test execution time (ms):3¶F21A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶¶Test execution time (ms):1"), Diff(INSERT,"Re-running test gradingTools.comp524f21.assignment6.style.A6NonPublicAccessModifiersMatched@447f7712 . Results may change."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2061" _type="PauseCommand" date="Wed Dec 01 15:55:16 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="2709374">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2418]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2060" _type="ShellCommand" date="Wed Dec 01 15:55:16 EST 2021" starttimestamp="1638389407073" timestamp="2709374" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2063" _type="PauseCommand" date="Wed Dec 01 15:55:33 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="2726442">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[17068]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2062" _type="MoveCaretCommand" caretOffset="1480" date="Wed Dec 01 15:55:33 EST 2021" docOffset="1859" starttimestamp="1638389407073" timestamp="2726442" />
  <Command __id="2064" _type="MoveCaretCommand" caretOffset="1039" date="Wed Dec 01 15:55:34 EST 2021" docOffset="1418" starttimestamp="1638389407073" timestamp="2727269" />
  <Command __id="2066" _type="InsertStringCommand" date="Wed Dec 01 15:55:34 EST 2021" starttimestamp="1638389407073" timestamp="2727867" timestamp2="2727867">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2068" _type="InsertStringCommand" date="Wed Dec 01 15:55:35 EST 2021" starttimestamp="1638389407073" timestamp="2727961" timestamp2="2727961">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2070" _type="InsertStringCommand" date="Wed Dec 01 15:55:35 EST 2021" starttimestamp="1638389407073" timestamp="2728075" timestamp2="2728075">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2072" _type="InsertStringCommand" date="Wed Dec 01 15:55:35 EST 2021" starttimestamp="1638389407073" timestamp="2728177" timestamp2="2728177">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2074" _type="InsertStringCommand" date="Wed Dec 01 15:55:35 EST 2021" starttimestamp="1638389407073" timestamp="2728274" timestamp2="2728274">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2076" _type="PauseCommand" date="Wed Dec 01 15:55:36 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="2729403">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1129]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Delete]]></next>
  </Command>
  <Command __id="2077" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:55:36 EST 2021" starttimestamp="1638389407073" timestamp="2729405" />
  <Command __id="2079" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:55:36 EST 2021" starttimestamp="1638389407073" timestamp="2729924" />
  <Command __id="2081" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:55:37 EST 2021" starttimestamp="1638389407073" timestamp="2730090" />
  <Command __id="2083" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:55:37 EST 2021" starttimestamp="1638389407073" timestamp="2730243" />
  <Command __id="2085" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:55:37 EST 2021" starttimestamp="1638389407073" timestamp="2730390" />
  <Command __id="2087" _type="PauseCommand" date="Wed Dec 01 15:55:44 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="2737071">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[6681]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2086" _type="SelectTextCommand" caretOffset="1038" date="Wed Dec 01 15:55:44 EST 2021" end="1524" start="1038" starttimestamp="1638389407073" timestamp="2737071" />
  <Command __id="2089" _type="PauseCommand" date="Wed Dec 01 15:56:06 EST 2021" range="20s-30s" starttimestamp="1638389407073" timestamp="2759350">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[22279]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2088" _type="MoveCaretCommand" caretOffset="1527" date="Wed Dec 01 15:56:06 EST 2021" docOffset="1906" starttimestamp="1638389407073" timestamp="2759350" />
  <Command __id="2121" _type="PauseCommand" date="Wed Dec 01 15:56:11 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="2764310">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1049]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2120" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:11 EST 2021" starttimestamp="1638389407073" timestamp="2764310" />
  <Command __id="2122" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:11 EST 2021" starttimestamp="1638389407073" timestamp="2764315" />
  <Command __id="2123" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:11 EST 2021" starttimestamp="1638389407073" timestamp="2764315" />
  <Command __id="2124" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:11 EST 2021" starttimestamp="1638389407073" timestamp="2764316" />
  <Command __id="2125" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:11 EST 2021" starttimestamp="1638389407073" timestamp="2764316" />
  <Command __id="2126" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:11 EST 2021" starttimestamp="1638389407073" timestamp="2764317" />
  <Command __id="2127" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:11 EST 2021" starttimestamp="1638389407073" timestamp="2764317" />
  <Command __id="2128" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:11 EST 2021" starttimestamp="1638389407073" timestamp="2764319" />
  <Command __id="2129" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:11 EST 2021" starttimestamp="1638389407073" timestamp="2764319" />
  <Command __id="2130" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:11 EST 2021" starttimestamp="1638389407073" timestamp="2764320" />
  <Command __id="2132" _type="PauseCommand" date="Wed Dec 01 15:56:15 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="2768187">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3867]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2133" _type="MoveCaretCommand" caretOffset="463" date="Wed Dec 01 15:56:15 EST 2021" docOffset="648" starttimestamp="1638389407073" timestamp="2768252" />
  <Command __id="2135" _type="MoveCaretCommand" caretOffset="1047" date="Wed Dec 01 15:56:16 EST 2021" docOffset="1426" starttimestamp="1638389407073" timestamp="2769017" />
  <Command __id="2137" _type="PauseCommand" date="Wed Dec 01 15:56:18 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="2771297">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2280]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2138" _type="MoveCaretCommand" caretOffset="731" date="Wed Dec 01 15:56:18 EST 2021" docOffset="1167" starttimestamp="1638389407073" timestamp="2771351" />
  <Command __id="2140" _type="PauseCommand" date="Wed Dec 01 15:56:21 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="2774119">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2768]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2141" _type="MoveCaretCommand" caretOffset="0" date="Wed Dec 01 15:56:21 EST 2021" docOffset="0" starttimestamp="1638389407073" timestamp="2774177" />
  <Command __id="2143" _type="PauseCommand" date="Wed Dec 01 15:56:23 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="2776685">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2508]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2142" _type="SelectTextCommand" caretOffset="374" date="Wed Dec 01 15:56:23 EST 2021" end="505" start="374" starttimestamp="1638389407073" timestamp="2776685" />
  <Command __id="2144" _type="SelectTextCommand" caretOffset="374" date="Wed Dec 01 15:56:23 EST 2021" end="505" start="374" starttimestamp="1638389407073" timestamp="2776685" />
  <Command __id="2146" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:56:24 EST 2021" starttimestamp="1638389407073" timestamp="2777000" />
  <Command __id="2147" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:56:24 EST 2021" starttimestamp="1638389407073" timestamp="2777000" />
  <Command __id="2149" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:56:24 EST 2021" starttimestamp="1638389407073" timestamp="2777449" />
  <Command __id="2150" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:56:24 EST 2021" starttimestamp="1638389407073" timestamp="2777450" />
  <Command __id="2152" _type="PauseCommand" date="Wed Dec 01 15:56:34 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="2787386">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[9936]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2151" _type="SelectTextCommand" caretOffset="21" date="Wed Dec 01 15:56:34 EST 2021" end="76" start="21" starttimestamp="1638389407073" timestamp="2787386" />
  <Command __id="2153" _type="SelectTextCommand" caretOffset="21" date="Wed Dec 01 15:56:34 EST 2021" end="76" start="21" starttimestamp="1638389407073" timestamp="2787387" />
  <Command __id="2155" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:56:34 EST 2021" starttimestamp="1638389407073" timestamp="2787860" />
  <Command __id="2156" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:56:34 EST 2021" starttimestamp="1638389407073" timestamp="2787860" />
  <Command __id="2158" _type="PauseCommand" date="Wed Dec 01 15:56:37 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="2789958">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2098]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2157" _type="SelectTextCommand" caretOffset="103" date="Wed Dec 01 15:56:37 EST 2021" end="146" start="103" starttimestamp="1638389407073" timestamp="2789958" />
  <Command __id="2159" _type="SelectTextCommand" caretOffset="103" date="Wed Dec 01 15:56:37 EST 2021" end="146" start="103" starttimestamp="1638389407073" timestamp="2789958" />
  <Command __id="2161" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:56:37 EST 2021" starttimestamp="1638389407073" timestamp="2790266" />
  <Command __id="2162" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:56:37 EST 2021" starttimestamp="1638389407073" timestamp="2790266" />
  <Command __id="2164" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:56:37 EST 2021" starttimestamp="1638389407073" timestamp="2790431" />
  <Command __id="2165" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 15:56:37 EST 2021" starttimestamp="1638389407073" timestamp="2790431" />
  <Command __id="2167" _type="PauseCommand" date="Wed Dec 01 15:56:38 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="2791786">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1355]]></pause>
    <nextType><![CDATA[Save]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2166" _type="EclipseCommand" commandID="org.eclipse.ui.file.save" date="Wed Dec 01 15:56:38 EST 2021" starttimestamp="1638389407073" timestamp="2791786" />
  <Command __id="2168" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:39 EST 2021" starttimestamp="1638389407073" timestamp="2791930" />
  <Command __id="2169" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:39 EST 2021" starttimestamp="1638389407073" timestamp="2791933" />
  <Command __id="2170" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:39 EST 2021" starttimestamp="1638389407073" timestamp="2791933" />
  <Command __id="2171" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:39 EST 2021" starttimestamp="1638389407073" timestamp="2791934" />
  <Command __id="2172" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:39 EST 2021" starttimestamp="1638389407073" timestamp="2791934" />
  <Command __id="2173" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:39 EST 2021" starttimestamp="1638389407073" timestamp="2791935" />
  <Command __id="2174" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:39 EST 2021" starttimestamp="1638389407073" timestamp="2791935" />
  <Command __id="2175" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:39 EST 2021" starttimestamp="1638389407073" timestamp="2791937" />
  <Command __id="2176" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:39 EST 2021" starttimestamp="1638389407073" timestamp="2791937" />
  <Command __id="2177" _type="EclipseCommand" commandID="" date="Wed Dec 01 15:56:39 EST 2021" starttimestamp="1638389407073" timestamp="2791954" />
  <Command __id="2179" _type="PauseCommand" date="Wed Dec 01 15:56:40 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="2793148">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1194]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2180" _type="MoveCaretCommand" caretOffset="731" date="Wed Dec 01 15:56:40 EST 2021" docOffset="1167" starttimestamp="1638389407073" timestamp="2793241" />
  <Command __id="2182" _type="PauseCommand" date="Wed Dec 01 15:56:41 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="2794581">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1340]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2183" _type="MoveCaretCommand" caretOffset="576" date="Wed Dec 01 15:56:41 EST 2021" docOffset="857" starttimestamp="1638389407073" timestamp="2794663" />
  <Command __id="2185" _type="PauseCommand" date="Wed Dec 01 15:56:44 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="2797143">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2480]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2184" _type="ShellCommand" date="Wed Dec 01 15:56:44 EST 2021" starttimestamp="1638389407073" timestamp="2797143" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2187" _type="PauseCommand" date="Wed Dec 01 15:56:46 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="2798997">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1854]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2186" _type="ShellCommand" date="Wed Dec 01 15:56:46 EST 2021" starttimestamp="1638389407073" timestamp="2798997" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2189" _type="PauseCommand" date="Wed Dec 01 15:57:08 EST 2021" range="20s-30s" starttimestamp="1638389407073" timestamp="2821918">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[22921]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2190" _type="MoveCaretCommand" caretOffset="990" date="Wed Dec 01 15:57:09 EST 2021" docOffset="1120" starttimestamp="1638389407073" timestamp="2821989" />
  <Command __id="2192" _type="PauseCommand" date="Wed Dec 01 15:57:44 EST 2021" range="30s-1m" starttimestamp="1638389407073" timestamp="2856965">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[34976]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2193" _type="MoveCaretCommand" caretOffset="576" date="Wed Dec 01 15:57:44 EST 2021" docOffset="857" starttimestamp="1638389407073" timestamp="2857020" />
  <Command __id="2195" _type="MoveCaretCommand" caretOffset="731" date="Wed Dec 01 15:57:44 EST 2021" docOffset="1167" starttimestamp="1638389407073" timestamp="2857888" />
  <Command __id="2266" _type="PauseCommand" date="Wed Dec 01 16:02:35 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="3148187">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1395]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2265" _type="ShellCommand" date="Wed Dec 01 16:02:35 EST 2021" starttimestamp="1638389407073" timestamp="3148187" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2268" _type="PauseCommand" date="Wed Dec 01 16:02:42 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="3155031">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6844]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2273" _type="PauseCommand" date="Wed Dec 01 16:03:05 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="3178237">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1469]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2272" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:03:05 EST 2021" starttimestamp="1638389407073" timestamp="3178237" />
  <Command __id="2274" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:03:05 EST 2021" starttimestamp="1638389407073" timestamp="3178240" />
  <Command __id="2275" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:03:05 EST 2021" starttimestamp="1638389407073" timestamp="3178240" />
  <Command __id="2276" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:03:05 EST 2021" starttimestamp="1638389407073" timestamp="3178241" />
  <Command __id="2277" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:03:05 EST 2021" starttimestamp="1638389407073" timestamp="3178241" />
  <Command __id="2278" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:03:05 EST 2021" starttimestamp="1638389407073" timestamp="3178241" />
  <Command __id="2279" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:03:05 EST 2021" starttimestamp="1638389407073" timestamp="3178242" />
  <Command __id="2280" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:03:05 EST 2021" starttimestamp="1638389407073" timestamp="3178243" />
  <Command __id="2281" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:03:05 EST 2021" starttimestamp="1638389407073" timestamp="3178243" />
  <Command __id="2282" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:03:05 EST 2021" starttimestamp="1638389407073" timestamp="3178244" />
  <DocumentChange __id="1745" _type="Insert" date="Wed Dec 01 15:38:26 EST 2021" docASTNodeCount="123" docActiveCodeLength="683" docExpressionCount="90" docLength="683" length="1" offset="552" starttimestamp="1638389407073" timestamp="1699426">
    <text><![CDATA[.]]></text>
  </DocumentChange>
  <DocumentChange __id="1750" _type="Insert" date="Wed Dec 01 15:38:31 EST 2021" docASTNodeCount="125" docActiveCodeLength="692" docExpressionCount="92" docLength="692" length="9" offset="553" starttimestamp="1638389407073" timestamp="1704640">
    <text><![CDATA[isEmpty()]]></text>
  </DocumentChange>
  <Command __id="1964" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:41:20 EST 2021" docASTNodeCount="288" docActiveCodeLength="1838" docExpressionCount="211" docLength="1923" projectName="a5" starttimestamp="1638389407073" timestamp="1873912">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\evaluators\LambdaSExpressionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package evaluators;¶¶import main.lisp.evaluator.BasicExpressionEvaluator;¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.DecimalAtom;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶import main.lisp.parser.terms.TAtomicExpressionFactory;¶¶public class LambdaSExpressionEvaluator extends BasicExpressionEvaluator {¶	@Override¶	public SExpression eval(SExpression expr, Environment environment) {¶		// evaluates lambda first¶		if (!expr.getHead().isAtom()) {¶			SExpression eval = super.eval(expr.getHead(), environment);¶			if (eval instanceof Lambda) {¶				Environment childEnvironment = environment.newChild();¶				return evaluateLambda((Lambda) eval, childEnvironment, environment, expr.getTail());¶			}¶			SExpression isExpressionNested = expr.getHead().getHead();¶			if (!isExpressionNested.isAtom()) {¶				eval = super.eval(isExpressionNested, environment);¶				if (eval instanceof Lambda) {¶					Environment childEnvironment = environment.newChild();¶					return evaluateLambda((Lambda) eval, childEnvironment, environment, expr.getTail());¶				}¶			}¶		}¶			// when it is not a lambda¶			return super.eval(expr, environment);¶		}¶¶	// produces your lambda evaluation¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶	¶¶}¶¶")]]]></diff>
  </Command>
  <DocumentChange __id="1988" _type="Delete" date="Wed Dec 01 15:42:27 EST 2021" docASTNodeCount="287" docActiveCodeLength="1830" docExpressionCount="211" docLength="1915" endLine="36" length="8" offset="1418" startLine="36" starttimestamp="1638389407073" timestamp="1940870">
    <text><![CDATA[private ]]></text>
  </DocumentChange>
  <DocumentChange __id="2065" _type="Insert" date="Wed Dec 01 15:55:34 EST 2021" docASTNodeCount="290" docActiveCodeLength="1835" docExpressionCount="212" docLength="1920" length="5" offset="1418" repeat="5" starttimestamp="1638389407073" timestamp="2727865" timestamp2="2728272">
    <text><![CDATA[none ]]></text>
  </DocumentChange>
  <DocumentChange __id="2075" _type="Delete" date="Wed Dec 01 15:55:36 EST 2021" docASTNodeCount="287" docActiveCodeLength="1830" docExpressionCount="211" docLength="1915" endLine="36" length="5" offset="1418" repeat="5" startLine="36" starttimestamp="1638389407073" timestamp="2729403" timestamp2="2730388">
    <text><![CDATA[none ]]></text>
  </DocumentChange>
  <DocumentChange __id="2092" _type="Insert" date="Wed Dec 01 15:56:08 EST 2021" docASTNodeCount="288" docActiveCodeLength="1838" docExpressionCount="211" docLength="1923" length="8" offset="1418" repeat="8" starttimestamp="1638389407073" timestamp="2761449" timestamp2="2762179">
    <text><![CDATA[private ]]></text>
  </DocumentChange>
  <Command __id="2131" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:56:15 EST 2021" docASTNodeCount="125" docActiveCodeLength="692" docExpressionCount="92" docLength="692" projectName="a5" starttimestamp="1638389407073" timestamp="2768187">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\a5\VariableEval.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package a5;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶import main.lisp.scanner.tokens.Token;¶import main.lisp.parser.terms.IdentifierAtomFactory;¶¶public class VariableEval extends IdentifierAtom {¶¶	public VariableEval(String string) {¶		super(string);¶	}¶	public VariableEval(Token token) {¶		super(token);¶	}¶	¶	@Override¶	public SExpression eval(Environment arg0) {¶		IdentifierAtomFactory.setClass(this.getClass());¶		if (arg0.lookup(this).isEmpty() && arg0.getParent() != null) {¶			return arg0.getParent().lookup(this).get();¶		}¶		return arg0.lookup(this).get();¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2134" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:56:15 EST 2021" docASTNodeCount="288" docActiveCodeLength="1838" docExpressionCount="211" docLength="1923" projectName="a5" starttimestamp="1638389407073" timestamp="2768897">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\evaluators\LambdaSExpressionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package evaluators;¶¶import main.lisp.evaluator.BasicExpressionEvaluator;¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.DecimalAtom;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶import main.lisp.parser.terms.TAtomicExpressionFactory;¶¶public class LambdaSExpressionEvaluator extends BasicExpressionEvaluator {¶	@Override¶	public SExpression eval(SExpression expr, Environment environment) {¶		// evaluates lambda first¶		if (!expr.getHead().isAtom()) {¶			SExpression eval = super.eval(expr.getHead(), environment);¶			if (eval instanceof Lambda) {¶				Environment childEnvironment = environment.newChild();¶				return evaluateLambda((Lambda) eval, childEnvironment, environment, expr.getTail());¶			}¶			SExpression isExpressionNested = expr.getHead().getHead();¶			if (!isExpressionNested.isAtom()) {¶				eval = super.eval(isExpressionNested, environment);¶				if (eval instanceof Lambda) {¶					Environment childEnvironment = environment.newChild();¶					return evaluateLambda((Lambda) eval, childEnvironment, environment, expr.getTail());¶				}¶			}¶		}¶			// when it is not a lambda¶			return super.eval(expr, environment);¶		}¶¶	// produces your lambda evaluation¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶	¶¶}¶¶")]]]></diff>
  </Command>
  <Command __id="2136" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:56:18 EST 2021" docASTNodeCount="411" docActiveCodeLength="2609" docExpressionCount="312" docLength="2609" projectName="a5" starttimestamp="1638389407073" timestamp="2771297">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.Optional;¶¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Function;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.ExpressionFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶¶public class FuncallEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		SExpression current = arg0.getTail();¶		¶		SExpression lambdaOrFunction = null;¶		if (!current.getHead().isAtom()) {¶			lambdaOrFunction = current.getHead().eval(arg1);¶		}¶		if (lambdaOrFunction instanceof Lambda) {¶			Environment childEnvironment = arg1.newChild();¶			return evaluateLambda((Lambda) lambdaOrFunction, childEnvironment, arg1, current.getTail());¶		} else if(lambdaOrFunction instanceof Function) {¶			return evaluateLambda (((Function) lambdaOrFunction).getLambda(), ((Function) lambdaOrFunction).getEnvironment().newChild(), ((Function) lambdaOrFunction).getEnvironment(),current.getTail() );¶		} else {¶			final Optional<SExpression> isLambda = arg1.lookup((IdentifierAtom) current.getHead());¶			if (!isLambda.isEmpty() && isLambda.get() instanceof Lambda) {¶				Environment childEnvironment = arg1.newChild();¶				return evaluateLambda((Lambda) isLambda.get(), childEnvironment, arg1, current.getTail());¶			} else if (!isLambda.isEmpty() && isLambda.get() instanceof Function) {¶				¶				return evaluateLambda (((Function) isLambda.get()).getLambda(), ((Function) isLambda.get()).getEnvironment().newChild(), ((Function) isLambda.get()).getEnvironment(),current.getTail() ); ¶			}¶			¶			return ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		}¶	}¶	¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2139" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:56:21 EST 2021" docASTNodeCount="280" docActiveCodeLength="1531" docExpressionCount="200" docLength="1785" projectName="a5" starttimestamp="1638389407073" timestamp="2774119">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LambdaEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.ArrayList;¶import java.util.List;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class LambdaEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶//			if (arg0.getTail().isList()) {¶//				return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail().getHead());¶//			}¶			return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2145" _type="Delete" date="Wed Dec 01 15:56:24 EST 2021" docASTNodeCount="280" docActiveCodeLength="1525" docExpressionCount="200" docLength="1652" endLine="23" length="133" offset="666" repeat="2" startLine="20" starttimestamp="1638389407073" timestamp="2776994" timestamp2="2777447">
    <text><![CDATA[
//			if (arg0.getTail().isList()) {
//				return LambdaFactory.newInstance(argNames1, arg0.getTail().getTail().getHead());
//			}]]></text>
  </DocumentChange>
  <DocumentChange __id="2154" _type="Delete" date="Wed Dec 01 15:56:34 EST 2021" docASTNodeCount="268" docActiveCodeLength="1470" docExpressionCount="190" docLength="1597" endLine="4" length="55" offset="21" startLine="1" starttimestamp="1638389407073" timestamp="2787857">
    <text><![CDATA[
import java.util.ArrayList;
import java.util.List;
]]></text>
  </DocumentChange>
  <DocumentChange __id="2160" _type="Delete" date="Wed Dec 01 15:56:37 EST 2021" docASTNodeCount="258" docActiveCodeLength="1425" docExpressionCount="181" docLength="1552" endLine="4" length="45" offset="101" repeat="2" startLine="3" starttimestamp="1638389407073" timestamp="2790264" timestamp2="2790428">
    <text><![CDATA[
import main.lisp.evaluator.function.Lambda;]]></text>
  </DocumentChange>
  <Command __id="2178" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:56:40 EST 2021" docASTNodeCount="411" docActiveCodeLength="2609" docExpressionCount="312" docLength="2609" projectName="a5" starttimestamp="1638389407073" timestamp="2793148">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.Optional;¶¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Function;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.ExpressionFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶¶public class FuncallEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		SExpression current = arg0.getTail();¶		¶		SExpression lambdaOrFunction = null;¶		if (!current.getHead().isAtom()) {¶			lambdaOrFunction = current.getHead().eval(arg1);¶		}¶		if (lambdaOrFunction instanceof Lambda) {¶			Environment childEnvironment = arg1.newChild();¶			return evaluateLambda((Lambda) lambdaOrFunction, childEnvironment, arg1, current.getTail());¶		} else if(lambdaOrFunction instanceof Function) {¶			return evaluateLambda (((Function) lambdaOrFunction).getLambda(), ((Function) lambdaOrFunction).getEnvironment().newChild(), ((Function) lambdaOrFunction).getEnvironment(),current.getTail() );¶		} else {¶			final Optional<SExpression> isLambda = arg1.lookup((IdentifierAtom) current.getHead());¶			if (!isLambda.isEmpty() && isLambda.get() instanceof Lambda) {¶				Environment childEnvironment = arg1.newChild();¶				return evaluateLambda((Lambda) isLambda.get(), childEnvironment, arg1, current.getTail());¶			} else if (!isLambda.isEmpty() && isLambda.get() instanceof Function) {¶				¶				return evaluateLambda (((Function) isLambda.get()).getLambda(), ((Function) isLambda.get()).getEnvironment().newChild(), ((Function) isLambda.get()).getEnvironment(),current.getTail() ); ¶			}¶			¶			return ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		}¶	}¶	¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2181" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:56:41 EST 2021" docASTNodeCount="343" docActiveCodeLength="1927" docExpressionCount="249" docLength="2108" projectName="a5" starttimestamp="1638389407073" timestamp="2794581">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.FunctionFactory;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class FunctionEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead().getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶			if (arg0.getTail().isList()) {¶				SExpression body =arg0.getTail().getHead().getTail().getTail()"), Diff(DELETE,".getHead()"), Diff(EQUAL,";¶				Lambda lambda = LambdaFactory.newInstance(argNames1, body);¶				return FunctionFactory.newInstance(lambda, arg1);¶			}¶			Lambda lambda = LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶			return FunctionFactory.newInstance(lambda, arg1);¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);¶		return FunctionFactory.newInstance(lambda, arg1);¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶	¶¶}¶")]]]></diff>
    <snapshot><![CDATA[package functional;

import main.lisp.evaluator.Environment;
import main.lisp.evaluator.Evaluator;
import main.lisp.evaluator.function.FunctionFactory;
import main.lisp.evaluator.function.Lambda;
import main.lisp.evaluator.function.LambdaFactory;
import main.lisp.parser.terms.IdentifierAtom;
import main.lisp.parser.terms.SExpression;

public class FunctionEvaluator implements Evaluator{

	@Override
	public SExpression eval(SExpression arg0, Environment arg1) {
		IdentifierAtom[] argNames1 = new IdentifierAtom[1];
		SExpression current = arg0.getTail().getHead().getTail().getHead();
		int index = 0;
		if(current.isAtom()) {
			argNames1 = new IdentifierAtom[0];
			if (arg0.getTail().isList()) {
				SExpression body =arg0.getTail().getHead().getTail().getTail();
				Lambda lambda = LambdaFactory.newInstance(argNames1, body);
				return FunctionFactory.newInstance(lambda, arg1);
			}
			Lambda lambda = LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());
			return FunctionFactory.newInstance(lambda, arg1);
		}
		while(!current.getTail().isNIL()) {
			// expand size if you still need to add arg names
			argNames1 = expandArray(argNames1, index);
			argNames1[index] = (IdentifierAtom) current.getHead();
			current = current.getTail();
			index++;
		}
		//add last argument (the last argument has nil as its tail)
		if (!current.getHead().isNIL()) {
			argNames1 = expandArray(argNames1, index);
			argNames1[index] = (IdentifierAtom) current.getHead();
		}
		
		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());
	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);
		return FunctionFactory.newInstance(lambda, arg1);
	}
	
	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {
		if (index == array.length) {
			int size = array.length+ 1;
			IdentifierAtom[] newArray = new IdentifierAtom[size];
			for (int i = 0; i < array.length; i++) {
				newArray[i] = array[i];
			}
			//array = newArray;
			return newArray;
		}
		return array;
		
	}
	

}
]]></snapshot>
  </Command>
  <Command __id="2188" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:57:08 EST 2021" docASTNodeCount="185" docActiveCodeLength="1152" docExpressionCount="142" docLength="1152" projectName="a5" starttimestamp="1638389407073" timestamp="2821918">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LetEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class LetEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		Environment childEnvironment = arg1.newChild();¶		SExpression currentDeclare = arg0.getTail().getHead();¶		SExpression currentBody = arg0.getTail().getTail();¶		while (!currentDeclare.getTail().isNIL()) {¶			childEnvironment.assign((IdentifierAtom)currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead());¶			currentDeclare = currentDeclare.getTail();¶		}¶		if (!currentDeclare.isAtom()) {¶			childEnvironment.assign((IdentifierAtom) currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead().eval(arg1));¶		}¶		SExpression currentEval = currentBody.getHead().eval(childEnvironment);¶		while(!currentBody.getTail().isNIL()) {¶			currentEval = currentBody.getHead().eval(childEnvironment);¶			currentBody = currentBody.getTail();¶		}¶		return currentEval;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2191" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:57:44 EST 2021" docASTNodeCount="343" docActiveCodeLength="1927" docExpressionCount="249" docLength="2108" projectName="a5" starttimestamp="1638389407073" timestamp="2856965">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.FunctionFactory;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class FunctionEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead().getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶			if (arg0.getTail().isList()) {¶				SExpression body =arg0.getTail().getHead().getTail().getTail();¶				Lambda lambda = LambdaFactory.newInstance(argNames1, body);¶				return FunctionFactory.newInstance(lambda, arg1);¶			}¶			Lambda lambda = LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶			return FunctionFactory.newInstance(lambda, arg1);¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);¶		return FunctionFactory.newInstance(lambda, arg1);¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2194" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:57:44 EST 2021" docASTNodeCount="411" docActiveCodeLength="2609" docExpressionCount="312" docLength="2609" projectName="a5" starttimestamp="1638389407073" timestamp="2857834">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.Optional;¶¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Function;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.ExpressionFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶¶public class FuncallEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		SExpression current = arg0.getTail();¶		¶		SExpression lambdaOrFunction = null;¶		if (!current.getHead().isAtom()) {¶			lambdaOrFunction = current.getHead().eval(arg1);¶		}¶		if (lambdaOrFunction instanceof Lambda) {¶			Environment childEnvironment = arg1.newChild();¶			return evaluateLambda((Lambda) lambdaOrFunction, childEnvironment, arg1, current.getTail());¶		} else if(lambdaOrFunction instanceof Function) {¶			return evaluateLambda (((Function) lambdaOrFunction).getLambda(), ((Function) lambdaOrFunction).getEnvironment().newChild(), ((Function) lambdaOrFunction).getEnvironment(),current.getTail() );¶		} else {¶			final Optional<SExpression> isLambda = arg1.lookup((IdentifierAtom) current.getHead());¶			if (!isLambda.isEmpty() && isLambda.get() instanceof Lambda) {¶				Environment childEnvironment = arg1.newChild();¶				return evaluateLambda((Lambda) isLambda.get(), childEnvironment, arg1, current.getTail());¶			} else if (!isLambda.isEmpty() && isLambda.get() instanceof Function) {¶				¶				return evaluateLambda (((Function) isLambda.get()).getLambda(), ((Function) isLambda.get()).getEnvironment().newChild(), ((Function) isLambda.get()).getEnvironment(),current.getTail() ); ¶			}¶			¶			return ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		}¶	}¶	¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2196" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:57:57 EST 2021" docASTNodeCount="343" docActiveCodeLength="1927" docExpressionCount="249" docLength="2108" projectName="a5" starttimestamp="1638389407073" timestamp="2870260">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.FunctionFactory;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class FunctionEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead().getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶			if (arg0.getTail().isList()) {¶				SExpression body =arg0.getTail().getHead().getTail().getTail();¶				Lambda lambda = LambdaFactory.newInstance(argNames1, body);¶				return FunctionFactory.newInstance(lambda, arg1);¶			}¶			Lambda lambda = LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶			return FunctionFactory.newInstance(lambda, arg1);¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);¶		return FunctionFactory.newInstance(lambda, arg1);¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2199" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 15:57:58 EST 2021" docASTNodeCount="185" docActiveCodeLength="1152" docExpressionCount="142" docLength="1152" projectName="a5" starttimestamp="1638389407073" timestamp="2871031">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LetEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class LetEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		Environment childEnvironment = arg1.newChild();¶		SExpression currentDeclare = arg0.getTail().getHead();¶		SExpression currentBody = arg0.getTail().getTail();¶		while (!currentDeclare.getTail().isNIL()) {¶			childEnvironment.assign((IdentifierAtom)currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead());¶			currentDeclare = currentDeclare.getTail();¶		}¶		if (!currentDeclare.isAtom()) {¶			childEnvironment.assign((IdentifierAtom) currentDeclare.getHead().getHead(), currentDeclare.getHead().getTail().getHead().eval(arg1));¶		}¶		SExpression currentEval = currentBody.getHead().eval(childEnvironment);¶		while(!currentBody.getTail().isNIL()) {¶			currentEval = currentBody.getHead().eval(childEnvironment);¶			currentBody = currentBody.getTail();¶		}¶		return currentEval;¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2267" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:02:42 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="3155031">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2269" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:03:03 EST 2021" docASTNodeCount="233" docActiveCodeLength="1509" docExpressionCount="173" docLength="1683" projectName="a5" starttimestamp="1638389407073" timestamp="3176676">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\evaluators\StringFormats.java]]></filePath>
    <diff><![CDATA[null]]></diff>
    <snapshot><![CDATA[package evaluators;
import main.lisp.parser.terms.AbstractSExpression;
import main.lisp.parser.terms.BasicExpression;
import main.lisp.parser.terms.SExpression;
public class StringFormats extends BasicExpression{

	public StringFormats(SExpression head, SExpression tail) {
		super(head, tail);
	}
	@Override
	public String toString() {
		if(this.isNIL()) {
			return this.toStringAsSExpression();
		}
		return this.isList()? this.toStringAsList() : this.toStringAsSExpression();
	}
	@Override
	public String toStringAsSExpressionDeep() {
		return "(" + this.getHead().toStringAsSExpressionDeep() + " . " + this.getTail().toStringAsSExpressionDeep() + ")";
	}
	
	@Override
	public String toStringAsSExpression() {
		return "(" + this.getHead().toString() + " . " + this.getTail().toString() + ")";
	}
	@Override
	public String toStringAsListHelperPublic() {
		if (this.getTail().isNIL()) {
			return this.getHead().toString();
		}else {
			return this.getHead().toString() + " " + ((AbstractSExpression) this.getTail()).toStringAsListHelperPublic();
		}
		
	}
	@Override
	public String toStringAsList() {
			// does the same thing as toStringas list deep....need to change
			return "(" + this.toStringAsListHelperPublic() + ")";
	}

	@Override
	public boolean isList() {
		// if head is a non nil atom and tail is nil, is a list
		if(this.getHead().isAtom() && !(this.getHead().isNIL()) && this.getTail().isNIL()) {
			return true;
			// if the tail is an atom but not nil, it is not a list
		} else if (this.getTail().isAtom() && !(this.getTail().isNIL())) {
			return false;
		} else 
			return this.getTail().isList();
		}

}
]]></snapshot>
  </Command>
  <Command __id="2283" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:03:21 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="3194733">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2284" _type="PauseCommand" date="Wed Dec 01 16:03:21 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="3194733">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[16489]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2286" _type="MoveCaretCommand" caretOffset="0" date="Wed Dec 01 16:03:22 EST 2021" docOffset="0" starttimestamp="1638389407073" timestamp="3195010" />
  <Command __id="2288" _type="PauseCommand" date="Wed Dec 01 16:03:37 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="3209960">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[14950]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2290" _type="PauseCommand" date="Wed Dec 01 16:05:06 EST 2021" range="1m-2m" starttimestamp="1638389407073" timestamp="3299017">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[89057]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2289" _type="ShellCommand" date="Wed Dec 01 16:05:06 EST 2021" starttimestamp="1638389407073" timestamp="3299017" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2305" _type="PauseCommand" date="Wed Dec 01 16:05:54 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="3347731">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[4679]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2304" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:05:54 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="3347731" type="Run" />
  <Command __id="2306" _type="RunCommand" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:05:54 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="3347731" type="Run" />
  <Command __id="2308" _type="PauseCommand" date="Wed Dec 01 16:05:57 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="3350170">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2439]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2307" _type="ShellCommand" date="Wed Dec 01 16:05:57 EST 2021" starttimestamp="1638389407073" timestamp="3350170" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2310" _type="PauseCommand" date="Wed Dec 01 16:06:02 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="3355704">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[5534]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="2309" _type="ConsoleOutput" date="Wed Dec 01 16:06:02 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="3355704" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):15
Test execution time (ms):9
Test execution time (ms):11
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"4"), Diff(INSERT,"15"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"6¶F21A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0¶"), Diff(INSERT,"9"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"3"), Diff(INSERT,"11"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2311" _type="ExceptionCommand" date="Wed Dec 01 16:06:02 EST 2021" starttimestamp="1638389407073" timestamp="3355808" type="Exception">
    <exceptionString><![CDATA[java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at expression.CondEvaluator.eval(CondEvaluator.java:36)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at logical.AndEvaluator.eval(AndEvaluator.java:24)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at logical.AndEvaluator.eval(AndEvaluator.java:29)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at logical.OrEvaluator.eval(OrEvaluator.java:15)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at expression.LoadEvaluator.eval(LoadEvaluator.java:31)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2312" _type="ShellCommand" date="Wed Dec 01 16:06:03 EST 2021" starttimestamp="1638389407073" timestamp="3356804" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2314" _type="PauseCommand" date="Wed Dec 01 16:06:05 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="3358438">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1634]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2316" _type="PauseCommand" date="Wed Dec 01 16:06:16 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="3369842">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[11404]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2315" _type="ShellCommand" date="Wed Dec 01 16:06:16 EST 2021" starttimestamp="1638389407073" timestamp="3369842" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2318" _type="PauseCommand" date="Wed Dec 01 16:10:07 EST 2021" range="2m-5m" starttimestamp="1638389407073" timestamp="3600083">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[230241]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[BalloonCommand]]></next>
  </Command>
  <Command __id="2317" _type="BalloonCommand" date="Wed Dec 01 16:10:07 EST 2021" message="*******************************************
Worked 37 minutes(fixed)/54 minutes(context based) from
Wed Dec 01 15:10:07 EST 2021 to Wed Dec 01 16:06:16 EST 2021
Edited 1 Projects: 
	a5
Edited 4 Files: 
	C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\evaluators\LambdaSExpressionEvaluator.java
	C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java
	C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\LambdaEvaluator.java
	C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\a5\VariableEval.java
Number of insert: 262
Number of delete: 362
" starttimestamp="1638389407073" timestamp="3600083">
    <fineGrainedWorkTime><![CDATA[54]]></fineGrainedWorkTime>
    <insert><![CDATA[262]]></insert>
    <startTime><![CDATA[1638389407243]]></startTime>
    <endTime><![CDATA[1638392776915]]></endTime>
    <workTime><![CDATA[37]]></workTime>
    <delete><![CDATA[362]]></delete>
  </Command>
  <Command __id="2322" _type="PauseCommand" date="Wed Dec 01 16:11:25 EST 2021" range="30s-1m" starttimestamp="1638389407073" timestamp="3678452">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[49579]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="2321" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:11:25 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="3678452" type="Run" />
  <Command __id="2324" _type="PauseCommand" date="Wed Dec 01 16:11:34 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="3687165">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[8713]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="2323" _type="ConsoleInput" date="Wed Dec 01 16:11:34 EST 2021" starttimestamp="1638389407073" timestamp="3687165" type="Exception">
    <outputString><![CDATA[(setq f (list 1 2))
]]></outputString>
  </Command>
  <Command __id="2325" _type="ConsoleOutput" date="Wed Dec 01 16:11:34 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="3687268" type="ConsoleOutput">
    <outputString><![CDATA[(1 2)
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):15¶Test execution time (ms):9¶Test execution time (ms):11"), Diff(INSERT,"(1 2)"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2327" _type="PauseCommand" date="Wed Dec 01 16:11:41 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="3694075">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[6807]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="2326" _type="ConsoleInput" date="Wed Dec 01 16:11:41 EST 2021" starttimestamp="1638389407073" timestamp="3694075" type="Exception">
    <outputString><![CDATA[(atom (car f))
]]></outputString>
  </Command>
  <Command __id="2328" _type="ConsoleOutput" date="Wed Dec 01 16:11:41 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="3694178" type="ConsoleOutput">
    <outputString><![CDATA[T
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"(1 2)"), Diff(INSERT,"T"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2330" _type="PauseCommand" date="Wed Dec 01 16:11:48 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="3701804">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[7626]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="2329" _type="ConsoleInput" date="Wed Dec 01 16:11:48 EST 2021" starttimestamp="1638389407073" timestamp="3701804" type="Exception">
    <outputString><![CDATA[(cond (car f))
]]></outputString>
  </Command>
  <Command __id="2331" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:11:48 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="3701850" type="Debug" />
  <Command __id="2332" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:11:48 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="3701851" type="Run" />
  <Command __id="2333" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:11:48 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="3701851" type="Run" />
  <Command __id="2334" _type="ExceptionCommand" date="Wed Dec 01 16:11:48 EST 2021" starttimestamp="1638389407073" timestamp="3701859" type="Exception">
    <exceptionString><![CDATA[Exception in thread "main" java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:24)
	at expression.CondEvaluator.eval(CondEvaluator.java:36)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at a5.RunLisp.main(RunLisp.java:21)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2339" _type="PauseCommand" date="Wed Dec 01 16:12:00 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="3713773">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1575]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2338" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:12:00 EST 2021" starttimestamp="1638389407073" timestamp="3713773" />
  <Command __id="2340" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:12:00 EST 2021" starttimestamp="1638389407073" timestamp="3713776" />
  <Command __id="2341" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:12:00 EST 2021" starttimestamp="1638389407073" timestamp="3713777" />
  <Command __id="2342" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:12:00 EST 2021" starttimestamp="1638389407073" timestamp="3713777" />
  <Command __id="2343" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:12:00 EST 2021" starttimestamp="1638389407073" timestamp="3713777" />
  <Command __id="2344" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:12:00 EST 2021" starttimestamp="1638389407073" timestamp="3713778" />
  <Command __id="2345" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:12:00 EST 2021" starttimestamp="1638389407073" timestamp="3713778" />
  <Command __id="2346" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:12:00 EST 2021" starttimestamp="1638389407073" timestamp="3713780" />
  <Command __id="2347" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:12:00 EST 2021" starttimestamp="1638389407073" timestamp="3713780" />
  <Command __id="2348" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:12:00 EST 2021" starttimestamp="1638389407073" timestamp="3713781" />
  <Command __id="2350" _type="PauseCommand" date="Wed Dec 01 16:12:22 EST 2021" range="20s-30s" starttimestamp="1638389407073" timestamp="3734936">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[21155]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2349" _type="ShellCommand" date="Wed Dec 01 16:12:22 EST 2021" starttimestamp="1638389407073" timestamp="3734936" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2352" _type="PauseCommand" date="Wed Dec 01 16:12:23 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="3736264">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1328]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2351" _type="ShellCommand" date="Wed Dec 01 16:12:23 EST 2021" starttimestamp="1638389407073" timestamp="3736264" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2355" _type="MoveCaretCommand" caretOffset="576" date="Wed Dec 01 16:12:24 EST 2021" docOffset="857" starttimestamp="1638389407073" timestamp="3737823" />
  <Command __id="2358" _type="PauseCommand" date="Wed Dec 01 16:12:42 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="3755547">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[16995]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2357" _type="ShellCommand" date="Wed Dec 01 16:12:42 EST 2021" starttimestamp="1638389407073" timestamp="3755547" type="ECLIPSE_MINIMIZED" />
  <Command __id="2359" _type="ShellCommand" date="Wed Dec 01 16:12:42 EST 2021" starttimestamp="1638389407073" timestamp="3755560" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2361" _type="PauseCommand" date="Wed Dec 01 16:16:44 EST 2021" range="2m-5m" starttimestamp="1638389407073" timestamp="3997069">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[241509]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2360" _type="ShellCommand" date="Wed Dec 01 16:16:44 EST 2021" starttimestamp="1638389407073" timestamp="3997069" type="ECLIPSE_MAXIMIZED" />
  <Command __id="2362" _type="ShellCommand" date="Wed Dec 01 16:16:44 EST 2021" starttimestamp="1638389407073" timestamp="3997090" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2363" _type="ShellCommand" date="Wed Dec 01 16:16:44 EST 2021" starttimestamp="1638389407073" timestamp="3997126" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2365" _type="PauseCommand" date="Wed Dec 01 16:16:46 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="3998999">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1873]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2364" _type="ShellCommand" date="Wed Dec 01 16:16:46 EST 2021" starttimestamp="1638389407073" timestamp="3998999" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2366" _type="ShellCommand" date="Wed Dec 01 16:16:46 EST 2021" starttimestamp="1638389407073" timestamp="3999114" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2368" _type="PauseCommand" date="Wed Dec 01 16:17:18 EST 2021" range="30s-1m" starttimestamp="1638389407073" timestamp="4031184">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[32070]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2369" _type="MoveCaretCommand" caretOffset="0" date="Wed Dec 01 16:17:18 EST 2021" docOffset="0" starttimestamp="1638389407073" timestamp="4031227" />
  <Command __id="2384" _type="PauseCommand" date="Wed Dec 01 16:17:56 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4068968">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3481]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2383" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:17:56 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4068968" type="Run" />
  <Command __id="2385" _type="RunCommand" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:17:56 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4068969" type="Run" />
  <Command __id="2387" _type="PauseCommand" date="Wed Dec 01 16:17:58 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4071410">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2441]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2386" _type="ShellCommand" date="Wed Dec 01 16:17:58 EST 2021" starttimestamp="1638389407073" timestamp="4071410" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2394" _type="PauseCommand" date="Wed Dec 01 16:18:04 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="4077063">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1729]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2393" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:18:04 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4077063" type="Run" />
  <Command __id="2395" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:18:04 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4077063" type="Run" />
  <Command __id="2397" _type="PauseCommand" date="Wed Dec 01 16:18:11 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="4084405">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[7342]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="2396" _type="ConsoleInput" date="Wed Dec 01 16:18:11 EST 2021" starttimestamp="1638389407073" timestamp="4084405" type="Exception">
    <outputString><![CDATA[(load "test2.lisp")
]]></outputString>
  </Command>
  <Command __id="2398" _type="ConsoleOutput" date="Wed Dec 01 16:18:11 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="4084518" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
29
42
42
42
42
LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X) (OR (AND (ATOM (CAR X)) (AND (ATOM (CAR X)) (CDR X))) (FUNCALL ISLIST (CDR X)))
(NIL)
(NIL)
T
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"29¶42¶42¶29¶42¶42¶42¶42¶LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X) (OR (AND (ATOM (CAR X)) (AND (ATOM (CAR X)) (CDR X))) (FUNCALL ISLIST (CDR X)))¶(NIL)¶(NIL)¶"), Diff(EQUAL,"T¶")]]]></diff>
  </Command>
  <Command __id="2400" _type="PauseCommand" date="Wed Dec 01 16:18:23 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="4096431">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[11913]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2401" _type="MoveCaretCommand" caretOffset="0" date="Wed Dec 01 16:18:23 EST 2021" docOffset="0" starttimestamp="1638389407073" timestamp="4096471" />
  <Command __id="2416" _type="PauseCommand" date="Wed Dec 01 16:18:35 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4108555">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2249]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="2415" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:18:35 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4108555" type="Run" />
  <Command __id="2418" _type="PauseCommand" date="Wed Dec 01 16:18:41 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="4114689">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[6134]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="2417" _type="ConsoleInput" date="Wed Dec 01 16:18:41 EST 2021" starttimestamp="1638389407073" timestamp="4114689" type="Exception">
    <outputString><![CDATA[(load "test2.lisp")
]]></outputString>
  </Command>
  <Command __id="2419" _type="ConsoleOutput" date="Wed Dec 01 16:18:41 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="4114791" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
29
42
42
42
42
LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X) (OR (AND (ATOM (CAR X)) (AND (ATOM (CAR X)) (NOT (CDR X)))) (FUNCALL ISLIST (CDR X)))
(NIL)
(NIL)
T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"29¶42¶42¶29¶42¶42¶42¶42¶LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X) (OR (AND (ATOM (CAR X)) (AND (ATOM (CAR X))"), Diff(INSERT," (NOT"), Diff(EQUAL," (CDR X)))"), Diff(INSERT,")"), Diff(EQUAL," (FUNCALL ISLIST (CDR X)))¶(NIL)¶(NIL)¶T¶")]]]></diff>
  </Command>
  <Command __id="2434" _type="PauseCommand" date="Wed Dec 01 16:19:05 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="4138293">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1563]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="2433" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:19:05 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4138293" type="Run" />
  <Command __id="2442" _type="PauseCommand" date="Wed Dec 01 16:19:14 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4147758">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2232]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2441" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:19:14 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4147758" type="Run" />
  <Command __id="2443" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:19:14 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4147758" type="Run" />
  <Command __id="2445" _type="PauseCommand" date="Wed Dec 01 16:19:21 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="4154615">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[6857]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="2444" _type="ConsoleInput" date="Wed Dec 01 16:19:21 EST 2021" starttimestamp="1638389407073" timestamp="4154615" type="Exception">
    <outputString><![CDATA[(load "test2.lisp")
]]></outputString>
  </Command>
  <Command __id="2446" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:19:21 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="4154693" type="Debug" />
  <Command __id="2447" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:19:21 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4154693" type="Run" />
  <Command __id="2448" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:19:21 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4154693" type="Run" />
  <Command __id="2449" _type="ExceptionCommand" date="Wed Dec 01 16:19:21 EST 2021" starttimestamp="1638389407073" timestamp="4154695" type="Exception">
    <exceptionString><![CDATA[29
42
42
29
42
42
42
42
LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X) (COND (AND (ATOM (CAR X)) (AND (ATOM (CAR X)) (NOT (CDR X)))) (FUNCALL ISLIST (CDR X)))
Exception in thread "main" java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at expression.CondEvaluator.eval(CondEvaluator.java:36)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at expression.LoadEvaluator.eval(LoadEvaluator.java:31)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at a5.RunLisp.main(RunLisp.java:21)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2451" _type="PauseCommand" date="Wed Dec 01 16:20:02 EST 2021" range="30s-1m" starttimestamp="1638389407073" timestamp="4195739">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[41044]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2453" _type="PauseCommand" date="Wed Dec 01 16:20:06 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4199073">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[3334]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2452" _type="ShellCommand" date="Wed Dec 01 16:20:06 EST 2021" starttimestamp="1638389407073" timestamp="4199073" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2468" _type="PauseCommand" date="Wed Dec 01 16:20:28 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="4221220">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[8218]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2467" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:20:28 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4221220" type="Run" />
  <Command __id="2469" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:20:28 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4221221" type="Run" />
  <Command __id="2471" _type="PauseCommand" date="Wed Dec 01 16:20:30 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="4223134">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1913]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="2470" _type="ConsoleOutput" date="Wed Dec 01 16:20:30 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="4223134" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
29
42
42
42
42
LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"29¶42¶42¶29¶42¶42¶42¶42¶LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶"), Diff(DELETE,"LAMBDA (X) (OR (AND (ATOM (CAR X)) (AND (ATOM (CAR X)) (NOT (CDR X)))) (FUNCALL ISLIST (CDR X)))¶(NIL)¶(NIL)¶"), Diff(EQUAL,"T¶")]]]></diff>
  </Command>
  <Command __id="2486" _type="PauseCommand" date="Wed Dec 01 16:20:54 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4246983">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2558]]></pause>
    <nextType><![CDATA[Debug]]></nextType>
    <next><![CDATA[RunCommand]]></next>
  </Command>
  <Command __id="2485" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:20:54 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4246983" type="Run" />
  <Command __id="2488" _type="PauseCommand" date="Wed Dec 01 16:20:56 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4249490">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2507]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="2487" _type="ConsoleOutput" date="Wed Dec 01 16:20:56 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="4249490" type="ConsoleOutput">
    <outputString><![CDATA[29
42
42
29
42
42
42
42
LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
T
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"29¶42¶42¶29¶42¶42¶42¶42¶LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶T¶")]]]></diff>
  </Command>
  <Command __id="2505" _type="PauseCommand" date="Wed Dec 01 16:21:13 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="4266313">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1968]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2504" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:21:13 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="4266313" type="Debug" />
  <Command __id="2506" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:21:13 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4266313" type="Run" />
  <Command __id="2507" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:21:13 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4266313" type="Run" />
  <Command __id="2508" _type="ExceptionCommand" date="Wed Dec 01 16:21:13 EST 2021" starttimestamp="1638389407073" timestamp="4266315" type="Exception">
    <exceptionString><![CDATA[29
42
42
29
42
42
42
42
LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X) (COND (AND (ATOM (CAR X)) (AND (ATOM (CAR X)) (NOT (CDR X))) (FUNCALL ISLIST (CDR X))))
Exception in thread "main" java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at expression.CondEvaluator.eval(CondEvaluator.java:36)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at expression.LoadEvaluator.eval(LoadEvaluator.java:31)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at a5.RunLisp.main(RunLisp.java:21)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2510" _type="PauseCommand" date="Wed Dec 01 16:21:18 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="4271366">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[5051]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2539" _type="PauseCommand" date="Wed Dec 01 16:21:51 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="4304180">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[1568]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2538" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:21:51 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="4304180" type="Debug" />
  <Command __id="2540" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:21:51 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4304180" type="Run" />
  <Command __id="2541" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:21:51 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4304180" type="Run" />
  <Command __id="2542" _type="ExceptionCommand" date="Wed Dec 01 16:21:51 EST 2021" starttimestamp="1638389407073" timestamp="4304182" type="Exception">
    <exceptionString><![CDATA[29
42
42
29
42
42
42
42
LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X) (COND (AND (ATOM (CAR X)) (AND (ATOM (CAR X)) (NOT (CDR X)))) (FUNCALL ISLIST (CDR X)))
Exception in thread "main" java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at expression.CondEvaluator.eval(CondEvaluator.java:36)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at expression.LoadEvaluator.eval(LoadEvaluator.java:31)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at a5.RunLisp.main(RunLisp.java:21)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2547" _type="PauseCommand" date="Wed Dec 01 16:22:18 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="4330991">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[12261]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2546" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:22:18 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4330991" type="Run" />
  <Command __id="2548" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:22:18 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4330991" type="Run" />
  <Command __id="2552" _type="PauseCommand" date="Wed Dec 01 16:22:20 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="4333377">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[1155]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2551" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:22:20 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="4333377" type="Debug" />
  <Command __id="2553" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:22:20 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4333377" type="Run" />
  <Command __id="2554" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:22:20 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4333377" type="Run" />
  <Command __id="2555" _type="ExceptionCommand" date="Wed Dec 01 16:22:20 EST 2021" starttimestamp="1638389407073" timestamp="4333379" type="Exception">
    <exceptionString><![CDATA[29
42
42
29
42
42
42
42
LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X) (COND (AND (ATOM (CAR X)) (AND (ATOM (CAR X)) (NOT (CDR X)))) (FUNCALL ISLIST (CDR X)))
Exception in thread "main" java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at expression.CondEvaluator.eval(CondEvaluator.java:36)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at expression.LoadEvaluator.eval(LoadEvaluator.java:31)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at a5.RunLisp.main(RunLisp.java:21)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2557" _type="PauseCommand" date="Wed Dec 01 16:22:25 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4337950">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[4571]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2559" _type="PauseCommand" date="Wed Dec 01 16:22:27 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4340191">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[2241]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2560" _type="MoveCaretCommand" caretOffset="731" date="Wed Dec 01 16:22:27 EST 2021" docOffset="1167" starttimestamp="1638389407073" timestamp="4340286" />
  <Command __id="2565" _type="PauseCommand" date="Wed Dec 01 16:22:34 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4347449">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2378]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2564" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:22:34 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4347449" type="Run" />
  <Command __id="2566" _type="RunCommand" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:22:34 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4347449" type="Run" />
  <Command __id="2567" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:22:34 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="4347657" type="Run" />
  <Command __id="2568" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:22:34 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="4347691" type="Run" />
  <Command __id="2569" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:22:34 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="4347841" type="Run" />
  <Command __id="2570" _type="ConsoleOutput" date="Wed Dec 01 16:22:35 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="4347978" type="ConsoleOutput">
    <outputString><![CDATA[JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55.
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"29¶42¶42¶29¶42¶42¶42¶42¶LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))¶5¶LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))¶#<FUNCTION :LAMBDA (Y) (* X Y)>¶T"), Diff(INSERT,"JRE Oracle Corporation/11.0.12 is not supported, advanced source lookup disabled: Unsupported class file major version 55."), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2611" _type="PauseCommand" date="Wed Dec 01 16:27:28 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4641673">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3283]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2610" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:27:28 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="4641673" type="Run" />
  <Command __id="2613" _type="PauseCommand" date="Wed Dec 01 16:27:45 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="4658053">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[16380]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="2614" _type="MoveCaretCommand" caretOffset="1406" date="Wed Dec 01 16:27:45 EST 2021" docOffset="1687" starttimestamp="1638389407073" timestamp="4658114" />
  <Command __id="2617" _type="PauseCommand" date="Wed Dec 01 16:29:26 EST 2021" range="1m-2m" starttimestamp="1638389407073" timestamp="4759695">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[101039]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2616" _type="ShellCommand" date="Wed Dec 01 16:29:26 EST 2021" starttimestamp="1638389407073" timestamp="4759695" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2657" _type="PauseCommand" date="Wed Dec 01 16:31:41 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="4894418">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[6900]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2656" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:31:41 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="4894418" type="Run" />
  <Command __id="2658" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:31:42 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="4894941" type="Run" />
  <Command __id="2660" _type="PauseCommand" date="Wed Dec 01 16:31:55 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="4908556">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[13615]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2659" _type="SelectTextCommand" caretOffset="1422" date="Wed Dec 01 16:31:55 EST 2021" end="2140" start="1422" starttimestamp="1638389407073" timestamp="4908556" />
  <Command __id="2662" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:31:56 EST 2021" starttimestamp="1638389407073" timestamp="4909164" />
  <Command __id="2664" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:31:57 EST 2021" starttimestamp="1638389407073" timestamp="4910041" />
  <Command __id="2666" _type="PauseCommand" date="Wed Dec 01 16:31:58 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="4911358">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1317]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2665" _type="MoveCaretCommand" caretOffset="1422" date="Wed Dec 01 16:31:58 EST 2021" docOffset="1602" starttimestamp="1638389407073" timestamp="4911358" />
  <Command __id="2668" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:31:58 EST 2021" starttimestamp="1638389407073" timestamp="4911742" />
  <Command __id="2285" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:03:21 EST 2021" docASTNodeCount="233" docActiveCodeLength="1509" docExpressionCount="173" docLength="1683" projectName="a5" starttimestamp="1638389407073" timestamp="3194804">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\evaluators\StringFormats.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package evaluators;¶import main.lisp.parser.terms.AbstractSExpression;¶import main.lisp.parser.terms.BasicExpression;¶import main.lisp.parser.terms.SExpression;¶public class StringFormats extends BasicExpression{¶¶	public StringFormats(SExpression head, SExpression tail) {¶		super(head, tail);¶	}¶	@Override¶	public String toString() {¶		if(this.isNIL()) {¶			return this.toStringAsSExpression();¶		}¶		return this.isList()? this.toStringAsList() : this.toStringAsSExpression();¶	}¶	@Override¶	public String toStringAsSExpressionDeep() {¶		return "(" + this.getHead().toStringAsSExpressionDeep() + " . " + this.getTail().toStringAsSExpressionDeep() + ")";¶	}¶	¶	@Override¶	public String toStringAsSExpression() {¶		return "(" + this.getHead().toString() + " . " + this.getTail().toString() + ")";¶	}¶	@Override¶	public String toStringAsListHelperPublic() {¶		if (this.getTail().isNIL()) {¶			return this.getHead().toString();¶		}else {¶			return this.getHead().toString() + " " + ((AbstractSExpression) this.getTail()).toStringAsListHelperPublic();¶		}¶		¶	}¶	@Override¶	public String toStringAsList() {¶			// does the same thing as toStringas list deep....need to change¶			return "(" + this.toStringAsListHelperPublic() + ")";¶	}¶¶	@Override¶	public boolean isList() {¶		// if head is a non nil atom and tail is nil, is a list¶		if(this.getHead().isAtom() && !(this.getHead().isNIL()) && this.getTail().isNIL()) {¶			return true;¶			// if the tail is an atom but not nil, it is not a list¶		} else if (this.getTail().isAtom() && !(this.getTail().isNIL())) {¶			return false;¶		} else ¶			return this.getTail().isList();¶		}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2287" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:03:37 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="3209960">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2313" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:06:05 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="3358438">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2335" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:11:59 EST 2021" docASTNodeCount="157" docActiveCodeLength="1024" docExpressionCount="121" docLength="2333" projectName="a5" starttimestamp="1638389407073" timestamp="3712087">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\expression\CondEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package expression;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶import main.lisp.parser.terms.TAtom;¶¶public class CondEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶//		if (arg0.isAtom()) {¶//			return arg0.eval(arg1);¶//		}¶//		SExpression condition = arg0.getTail();¶//		if(condition.isNIL()) {¶//				return NilAtomicExpressionFactory.newInstance();¶//		}¶//		return condHelper(condition, arg1);¶//		if (!condition.getHead().isAtom() &&!condition.getHead().getHead().isNIL()) {¶//			if (condition.getHead().getTail().isNIL()) {¶//				return condition.getHead().getHead().eval(arg1);¶//			} else {¶//				return condition.getHead().getTail().getHead().eval(arg1);¶//			}¶//		}else if (condition.getHead().isAtom()) {¶//			return condition.getHead().eval(arg1);¶//		}else {¶//			return eval(condition, arg1);¶//		}¶		SExpression condition = arg0.getTail();¶		if(condition.isNIL()) {¶				return NilAtomicExpressionFactory.newInstance();¶		}¶		if (!condition.getHead().isAtom() &&!condition.getHead().getHead().eval(arg1).isNIL()) {¶			if (condition.getHead().getTail().isNIL()) {¶				return condition.getHead().getHead().eval(arg1);¶			} else {¶				return condition.getHead().getTail().getHead().eval(arg1);¶			}¶		}else if (condition.getHead().isAtom()) {¶			return condition.getHead().eval(arg1);¶		}else {¶			return eval(condition, arg1);¶		}¶	¶		¶		¶	}¶//	private SExpression condHelper(SExpression current, Environment arg1) {¶//		if (current.getHead().isList()) {¶//			if (current.getHead().getTail().isNIL()) {¶//				return current.getHead().getHead().eval(arg1);¶//			} else {¶//				return current.getHead().getTail().getHead().eval(arg1);¶//			}¶			// make list helper maybe?¶//		}¶//		if(!current.getHead().eval(arg1).isNIL()) {¶//			if (current.getHead() instanceof TAtom && !current.getTail().isNIL()) {¶//				return condHelper(current.getTail(), arg1);¶//			}¶//			return current.getHead().eval(arg1);¶//		} else if (current.getTail().isNIL()) {¶//			return current.getTail();¶//		} else {¶//			return condHelper(current.getTail(), arg1);¶//		}¶			¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="2353" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:12:24 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="3737091">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2354" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:12:24 EST 2021" docASTNodeCount="343" docActiveCodeLength="1927" docExpressionCount="249" docLength="2108" projectName="a5" starttimestamp="1638389407073" timestamp="3737737">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.FunctionFactory;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class FunctionEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead().getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶			if (arg0.getTail().isList()) {¶				SExpression body =arg0.getTail().getHead().getTail().getTail();¶				Lambda lambda = LambdaFactory.newInstance(argNames1, body);¶				return FunctionFactory.newInstance(lambda, arg1);¶			}¶			Lambda lambda = LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶			return FunctionFactory.newInstance(lambda, arg1);¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);¶		return FunctionFactory.newInstance(lambda, arg1);¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2356" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:12:25 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="3738552">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2367" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:17:18 EST 2021" docASTNodeCount="233" docActiveCodeLength="1509" docExpressionCount="173" docLength="1683" projectName="a5" starttimestamp="1638389407073" timestamp="4031184">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\evaluators\StringFormats.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package evaluators;¶import main.lisp.parser.terms.AbstractSExpression;¶import main.lisp.parser.terms.BasicExpression;¶import main.lisp.parser.terms.SExpression;¶public class StringFormats extends BasicExpression{¶¶	public StringFormats(SExpression head, SExpression tail) {¶		super(head, tail);¶	}¶	@Override¶	public String toString() {¶		if(this.isNIL()) {¶			return this.toStringAsSExpression();¶		}¶		return this.isList()? this.toStringAsList() : this.toStringAsSExpression();¶	}¶	@Override¶	public String toStringAsSExpressionDeep() {¶		return "(" + this.getHead().toStringAsSExpressionDeep() + " . " + this.getTail().toStringAsSExpressionDeep() + ")";¶	}¶	¶	@Override¶	public String toStringAsSExpression() {¶		return "(" + this.getHead().toString() + " . " + this.getTail().toString() + ")";¶	}¶	@Override¶	public String toStringAsListHelperPublic() {¶		if (this.getTail().isNIL()) {¶			return this.getHead().toString();¶		}else {¶			return this.getHead().toString() + " " + ((AbstractSExpression) this.getTail()).toStringAsListHelperPublic();¶		}¶		¶	}¶	@Override¶	public String toStringAsList() {¶			// does the same thing as toStringas list deep....need to change¶			return "(" + this.toStringAsListHelperPublic() + ")";¶	}¶¶	@Override¶	public boolean isList() {¶		// if head is a non nil atom and tail is nil, is a list¶		if(this.getHead().isAtom() && !(this.getHead().isNIL()) && this.getTail().isNIL()) {¶			return true;¶			// if the tail is an atom but not nil, it is not a list¶		} else if (this.getTail().isAtom() && !(this.getTail().isNIL())) {¶			return false;¶		} else ¶			return this.getTail().isList();¶		}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2370" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:17:23 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="4036416">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2399" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:18:23 EST 2021" docASTNodeCount="233" docActiveCodeLength="1509" docExpressionCount="173" docLength="1683" projectName="a5" starttimestamp="1638389407073" timestamp="4096431">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\evaluators\StringFormats.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package evaluators;¶import main.lisp.parser.terms.AbstractSExpression;¶import main.lisp.parser.terms.BasicExpression;¶import main.lisp.parser.terms.SExpression;¶public class StringFormats extends BasicExpression{¶¶	public StringFormats(SExpression head, SExpression tail) {¶		super(head, tail);¶	}¶	@Override¶	public String toString() {¶		if(this.isNIL()) {¶			return this.toStringAsSExpression();¶		}¶		return this.isList()? this.toStringAsList() : this.toStringAsSExpression();¶	}¶	@Override¶	public String toStringAsSExpressionDeep() {¶		return "(" + this.getHead().toStringAsSExpressionDeep() + " . " + this.getTail().toStringAsSExpressionDeep() + ")";¶	}¶	¶	@Override¶	public String toStringAsSExpression() {¶		return "(" + this.getHead().toString() + " . " + this.getTail().toString() + ")";¶	}¶	@Override¶	public String toStringAsListHelperPublic() {¶		if (this.getTail().isNIL()) {¶			return this.getHead().toString();¶		}else {¶			return this.getHead().toString() + " " + ((AbstractSExpression) this.getTail()).toStringAsListHelperPublic();¶		}¶		¶	}¶	@Override¶	public String toStringAsList() {¶			// does the same thing as toStringas list deep....need to change¶			return "(" + this.toStringAsListHelperPublic() + ")";¶	}¶¶	@Override¶	public boolean isList() {¶		// if head is a non nil atom and tail is nil, is a list¶		if(this.getHead().isAtom() && !(this.getHead().isNIL()) && this.getTail().isNIL()) {¶			return true;¶			// if the tail is an atom but not nil, it is not a list¶		} else if (this.getTail().isAtom() && !(this.getTail().isNIL())) {¶			return false;¶		} else ¶			return this.getTail().isList();¶		}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2402" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:18:26 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="4099688">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2420" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:19:02 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="4135293">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2450" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:20:02 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="4195739">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2472" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:20:41 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="4234913">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2489" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:21:02 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="4254932">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2509" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:21:18 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="4271366">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2511" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:21:30 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="4283872">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2543" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:22:05 EST 2021" docASTNodeCount="157" docActiveCodeLength="1024" docExpressionCount="121" docLength="2333" projectName="a5" starttimestamp="1638389407073" timestamp="4318625">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\expression\CondEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package expression;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶import main.lisp.parser.terms.TAtom;¶¶public class CondEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶//		if (arg0.isAtom()) {¶//			return arg0.eval(arg1);¶//		}¶//		SExpression condition = arg0.getTail();¶//		if(condition.isNIL()) {¶//				return NilAtomicExpressionFactory.newInstance();¶//		}¶//		return condHelper(condition, arg1);¶//		if (!condition.getHead().isAtom() &&!condition.getHead().getHead().isNIL()) {¶//			if (condition.getHead().getTail().isNIL()) {¶//				return condition.getHead().getHead().eval(arg1);¶//			} else {¶//				return condition.getHead().getTail().getHead().eval(arg1);¶//			}¶//		}else if (condition.getHead().isAtom()) {¶//			return condition.getHead().eval(arg1);¶//		}else {¶//			return eval(condition, arg1);¶//		}¶		SExpression condition = arg0.getTail();¶		if(condition.isNIL()) {¶				return NilAtomicExpressionFactory.newInstance();¶		}¶		if (!condition.getHead().isAtom() &&!condition.getHead().getHead().eval(arg1).isNIL()) {¶			if (condition.getHead().getTail().isNIL()) {¶				return condition.getHead().getHead().eval(arg1);¶			} else {¶				return condition.getHead().getTail().getHead().eval(arg1);¶			}¶		}else if (condition.getHead().isAtom()) {¶			return condition.getHead().eval(arg1);¶		}else {¶			return eval(condition, arg1);¶		}¶	¶		¶		¶	}¶//	private SExpression condHelper(SExpression current, Environment arg1) {¶//		if (current.getHead().isList()) {¶//			if (current.getHead().getTail().isNIL()) {¶//				return current.getHead().getHead().eval(arg1);¶//			} else {¶//				return current.getHead().getTail().getHead().eval(arg1);¶//			}¶			// make list helper maybe?¶//		}¶//		if(!current.getHead().eval(arg1).isNIL()) {¶//			if (current.getHead() instanceof TAtom && !current.getTail().isNIL()) {¶//				return condHelper(current.getTail(), arg1);¶//			}¶//			return current.getHead().eval(arg1);¶//		} else if (current.getTail().isNIL()) {¶//			return current.getTail();¶//		} else {¶//			return condHelper(current.getTail(), arg1);¶//		}¶			¶	¶}¶")]]]></diff>
  </Command>
  <Command __id="2556" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:22:25 EST 2021" docASTNodeCount="233" docActiveCodeLength="1509" docExpressionCount="173" docLength="1683" projectName="a5" starttimestamp="1638389407073" timestamp="4337950">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\evaluators\StringFormats.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package evaluators;¶import main.lisp.parser.terms.AbstractSExpression;¶import main.lisp.parser.terms.BasicExpression;¶import main.lisp.parser.terms.SExpression;¶public class StringFormats extends BasicExpression{¶¶	public StringFormats(SExpression head, SExpression tail) {¶		super(head, tail);¶	}¶	@Override¶	public String toString() {¶		if(this.isNIL()) {¶			return this.toStringAsSExpression();¶		}¶		return this.isList()? this.toStringAsList() : this.toStringAsSExpression();¶	}¶	@Override¶	public String toStringAsSExpressionDeep() {¶		return "(" + this.getHead().toStringAsSExpressionDeep() + " . " + this.getTail().toStringAsSExpressionDeep() + ")";¶	}¶	¶	@Override¶	public String toStringAsSExpression() {¶		return "(" + this.getHead().toString() + " . " + this.getTail().toString() + ")";¶	}¶	@Override¶	public String toStringAsListHelperPublic() {¶		if (this.getTail().isNIL()) {¶			return this.getHead().toString();¶		}else {¶			return this.getHead().toString() + " " + ((AbstractSExpression) this.getTail()).toStringAsListHelperPublic();¶		}¶		¶	}¶	@Override¶	public String toStringAsList() {¶			// does the same thing as toStringas list deep....need to change¶			return "(" + this.toStringAsListHelperPublic() + ")";¶	}¶¶	@Override¶	public boolean isList() {¶		// if head is a non nil atom and tail is nil, is a list¶		if(this.getHead().isAtom() && !(this.getHead().isNIL()) && this.getTail().isNIL()) {¶			return true;¶			// if the tail is an atom but not nil, it is not a list¶		} else if (this.getTail().isAtom() && !(this.getTail().isNIL())) {¶			return false;¶		} else ¶			return this.getTail().isList();¶		}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2558" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:22:27 EST 2021" docASTNodeCount="411" docActiveCodeLength="2609" docExpressionCount="312" docLength="2609" projectName="a5" starttimestamp="1638389407073" timestamp="4340191">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.Optional;¶¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Function;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.ExpressionFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶¶public class FuncallEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		SExpression current = arg0.getTail();¶		¶		SExpression lambdaOrFunction = null;¶		if (!current.getHead().isAtom()) {¶			lambdaOrFunction = current.getHead().eval(arg1);¶		}¶		if (lambdaOrFunction instanceof Lambda) {¶			Environment childEnvironment = arg1.newChild();¶			return evaluateLambda((Lambda) lambdaOrFunction, childEnvironment, arg1, current.getTail());¶		} else if(lambdaOrFunction instanceof Function) {¶			return evaluateLambda (((Function) lambdaOrFunction).getLambda(), ((Function) lambdaOrFunction).getEnvironment().newChild(), ((Function) lambdaOrFunction).getEnvironment(),current.getTail() );¶		} else {¶			final Optional<SExpression> isLambda = arg1.lookup((IdentifierAtom) current.getHead());¶			if (!isLambda.isEmpty() && isLambda.get() instanceof Lambda) {¶				Environment childEnvironment = arg1.newChild();¶				return evaluateLambda((Lambda) isLambda.get(), childEnvironment, arg1, current.getTail());¶			} else if (!isLambda.isEmpty() && isLambda.get() instanceof Function) {¶				¶				return evaluateLambda (((Function) isLambda.get()).getLambda(), ((Function) isLambda.get()).getEnvironment().newChild(), ((Function) isLambda.get()).getEnvironment(),current.getTail() ); ¶			}¶			¶			return ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		}¶	}¶	¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2612" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:27:45 EST 2021" docASTNodeCount="343" docActiveCodeLength="1927" docExpressionCount="249" docLength="2108" projectName="a5" starttimestamp="1638389407073" timestamp="4658053">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.FunctionFactory;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class FunctionEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead().getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶			if (arg0.getTail().isList()) {¶				SExpression body =arg0.getTail().getHead().getTail().getTail();¶				Lambda lambda = LambdaFactory.newInstance(argNames1, body);¶				return FunctionFactory.newInstance(lambda, arg1);¶			}¶			Lambda lambda = LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶			return FunctionFactory.newInstance(lambda, arg1);¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);¶		return FunctionFactory.newInstance(lambda, arg1);¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <Command __id="2615" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:27:45 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="4658656">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="2623" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:29:49 EST 2021" docASTNodeCount="157" docActiveCodeLength="1024" docExpressionCount="121" docLength="2333" projectName="a5" starttimestamp="1638389407073" timestamp="4782575">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\expression\CondEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package expression;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶import main.lisp.parser.terms.TAtom;¶¶public class CondEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶//		if (arg0.isAtom()) {¶//			return arg0.eval(arg1);¶//		}¶//		SExpression condition = arg0.getTail();¶//		if(condition.isNIL()) {¶//				return NilAtomicExpressionFactory.newInstance();¶//		}¶//		return condHelper(condition, arg1);¶//		if (!condition.getHead().isAtom() &&!condition.getHead().getHead().isNIL()) {¶//			if (condition.getHead().getTail().isNIL()) {¶//				return condition.getHead().getHead().eval(arg1);¶//			} else {¶//				return condition.getHead().getTail().getHead().eval(arg1);¶//			}¶//		}else if (condition.getHead().isAtom()) {¶//			return condition.getHead().eval(arg1);¶//		}else {¶//			return eval(condition, arg1);¶//		}¶		SExpression condition = arg0.getTail();¶		if(condition.isNIL()) {¶				return NilAtomicExpressionFactory.newInstance();¶		}¶		if (!condition.getHead().isAtom() &&!condition.getHead().getHead().eval(arg1).isNIL()) {¶			if (condition.getHead().getTail().isNIL()) {¶				return condition.getHead().getHead().eval(arg1);¶			} else {¶				return condition.getHead().getTail().getHead().eval(arg1);¶			}¶		}else if (condition.getHead().isAtom()) {¶			return condition.getHead().eval(arg1);¶		}else {¶			return eval(condition, arg1);¶		}¶	¶		¶		¶	}¶//	private SExpression condHelper(SExpression current, Environment arg1) {¶//		if (current.getHead().isList()) {¶//			if (current.getHead().getTail().isNIL()) {¶//				return current.getHead().getHead().eval(arg1);¶//			} else {¶//				return current.getHead().getTail().getHead().eval(arg1);¶//			}¶			// make list helper maybe?¶//		}¶//		if(!current.getHead().eval(arg1).isNIL()) {¶//			if (current.getHead() instanceof TAtom && !current.getTail().isNIL()) {¶//				return condHelper(current.getTail(), arg1);¶//			}¶//			return current.getHead().eval(arg1);¶//		} else if (current.getTail().isNIL()) {¶//			return current.getTail();¶//		} else {¶//			return condHelper(current.getTail(), arg1);¶//		}¶			¶	¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="2661" _type="Delete" date="Wed Dec 01 16:31:56 EST 2021" docASTNodeCount="157" docActiveCodeLength="981" docExpressionCount="121" docLength="1611" endLine="69" length="722" offset="1600" repeat="3" startLine="49" starttimestamp="1638389407073" timestamp="4909158" timestamp2="4911739">
    <text><![CDATA[
//	private SExpression condHelper(SExpression current, Environment arg1) {
//		if (current.getHead().isList()) {
//			if (current.getHead().getTail().isNIL()) {
//				return current.getHead().getHead().eval(arg1);
//			} else {
//				return current.getHead().getTail().getHead().eval(arg1);
//			}
			// make list helper maybe?
//		}
//		if(!current.getHead().eval(arg1).isNIL()) {
//			if (current.getHead() instanceof TAtom && !current.getTail().isNIL()) {
//				return condHelper(current.getTail(), arg1);
//			}
//			return current.getHead().eval(arg1);
//		} else if (current.getTail().isNIL()) {
//			return current.getTail();
//		} else {
//			return condHelper(current.getTail(), arg1);
//		}
]]></text>
  </DocumentChange>
  <Command __id="2670" _type="PauseCommand" date="Wed Dec 01 16:32:02 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4915066">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3324]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2669" _type="SelectTextCommand" caretOffset="194" date="Wed Dec 01 16:32:02 EST 2021" end="860" start="194" starttimestamp="1638389407073" timestamp="4915066" />
  <Command __id="2672" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:32:02 EST 2021" starttimestamp="1638389407073" timestamp="4915518" />
  <Command __id="2674" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:32:03 EST 2021" starttimestamp="1638389407073" timestamp="4916162" />
  <Command __id="2676" _type="PauseCommand" date="Wed Dec 01 16:32:04 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="4917545">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1383]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2675" _type="MoveCaretCommand" caretOffset="743" date="Wed Dec 01 16:32:04 EST 2021" docOffset="923" starttimestamp="1638389407073" timestamp="4917545" />
  <Command __id="2678" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:32:05 EST 2021" starttimestamp="1638389407073" timestamp="4918258" />
  <Command __id="2680" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:32:05 EST 2021" starttimestamp="1638389407073" timestamp="4918461" />
  <Command __id="2682" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:32:06 EST 2021" starttimestamp="1638389407073" timestamp="4919058" />
  <Command __id="2684" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:32:06 EST 2021" starttimestamp="1638389407073" timestamp="4919248" />
  <Command __id="2686" _type="PauseCommand" date="Wed Dec 01 16:32:07 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="4920372">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1124]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2685" _type="MoveCaretCommand" caretOffset="735" date="Wed Dec 01 16:32:07 EST 2021" docOffset="915" starttimestamp="1638389407073" timestamp="4920372" />
  <Command __id="2712" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:32:11 EST 2021" starttimestamp="1638389407073" timestamp="4924348" />
  <Command __id="2713" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:32:11 EST 2021" starttimestamp="1638389407073" timestamp="4924351" />
  <Command __id="2715" _type="PauseCommand" date="Wed Dec 01 16:32:31 EST 2021" range="20s-30s" starttimestamp="1638389407073" timestamp="4944416">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[20065]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2714" _type="MoveCaretCommand" caretOffset="591" date="Wed Dec 01 16:32:31 EST 2021" docOffset="771" starttimestamp="1638389407073" timestamp="4944416" />
  <Command __id="2716" _type="SelectTextCommand" caretOffset="591" date="Wed Dec 01 16:32:31 EST 2021" end="591" start="587" starttimestamp="1638389407073" timestamp="4944603" />
  <Command __id="2717" _type="SelectTextCommand" caretOffset="595" date="Wed Dec 01 16:32:31 EST 2021" end="595" start="531" starttimestamp="1638389407073" timestamp="4944830" />
  <Command __id="2718" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:32:32 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="4945286" type="Run" />
  <Command __id="2720" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:32:32 EST 2021" starttimestamp="1638389407073" timestamp="4945700" />
  <Command __id="2722" _type="PauseCommand" date="Wed Dec 01 16:32:33 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="4946815">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1115]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2723" _type="UndoCommand" date="Wed Dec 01 16:32:33 EST 2021" starttimestamp="1638389407073" timestamp="4946820" />
  <Command __id="2729" _type="PauseCommand" date="Wed Dec 01 16:32:42 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="4955363">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[5015]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2728" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:32:42 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="4955363" type="Run" />
  <Command __id="2731" _type="PauseCommand" date="Wed Dec 01 16:32:46 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4959152">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[3789]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2730" _type="MoveCaretCommand" caretOffset="262" date="Wed Dec 01 16:32:46 EST 2021" docOffset="442" starttimestamp="1638389407073" timestamp="4959152" />
  <Command __id="2741" _type="PauseCommand" date="Wed Dec 01 16:32:59 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="4972750">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1289]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2740" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:32:59 EST 2021" kind="StepInto" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="4972750" type="Run" />
  <Command __id="2743" _type="PauseCommand" date="Wed Dec 01 16:33:10 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="4983022">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[10272]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2742" _type="MoveCaretCommand" caretOffset="503" date="Wed Dec 01 16:33:10 EST 2021" docOffset="683" starttimestamp="1638389407073" timestamp="4983022" />
  <Command __id="2770" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:33:21 EST 2021" starttimestamp="1638389407073" timestamp="4994509" />
  <Command __id="2771" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:33:21 EST 2021" starttimestamp="1638389407073" timestamp="4994510" />
  <Command __id="2772" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:33:21 EST 2021" starttimestamp="1638389407073" timestamp="4994511" />
  <Command __id="2773" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:33:21 EST 2021" starttimestamp="1638389407073" timestamp="4994511" />
  <Command __id="2774" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:33:21 EST 2021" starttimestamp="1638389407073" timestamp="4994513" />
  <Command __id="2781" _type="PauseCommand" date="Wed Dec 01 16:33:27 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="4999953">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[2770]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2780" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:33:27 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4999953" type="Run" />
  <Command __id="2782" _type="RunCommand" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:33:27 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="4999953" type="Run" />
  <Command __id="2784" _type="PauseCommand" date="Wed Dec 01 16:33:29 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5002484">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2531]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2783" _type="ShellCommand" date="Wed Dec 01 16:33:29 EST 2021" starttimestamp="1638389407073" timestamp="5002484" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2786" _type="PauseCommand" date="Wed Dec 01 16:33:33 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5006374">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[3890]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="2785" _type="ConsoleOutput" date="Wed Dec 01 16:33:33 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="5006374" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test execution time (ms):10
Test execution time (ms):13
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"#<FUNCTION :LAMBDA (Y) (* X Y)>¶LAMBDA (X) (COND (AND (ATOM (CAR X)) (AND (ATOM (CAR X)) (NOT (CDR X)))) (FUNCALL ISLIST (CDR X)))"), Diff(INSERT,"Test execution time (ms):1¶Test execution time (ms):10¶Test execution time (ms):13"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2787" _type="ExceptionCommand" date="Wed Dec 01 16:33:33 EST 2021" starttimestamp="1638389407073" timestamp="5006475" type="Exception">
    <exceptionString><![CDATA[Test execution time (ms):71
Test execution time (ms):73
A6ExtraCondChecker did not pass completely:Expected strings:NIL
NIL
T
23
NILactual string NIL
NIL
T
NIL
NIL%0.0

Test execution time (ms):3
Test execution time (ms):1
Test execution time (ms):1
Test execution time (ms):1
Test execution time (ms):1
java.lang.IllegalStateException: Expression does not start with an operator
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:18)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at expression.CondEvaluator.eval(CondEvaluator.java:21)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at expression.EvalEvaluator.eval(EvalEvaluator.java:10)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at expression.EvalEvaluator.eval(EvalEvaluator.java:10)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2789" _type="PauseCommand" date="Wed Dec 01 16:33:44 EST 2021" range="10s-20s" starttimestamp="1638389407073" timestamp="5017397">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[10922]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="2788" _type="ConsoleOutput" date="Wed Dec 01 16:33:44 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="5017397" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test execution time (ms):1
LispIsListChecker3 did not pass completely:Expected strings:NILactual string T%0.0

Test execution time (ms):1
LispIsListChecker4 did not pass completely:Expected strings:NILactual string T%0.0

Test execution time (ms):0
LispToStringChecker did not pass completely:Expected strings:"(1)"actual string (NIL)%0.0

Test execution time (ms):1
LispToStringChecker2 did not pass completely:Expected strings:"(2 8 (9 5))"actual string (NIL)%0.0

Test execution time (ms):1
LispToStringChecker3 did not pass completely:Expected strings:"(5 . 6)"actual string (NIL)%0.0

Test execution time (ms):0
LispToStringChecker4 did not pass completely:Expected strings:"(1 . (3 . 6))"actual string (NIL)%0.0

Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1¶Test execution time (ms):1"), Diff(DELETE,"0¶Test execution time (ms):13"), Diff(INSERT,"¶LispIsListChecker3 did not pass completely:Expected strings:NILactual string T%0.0¶¶Test execution time (ms):1¶LispIsListChecker4 did not pass completely:Expected strings:NILactual string T%0.0¶¶Test execution time (ms):0¶LispToStringChecker did not pass completely:Expected strings:"(1)"actual string (NIL)%0.0¶¶Test execution time (ms):1¶LispToStringChecker2 did not pass completely:Expected strings:"(2 8 (9 5))"actual string (NIL)%0.0¶¶Test execution time (ms):1¶LispToStringChecker3 did not pass completely:Expected strings:"(5 . 6)"actual string (NIL)%0.0¶¶Test execution time (ms):0¶LispToStringChecker4 did not pass completely:Expected strings:"(1 . (3 . 6))"actual string (NIL)%0.0¶¶Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="2791" _type="PauseCommand" date="Wed Dec 01 16:34:25 EST 2021" range="30s-1m" starttimestamp="1638389407073" timestamp="5058615">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[41218]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2790" _type="ShellCommand" date="Wed Dec 01 16:34:25 EST 2021" starttimestamp="1638389407073" timestamp="5058615" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2792" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:34:26 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="5059304" type="Debug" />
  <Command __id="2793" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:34:26 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="5059304" type="Run" />
  <Command __id="2794" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:34:26 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="5059304" type="Debug" />
  <Command __id="2795" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:34:26 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="5059304" type="Run" />
  <Command __id="2797" _type="PauseCommand" date="Wed Dec 01 16:34:27 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5060626">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1322]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2796" _type="MoveCaretCommand" caretOffset="358" date="Wed Dec 01 16:34:27 EST 2021" docOffset="538" starttimestamp="1638389407073" timestamp="5060626" />
  <Command __id="2799" _type="InsertStringCommand" date="Wed Dec 01 16:34:28 EST 2021" starttimestamp="1638389407073" timestamp="5061245" timestamp2="5061245">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2801" _type="PasteCommand" date="Wed Dec 01 16:34:28 EST 2021" starttimestamp="1638389407073" timestamp="5061851" />
  <Command __id="2815" _type="PauseCommand" date="Wed Dec 01 16:34:31 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5064673">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1016]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2814" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:31 EST 2021" starttimestamp="1638389407073" timestamp="5064673" />
  <Command __id="2816" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:31 EST 2021" starttimestamp="1638389407073" timestamp="5064676" />
  <Command __id="2817" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:31 EST 2021" starttimestamp="1638389407073" timestamp="5064677" />
  <Command __id="2818" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:31 EST 2021" starttimestamp="1638389407073" timestamp="5064677" />
  <Command __id="2819" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:31 EST 2021" starttimestamp="1638389407073" timestamp="5064677" />
  <Command __id="2820" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:31 EST 2021" starttimestamp="1638389407073" timestamp="5064678" />
  <Command __id="2821" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:31 EST 2021" starttimestamp="1638389407073" timestamp="5064678" />
  <Command __id="2822" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:31 EST 2021" starttimestamp="1638389407073" timestamp="5064680" />
  <Command __id="2823" _type="ShellCommand" date="Wed Dec 01 16:34:31 EST 2021" starttimestamp="1638389407073" timestamp="5064819" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2824" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:32 EST 2021" starttimestamp="1638389407073" timestamp="5065682" />
  <Command __id="2825" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:32 EST 2021" starttimestamp="1638389407073" timestamp="5065686" />
  <Command __id="2826" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:32 EST 2021" starttimestamp="1638389407073" timestamp="5065686" />
  <Command __id="2827" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:32 EST 2021" starttimestamp="1638389407073" timestamp="5065687" />
  <Command __id="2828" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:32 EST 2021" starttimestamp="1638389407073" timestamp="5065687" />
  <Command __id="2829" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:32 EST 2021" starttimestamp="1638389407073" timestamp="5065687" />
  <Command __id="2830" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:32 EST 2021" starttimestamp="1638389407073" timestamp="5065687" />
  <Command __id="2831" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:32 EST 2021" starttimestamp="1638389407073" timestamp="5065689" />
  <Command __id="2832" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:32 EST 2021" starttimestamp="1638389407073" timestamp="5065689" />
  <Command __id="2833" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:34:32 EST 2021" starttimestamp="1638389407073" timestamp="5065690" />
  <Command __id="2834" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:34:33 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="5066483" type="Debug" />
  <Command __id="2835" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:34:33 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="5066483" type="Run" />
  <Command __id="2836" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:34:33 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="5066483" type="Debug" />
  <Command __id="2837" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:34:33 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="5066483" type="Run" />
  <Command __id="2841" _type="PauseCommand" date="Wed Dec 01 16:35:18 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="5111188">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6470]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="2840" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:35:18 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="5111188" type="Run" />
  <Command __id="2842" _type="RunCommand" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:35:18 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="5111188" type="Run" />
  <Command __id="2844" _type="PauseCommand" date="Wed Dec 01 16:35:20 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5113605">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2417]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2843" _type="ShellCommand" date="Wed Dec 01 16:35:20 EST 2021" starttimestamp="1638389407073" timestamp="5113605" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="2846" _type="PauseCommand" date="Wed Dec 01 16:35:25 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5118292">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4687]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="2845" _type="ExceptionCommand" date="Wed Dec 01 16:35:25 EST 2021" starttimestamp="1638389407073" timestamp="5118292" type="Exception">
    <exceptionString><![CDATA[Test execution time (ms):15
Test execution time (ms):9
Test execution time (ms):11
java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at expression.CondEvaluator.eval(CondEvaluator.java:17)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at expression.LoadEvaluator.eval(LoadEvaluator.java:31)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2847" _type="ExceptionCommand" date="Wed Dec 01 16:35:25 EST 2021" starttimestamp="1638389407073" timestamp="5118420" type="Exception">
    <exceptionString><![CDATA[LispIsListChecker did not pass completely:Expected strings:Tactual string %0.0

Test execution time (ms):6
java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at expression.CondEvaluator.eval(CondEvaluator.java:17)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="2849" _type="PauseCommand" date="Wed Dec 01 16:35:28 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5120937">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[2517]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="2848" _type="ConsoleOutput" date="Wed Dec 01 16:35:28 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="5120937" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):1
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1¶Test execution time (ms):"), Diff(DELETE,"1¶LispIsListChecker3 did not pass completely:Expected strings:NILactual string T%0.0¶¶Test execution time (ms):1¶LispIsListChecker4 did not pass completely:Expected strings:NILactual string T%0.0¶¶Test execution time (ms):0¶LispToStringChecker did not pass completely:Expected strings:"(1)"actual string (NIL)%0.0¶¶Test execution time (ms):1¶LispToStringChecker2 did not pass completely:Expected strings:"(2 8 (9 5))"actual string (NIL)%0.0¶¶Test execution time (ms):1¶LispToStringChecker3 did not pass completely:Expected strings:"(5 . 6)"actual string (NIL)%0.0¶¶Test execution time (ms):0¶LispToStringChecker4 did not pass completely:Expected strings:"(1 . (3 . 6))"actual string (NIL)%0.0¶"), Diff(INSERT,"0¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):1"), Diff(EQUAL,"¶Test execution time (ms):1¶")]]]></diff>
  </Command>
  <Command __id="2851" _type="PauseCommand" date="Wed Dec 01 16:35:30 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5123825">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2888]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="2850" _type="ShellCommand" date="Wed Dec 01 16:35:30 EST 2021" starttimestamp="1638389407073" timestamp="5123825" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="2852" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:35:31 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="5124513" type="Debug" />
  <Command __id="2853" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:35:31 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="5124513" type="Run" />
  <Command __id="2854" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:35:31 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="5124513" type="Debug" />
  <Command __id="2855" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:35:31 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="5124513" type="Run" />
  <Command __id="2857" _type="PauseCommand" date="Wed Dec 01 16:35:32 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5125606">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1093]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="2856" _type="MoveCaretCommand" caretOffset="321" date="Wed Dec 01 16:35:32 EST 2021" docOffset="501" starttimestamp="1638389407073" timestamp="5125606" />
  <Command __id="2859" _type="InsertStringCommand" date="Wed Dec 01 16:35:33 EST 2021" starttimestamp="1638389407073" timestamp="5126412" timestamp2="5126412">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2861" _type="InsertStringCommand" date="Wed Dec 01 16:35:34 EST 2021" starttimestamp="1638389407073" timestamp="5127007" timestamp2="5127007">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2863" _type="InsertStringCommand" date="Wed Dec 01 16:35:34 EST 2021" starttimestamp="1638389407073" timestamp="5127048" timestamp2="5127048">
    <data><![CDATA[f]]></data>
  </Command>
  <Command __id="2865" _type="InsertStringCommand" date="Wed Dec 01 16:35:34 EST 2021" starttimestamp="1638389407073" timestamp="5127259" timestamp2="5127259">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2867" _type="InsertStringCommand" date="Wed Dec 01 16:35:34 EST 2021" starttimestamp="1638389407073" timestamp="5127614" timestamp2="5127614">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="2869" _type="InsertStringCommand" date="Wed Dec 01 16:35:35 EST 2021" starttimestamp="1638389407073" timestamp="5128221" timestamp2="5128221">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2871" _type="InsertStringCommand" date="Wed Dec 01 16:35:35 EST 2021" starttimestamp="1638389407073" timestamp="5128274" timestamp2="5128274">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2873" _type="InsertStringCommand" date="Wed Dec 01 16:35:35 EST 2021" starttimestamp="1638389407073" timestamp="5128368" timestamp2="5128368">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2875" _type="InsertStringCommand" date="Wed Dec 01 16:35:35 EST 2021" starttimestamp="1638389407073" timestamp="5128443" timestamp2="5128443">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2877" _type="InsertStringCommand" date="Wed Dec 01 16:35:35 EST 2021" starttimestamp="1638389407073" timestamp="5128652" timestamp2="5128652">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2879" _type="InsertStringCommand" date="Wed Dec 01 16:35:36 EST 2021" starttimestamp="1638389407073" timestamp="5129305" timestamp2="5129305">
    <data><![CDATA[g]]></data>
  </Command>
  <Command __id="2881" _type="InsertStringCommand" date="Wed Dec 01 16:35:36 EST 2021" starttimestamp="1638389407073" timestamp="5129421" timestamp2="5129421">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2883" _type="InsertStringCommand" date="Wed Dec 01 16:35:36 EST 2021" starttimestamp="1638389407073" timestamp="5129516" timestamp2="5129516">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2885" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:35:36 EST 2021" starttimestamp="1638389407073" timestamp="5129921" />
  <Command __id="2887" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:35:37 EST 2021" starttimestamp="1638389407073" timestamp="5130104" />
  <Command __id="2889" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:35:37 EST 2021" starttimestamp="1638389407073" timestamp="5130262" />
  <Command __id="2891" _type="PauseCommand" date="Wed Dec 01 16:35:38 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5131402">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1140]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2892" _type="InsertStringCommand" date="Wed Dec 01 16:35:38 EST 2021" starttimestamp="1638389407073" timestamp="5131403" timestamp2="5131403">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2894" _type="InsertStringCommand" date="Wed Dec 01 16:35:38 EST 2021" starttimestamp="1638389407073" timestamp="5131455" timestamp2="5131455">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2896" _type="InsertStringCommand" date="Wed Dec 01 16:35:38 EST 2021" starttimestamp="1638389407073" timestamp="5131542" timestamp2="5131542">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2898" _type="InsertStringCommand" date="Wed Dec 01 16:35:38 EST 2021" starttimestamp="1638389407073" timestamp="5131602" timestamp2="5131602">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2900" _type="InsertStringCommand" date="Wed Dec 01 16:35:38 EST 2021" starttimestamp="1638389407073" timestamp="5131763" timestamp2="5131763">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2901" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Dec 01 16:35:38 EST 2021" start_end="START" starttimestamp="1638389407073" timestamp="5131765" />
  <Command __id="2906" _type="PauseCommand" date="Wed Dec 01 16:35:40 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5133047">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1282]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2905" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Dec 01 16:35:40 EST 2021" start_end="END" starttimestamp="1638389407073" timestamp="5133047" />
  <Command __id="2908" _type="InsertStringCommand" date="Wed Dec 01 16:35:40 EST 2021" starttimestamp="1638389407073" timestamp="5133054" timestamp2="5133054">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2910" _type="InsertStringCommand" date="Wed Dec 01 16:35:40 EST 2021" starttimestamp="1638389407073" timestamp="5133242" timestamp2="5133242">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2911" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Dec 01 16:35:40 EST 2021" start_end="START" starttimestamp="1638389407073" timestamp="5133244" />
  <Command __id="2915" _type="PauseCommand" date="Wed Dec 01 16:35:41 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5134498">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[AssistCommand]]></prev>
    <pause><![CDATA[1254]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[AssistCommand]]></next>
  </Command>
  <Command __id="2914" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Dec 01 16:35:41 EST 2021" start_end="END" starttimestamp="1638389407073" timestamp="5134498" />
  <Command __id="2917" _type="InsertStringCommand" date="Wed Dec 01 16:35:41 EST 2021" starttimestamp="1638389407073" timestamp="5134503" timestamp2="5134503">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2919" _type="PauseCommand" date="Wed Dec 01 16:35:42 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5135685">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[1182]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="2918" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.COLUMN_NEXT" date="Wed Dec 01 16:35:42 EST 2021" starttimestamp="1638389407073" timestamp="5135685" />
  <Command __id="2921" _type="InsertStringCommand" date="Wed Dec 01 16:35:42 EST 2021" starttimestamp="1638389407073" timestamp="5135832" timestamp2="5135832">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2923" _type="InsertStringCommand" date="Wed Dec 01 16:35:43 EST 2021" starttimestamp="1638389407073" timestamp="5136441" timestamp2="5136441">
    <data><![CDATA[{]]></data>
  </Command>
  <Command __id="2925" _type="InsertStringCommand" date="Wed Dec 01 16:35:43 EST 2021" starttimestamp="1638389407073" timestamp="5136634" timestamp2="5136634">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2927" _type="PauseCommand" date="Wed Dec 01 16:35:47 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5140204">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3570]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="2928" _type="InsertStringCommand" date="Wed Dec 01 16:35:47 EST 2021" starttimestamp="1638389407073" timestamp="5140208" timestamp2="5140208">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2930" _type="InsertStringCommand" date="Wed Dec 01 16:35:47 EST 2021" starttimestamp="1638389407073" timestamp="5140304" timestamp2="5140304">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="2932" _type="InsertStringCommand" date="Wed Dec 01 16:35:47 EST 2021" starttimestamp="1638389407073" timestamp="5140459" timestamp2="5140459">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2934" _type="InsertStringCommand" date="Wed Dec 01 16:35:47 EST 2021" starttimestamp="1638389407073" timestamp="5140564" timestamp2="5140564">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="2936" _type="InsertStringCommand" date="Wed Dec 01 16:35:47 EST 2021" starttimestamp="1638389407073" timestamp="5140677" timestamp2="5140677">
    <data><![CDATA[r]]></data>
  </Command>
  <Command __id="2938" _type="InsertStringCommand" date="Wed Dec 01 16:35:47 EST 2021" starttimestamp="1638389407073" timestamp="5140755" timestamp2="5140755">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2940" _type="InsertStringCommand" date="Wed Dec 01 16:35:47 EST 2021" starttimestamp="1638389407073" timestamp="5140920" timestamp2="5140920">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="2942" _type="InsertStringCommand" date="Wed Dec 01 16:35:48 EST 2021" starttimestamp="1638389407073" timestamp="5141554" timestamp2="5141554">
    <data><![CDATA[c]]></data>
  </Command>
  <Command __id="2944" _type="InsertStringCommand" date="Wed Dec 01 16:35:48 EST 2021" starttimestamp="1638389407073" timestamp="5141617" timestamp2="5141617">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2946" _type="InsertStringCommand" date="Wed Dec 01 16:35:48 EST 2021" starttimestamp="1638389407073" timestamp="5141693" timestamp2="5141693">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2948" _type="InsertStringCommand" date="Wed Dec 01 16:35:48 EST 2021" starttimestamp="1638389407073" timestamp="5141769" timestamp2="5141769">
    <data><![CDATA[d]]></data>
  </Command>
  <Command __id="2950" _type="InsertStringCommand" date="Wed Dec 01 16:35:48 EST 2021" starttimestamp="1638389407073" timestamp="5141921" timestamp2="5141921">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2952" _type="InsertStringCommand" date="Wed Dec 01 16:35:49 EST 2021" starttimestamp="1638389407073" timestamp="5141999" timestamp2="5141999">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="2954" _type="InsertStringCommand" date="Wed Dec 01 16:35:49 EST 2021" starttimestamp="1638389407073" timestamp="5142129" timestamp2="5142129">
    <data><![CDATA[i]]></data>
  </Command>
  <Command __id="2956" _type="InsertStringCommand" date="Wed Dec 01 16:35:49 EST 2021" starttimestamp="1638389407073" timestamp="5142190" timestamp2="5142190">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="2958" _type="InsertStringCommand" date="Wed Dec 01 16:35:49 EST 2021" starttimestamp="1638389407073" timestamp="5142276" timestamp2="5142276">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="2960" _type="InsertStringCommand" date="Wed Dec 01 16:35:49 EST 2021" starttimestamp="1638389407073" timestamp="5142435" timestamp2="5142435">
    <data><![CDATA[.]]></data>
  </Command>
  <Command __id="2961" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="true" date="Wed Dec 01 16:35:49 EST 2021" start_end="START" starttimestamp="1638389407073" timestamp="5142437" />
  <Command __id="2965" _type="AssistCommand" assist_type="CONTENT_ASSIST" auto_activated="false" date="Wed Dec 01 16:35:50 EST 2021" start_end="END" starttimestamp="1638389407073" timestamp="5143424" />
  <Command __id="2967" _type="InsertStringCommand" date="Wed Dec 01 16:35:50 EST 2021" starttimestamp="1638389407073" timestamp="5143430" timestamp2="5143430">
    <data><![CDATA[]]></data>
  </Command>
  <Command __id="2969" _type="PauseCommand" date="Wed Dec 01 16:35:55 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="5148453">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[5023]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="2968" _type="SelectTextCommand" caretOffset="543" date="Wed Dec 01 16:35:55 EST 2021" end="591" start="543" starttimestamp="1638389407073" timestamp="5148453" />
  <Command __id="2970" _type="CopyCommand" date="Wed Dec 01 16:35:56 EST 2021" starttimestamp="1638389407073" timestamp="5149027" />
  <Command __id="3007" _type="PauseCommand" date="Wed Dec 01 16:36:02 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5155401">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1745]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ProgramExecutionEvent]]></next>
  </Command>
  <Command __id="3006" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:36:02 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="5155401" type="Run" />
  <Command __id="3008" _type="RunCommand" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:36:02 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="5155401" type="Run" />
  <Command __id="3010" _type="PauseCommand" date="Wed Dec 01 16:36:04 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5157878">
    <prevType><![CDATA[Debug]]></prevType>
    <prev><![CDATA[RunCommand]]></prev>
    <pause><![CDATA[2477]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3009" _type="ShellCommand" date="Wed Dec 01 16:36:04 EST 2021" starttimestamp="1638389407073" timestamp="5157878" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3012" _type="PauseCommand" date="Wed Dec 01 16:36:09 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5162106">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4228]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="3011" _type="ExceptionCommand" date="Wed Dec 01 16:36:09 EST 2021" starttimestamp="1638389407073" timestamp="5162106" type="Exception">
    <exceptionString><![CDATA[Test execution time (ms):1
Test execution time (ms):11
Test execution time (ms):14
java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at expression.CondEvaluator.eval(CondEvaluator.java:18)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at expression.LoadEvaluator.eval(LoadEvaluator.java:31)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3013" _type="ConsoleOutput" date="Wed Dec 01 16:36:09 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="5162220" type="ConsoleOutput">
    <outputString><![CDATA[A6ExtraCondChecker did not pass completely:Expected strings:NIL
NIL
T
23
NILactual string NIL
T
T
NIL
NIL%0.0

Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):1
Test execution time (ms):1
Test execution time (ms):1
CombinationChecker did not pass completely:Expected strings:4actual string NIL%0.0

Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"A6ExtraCondChecker did not pass completely:Expected strings:NIL¶NIL¶T¶23¶NILactual string NIL¶T¶T¶NIL¶NIL%0.0¶¶"), Diff(EQUAL,"Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):1¶Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"¶"), Diff(DELETE,"Test execution time (ms):1"), Diff(INSERT,"CombinationChecker did not pass completely:Expected strings:4actual string NIL%0.0¶"), Diff(EQUAL,"¶Test execution time (ms):1¶")]]]></diff>
  </Command>
  <Command __id="3015" _type="PauseCommand" date="Wed Dec 01 16:36:10 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5163457">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1237]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3014" _type="ShellCommand" date="Wed Dec 01 16:36:10 EST 2021" starttimestamp="1638389407073" timestamp="5163457" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3016" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:36:11 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="5164143" type="Debug" />
  <Command __id="3017" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:36:11 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="5164143" type="Run" />
  <Command __id="3018" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:36:11 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="5164143" type="Debug" />
  <Command __id="3019" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:36:11 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="5164143" type="Run" />
  <Command __id="3021" _type="PauseCommand" date="Wed Dec 01 16:36:12 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5165246">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[ProgramExecutionEvent]]></prev>
    <pause><![CDATA[1103]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3020" _type="SelectTextCommand" caretOffset="325" date="Wed Dec 01 16:36:12 EST 2021" end="418" start="325" starttimestamp="1638389407073" timestamp="5165246" />
  <Command __id="3023" _type="PauseCommand" date="Wed Dec 01 16:36:21 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="5174872">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[9626]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3026" _type="EclipseCommand" commandID="org.eclipse.jdt.ui.edit.text.java.toggle.comment" date="Wed Dec 01 16:36:21 EST 2021" starttimestamp="1638389407073" timestamp="5174883" />
  <Command __id="3028" _type="PauseCommand" date="Wed Dec 01 16:36:51 EST 2021" range="20s-30s" starttimestamp="1638389407073" timestamp="5204539">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[29656]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3027" _type="ShellCommand" date="Wed Dec 01 16:36:51 EST 2021" starttimestamp="1638389407073" timestamp="5204539" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3030" _type="PauseCommand" date="Wed Dec 01 16:37:16 EST 2021" range="20s-30s" starttimestamp="1638389407073" timestamp="5229374">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[24835]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3029" _type="ShellCommand" date="Wed Dec 01 16:37:16 EST 2021" starttimestamp="1638389407073" timestamp="5229374" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3032" _type="PauseCommand" date="Wed Dec 01 16:37:47 EST 2021" range="30s-1m" starttimestamp="1638389407073" timestamp="5260196">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[30822]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3031" _type="MoveCaretCommand" caretOffset="368" date="Wed Dec 01 16:37:47 EST 2021" docOffset="548" starttimestamp="1638389407073" timestamp="5260196" />
  <Command __id="3034" _type="PauseCommand" date="Wed Dec 01 16:37:48 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5261331">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1135]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3033" _type="SelectTextCommand" caretOffset="323" date="Wed Dec 01 16:37:48 EST 2021" end="424" start="323" starttimestamp="1638389407073" timestamp="5261331" />
  <Command __id="3035" _type="MoveCaretCommand" caretOffset="424" date="Wed Dec 01 16:37:48 EST 2021" docOffset="604" starttimestamp="1638389407073" timestamp="5261740" />
  <Command __id="3036" _type="ShellCommand" date="Wed Dec 01 16:37:49 EST 2021" starttimestamp="1638389407073" timestamp="5262631" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3037" _type="ShellCommand" date="Wed Dec 01 16:37:50 EST 2021" starttimestamp="1638389407073" timestamp="5263491" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3038" _type="ShellCommand" date="Wed Dec 01 16:37:50 EST 2021" starttimestamp="1638389407073" timestamp="5263857" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3040" _type="PauseCommand" date="Wed Dec 01 16:37:55 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5268373">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4516]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3039" _type="ShellCommand" date="Wed Dec 01 16:37:55 EST 2021" starttimestamp="1638389407073" timestamp="5268373" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3042" _type="PauseCommand" date="Wed Dec 01 16:37:58 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5271077">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[2704]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3041" _type="ShellCommand" date="Wed Dec 01 16:37:58 EST 2021" starttimestamp="1638389407073" timestamp="5271077" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3044" _type="PauseCommand" date="Wed Dec 01 16:40:55 EST 2021" range="2m-5m" starttimestamp="1638389407073" timestamp="5448526">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[177449]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3043" _type="ShellCommand" date="Wed Dec 01 16:40:55 EST 2021" starttimestamp="1638389407073" timestamp="5448526" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3046" _type="PauseCommand" date="Wed Dec 01 16:40:56 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5449571">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1045]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3045" _type="ShellCommand" date="Wed Dec 01 16:40:56 EST 2021" starttimestamp="1638389407073" timestamp="5449571" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3047" _type="ShellCommand" date="Wed Dec 01 16:40:56 EST 2021" starttimestamp="1638389407073" timestamp="5449663" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3075" _type="PauseCommand" date="Wed Dec 01 16:41:11 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5463929">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1002]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3074" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:11 EST 2021" starttimestamp="1638389407073" timestamp="5463929" />
  <Command __id="3076" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:11 EST 2021" starttimestamp="1638389407073" timestamp="5463933" />
  <Command __id="3077" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:11 EST 2021" starttimestamp="1638389407073" timestamp="5463933" />
  <Command __id="3078" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:11 EST 2021" starttimestamp="1638389407073" timestamp="5463934" />
  <Command __id="3079" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:11 EST 2021" starttimestamp="1638389407073" timestamp="5463935" />
  <Command __id="3080" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:11 EST 2021" starttimestamp="1638389407073" timestamp="5463935" />
  <Command __id="3081" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:11 EST 2021" starttimestamp="1638389407073" timestamp="5463935" />
  <Command __id="3082" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:11 EST 2021" starttimestamp="1638389407073" timestamp="5463938" />
  <Command __id="3083" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:11 EST 2021" starttimestamp="1638389407073" timestamp="5463938" />
  <Command __id="3084" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:11 EST 2021" starttimestamp="1638389407073" timestamp="5463939" />
  <Command __id="3086" _type="PauseCommand" date="Wed Dec 01 16:41:14 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5467330">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[3391]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3088" _type="PauseCommand" date="Wed Dec 01 16:41:18 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5471355">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[4025]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3089" _type="MoveCaretCommand" caretOffset="1406" date="Wed Dec 01 16:41:18 EST 2021" docOffset="1687" starttimestamp="1638389407073" timestamp="5471472" />
  <Command __id="3091" _type="PauseCommand" date="Wed Dec 01 16:41:21 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5474842">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3370]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3090" _type="MoveCaretCommand" caretOffset="1355" date="Wed Dec 01 16:41:21 EST 2021" docOffset="1636" starttimestamp="1638389407073" timestamp="5474842" />
  <Command __id="3092" _type="SelectTextCommand" caretOffset="1359" date="Wed Dec 01 16:41:22 EST 2021" end="1359" start="1353" starttimestamp="1638389407073" timestamp="5475043" />
  <Command __id="3093" _type="SelectTextCommand" caretOffset="1406" date="Wed Dec 01 16:41:22 EST 2021" end="1406" start="1349" starttimestamp="1638389407073" timestamp="5475239" />
  <Command __id="3095" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:41:22 EST 2021" starttimestamp="1638389407073" timestamp="5475857" />
  <Command __id="3097" _type="EclipseCommand" commandID="eventLogger.styledTextCommand.DELETE_PREVIOUS" date="Wed Dec 01 16:41:23 EST 2021" starttimestamp="1638389407073" timestamp="5476034" />
  <Command __id="3111" _type="PauseCommand" date="Wed Dec 01 16:41:27 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5480202">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1025]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3110" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:27 EST 2021" starttimestamp="1638389407073" timestamp="5480202" />
  <Command __id="3112" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:27 EST 2021" starttimestamp="1638389407073" timestamp="5480206" />
  <Command __id="3113" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:27 EST 2021" starttimestamp="1638389407073" timestamp="5480206" />
  <Command __id="3114" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:27 EST 2021" starttimestamp="1638389407073" timestamp="5480207" />
  <Command __id="3115" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:27 EST 2021" starttimestamp="1638389407073" timestamp="5480207" />
  <Command __id="3116" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:27 EST 2021" starttimestamp="1638389407073" timestamp="5480208" />
  <Command __id="3117" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:27 EST 2021" starttimestamp="1638389407073" timestamp="5480208" />
  <Command __id="3118" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:41:27 EST 2021" starttimestamp="1638389407073" timestamp="5480210" />
  <DocumentChange __id="2671" _type="Delete" date="Wed Dec 01 16:32:02 EST 2021" docASTNodeCount="157" docActiveCodeLength="943" docExpressionCount="121" docLength="943" endLine="30" length="668" offset="372" repeat="2" startLine="11" starttimestamp="1638389407073" timestamp="4915513" timestamp2="4916158">
    <text><![CDATA[
//		if (arg0.isAtom()) {
//			return arg0.eval(arg1);
//		}
//		SExpression condition = arg0.getTail();
//		if(condition.isNIL()) {
//				return NilAtomicExpressionFactory.newInstance();
//		}
//		return condHelper(condition, arg1);
//		if (!condition.getHead().isAtom() &&!condition.getHead().getHead().isNIL()) {
//			if (condition.getHead().getTail().isNIL()) {
//				return condition.getHead().getHead().eval(arg1);
//			} else {
//				return condition.getHead().getTail().getHead().eval(arg1);
//			}
//		}else if (condition.getHead().isAtom()) {
//			return condition.getHead().eval(arg1);
//		}else {
//			return eval(condition, arg1);
//		}]]></text>
  </DocumentChange>
  <DocumentChange __id="2677" _type="Delete" date="Wed Dec 01 16:32:05 EST 2021" docASTNodeCount="157" docActiveCodeLength="937" docExpressionCount="121" docLength="937" endLine="28" length="6" offset="917" repeat="4" startLine="26" starttimestamp="1638389407073" timestamp="4918257" timestamp2="4919245">
    <text><![CDATA[
	
	]]></text>
  </DocumentChange>
  <DocumentChange __id="2689" _type="Delete" date="Wed Dec 01 16:32:09 EST 2021" docASTNodeCount="157" docActiveCodeLength="935" docExpressionCount="121" docLength="935" endLine="27" length="2" offset="918" startLine="26" starttimestamp="1638389407073" timestamp="4922094">
    <text><![CDATA[
]]></text>
  </DocumentChange>
  <DocumentChange __id="2719" _type="Delete" date="Wed Dec 01 16:32:32 EST 2021" docASTNodeCount="146" docActiveCodeLength="871" docExpressionCount="111" docLength="871" endLine="21" length="64" offset="711" startLine="20" starttimestamp="1638389407073" timestamp="4945695">
    <text><![CDATA[				return condition.getHead().getTail().getHead().eval(arg1);
]]></text>
  </DocumentChange>
  <DocumentChange __id="2721" _type="Insert" date="Wed Dec 01 16:32:33 EST 2021" docASTNodeCount="157" docActiveCodeLength="935" docExpressionCount="121" docLength="935" length="64" offset="711" starttimestamp="1638389407073" timestamp="4946815">
    <text><![CDATA[				return condition.getHead().getTail().getHead().eval(arg1);
]]></text>
  </DocumentChange>
  <DocumentChange __id="2747" _type="Delete" date="Wed Dec 01 16:33:19 EST 2021" docASTNodeCount="145" docActiveCodeLength="883" docExpressionCount="109" docLength="883" endLine="16" length="52" offset="538" repeat="2" startLine="16" starttimestamp="1638389407073" timestamp="4992299" timestamp2="4992673">
    <text><![CDATA[ &&!condition.getHead().getHead().eval(arg1).isNIL()]]></text>
  </DocumentChange>
  <DocumentChange __id="2798" _type="Insert" date="Wed Dec 01 16:34:28 EST 2021" docASTNodeCount="157" docActiveCodeLength="935" docExpressionCount="121" docLength="935" length="52" offset="538" repeat="2" starttimestamp="1638389407073" timestamp="5061243" timestamp2="5061849">
    <text><![CDATA[ &&!condition.getHead().getHead().eval(arg1).isNIL()]]></text>
  </DocumentChange>
  <DocumentChange __id="2858" _type="Insert" date="Wed Dec 01 16:35:33 EST 2021" docASTNodeCount="159" docActiveCodeLength="952" docExpressionCount="122" docLength="952" length="17" offset="501" repeat="13" starttimestamp="1638389407073" timestamp="5126407" timestamp2="5129515">
    <text><![CDATA[
		if (condigit)]]></text>
  </DocumentChange>
  <DocumentChange __id="2884" _type="Delete" date="Wed Dec 01 16:35:36 EST 2021" docASTNodeCount="159" docActiveCodeLength="949" docExpressionCount="122" docLength="949" endLine="16" length="3" offset="514" repeat="3" startLine="16" starttimestamp="1638389407073" timestamp="5129919" timestamp2="5130260">
    <text><![CDATA[git]]></text>
  </DocumentChange>
  <DocumentChange __id="2890" _type="Insert" date="Wed Dec 01 16:35:38 EST 2021" docASTNodeCount="161" docActiveCodeLength="957" docExpressionCount="124" docLength="957" length="8" offset="514" repeat="8" starttimestamp="1638389407073" timestamp="5131402" timestamp2="5132090">
    <text><![CDATA[tion.get]]></text>
  </DocumentChange>
  <DocumentChange __id="2907" _type="Replace" date="Wed Dec 01 16:35:40 EST 2021" docASTNodeCount="161" docActiveCodeLength="963" docExpressionCount="124" docLength="963" endLine="16" insertionLength="9" int_docASTNodeCount="161" int_docActiveCodeLength="954" int_docExpressionCount="123" int_docLength="954" length="3" offset="519" startLine="16" starttimestamp="1638389407073" timestamp="5133049">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[getHead()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2909" _type="Insert" date="Wed Dec 01 16:35:40 EST 2021" docASTNodeCount="163" docActiveCodeLength="966" docExpressionCount="126" docLength="966" length="3" offset="528" repeat="3" starttimestamp="1638389407073" timestamp="5133241" timestamp2="5133550">
    <text><![CDATA[.is]]></text>
  </DocumentChange>
  <DocumentChange __id="2916" _type="Replace" date="Wed Dec 01 16:35:41 EST 2021" docASTNodeCount="163" docActiveCodeLength="972" docExpressionCount="126" docLength="972" endLine="16" insertionLength="8" int_docASTNodeCount="163" int_docActiveCodeLength="964" int_docExpressionCount="126" int_docLength="964" length="2" offset="529" startLine="16" starttimestamp="1638389407073" timestamp="5134499">
    <deletedText><![CDATA[is]]></deletedText>
    <insertedText><![CDATA[isList()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2920" _type="Insert" date="Wed Dec 01 16:35:42 EST 2021" docASTNodeCount="164" docActiveCodeLength="984" docExpressionCount="126" docLength="984" length="12" offset="538" repeat="3" starttimestamp="1638389407073" timestamp="5135828" timestamp2="5136632">
    <text><![CDATA[ {
			
		}]]></text>
  </DocumentChange>
  <DocumentChange __id="2926" _type="Insert" date="Wed Dec 01 16:35:47 EST 2021" docASTNodeCount="168" docActiveCodeLength="1004" docExpressionCount="129" docLength="1004" length="20" offset="545" repeat="20" starttimestamp="1638389407073" timestamp="5140204" timestamp2="5142726">
    <text><![CDATA[return condition.get]]></text>
  </DocumentChange>
  <DocumentChange __id="2966" _type="Replace" date="Wed Dec 01 16:35:50 EST 2021" docASTNodeCount="168" docActiveCodeLength="1010" docExpressionCount="129" docLength="1010" endLine="17" insertionLength="9" int_docASTNodeCount="166" int_docActiveCodeLength="1001" int_docExpressionCount="127" int_docLength="1001" length="3" offset="562" startLine="17" starttimestamp="1638389407073" timestamp="5143426">
    <deletedText><![CDATA[get]]></deletedText>
    <insertedText><![CDATA[getHead()]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="2973" _type="Replace" date="Wed Dec 01 16:35:57 EST 2021" docASTNodeCount="173" docActiveCodeLength="1032" docExpressionCount="134" docLength="1032" endLine="17" insertionLength="51" int_docASTNodeCount="164" int_docActiveCodeLength="981" int_docExpressionCount="126" int_docLength="981" length="29" offset="542" startLine="17" starttimestamp="1638389407073" timestamp="5150637">
    <deletedText><![CDATA[			return condition.getHead()]]></deletedText>
    <insertedText><![CDATA[			return condition.getHead().getHead().eval(arg1);]]></insertedText>
  </DocumentChange>
  <DocumentChange __id="3022" _type="Insert" date="Wed Dec 01 16:36:21 EST 2021" docASTNodeCount="144" docActiveCodeLength="995" docExpressionCount="106" docLength="1034" length="2" offset="503" starttimestamp="1638389407073" timestamp="5174872">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3024" _type="Insert" date="Wed Dec 01 16:36:21 EST 2021" docASTNodeCount="135" docActiveCodeLength="944" docExpressionCount="98" docLength="1036" length="2" offset="544" starttimestamp="1638389407073" timestamp="5174874">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3025" _type="Insert" date="Wed Dec 01 16:36:21 EST 2021" docASTNodeCount="157" docActiveCodeLength="941" docExpressionCount="121" docLength="1038" length="2" offset="599" starttimestamp="1638389407073" timestamp="5174874">
    <text><![CDATA[//]]></text>
  </DocumentChange>
  <DocumentChange __id="3050" _type="Delete" date="Wed Dec 01 16:41:07 EST 2021" docASTNodeCount="157" docActiveCodeLength="935" docExpressionCount="121" docLength="935" endLine="18" length="103" offset="501" repeat="2" startLine="15" starttimestamp="1638389407073" timestamp="5460440" timestamp2="5460855">
    <text><![CDATA[
//		if (condition.getHead().isList()) {
//			return condition.getHead().getHead().eval(arg1);
//		}]]></text>
  </DocumentChange>
  <Command __id="3085" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:41:14 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="5467330">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="3087" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:41:18 EST 2021" docASTNodeCount="343" docActiveCodeLength="1927" docExpressionCount="249" docLength="2108" projectName="a5" starttimestamp="1638389407073" timestamp="5471355">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FunctionEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.FunctionFactory;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.evaluator.function.LambdaFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.SExpression;¶¶public class FunctionEvaluator implements Evaluator{¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		IdentifierAtom[] argNames1 = new IdentifierAtom[1];¶		SExpression current = arg0.getTail().getHead().getTail().getHead();¶		int index = 0;¶		if(current.isAtom()) {¶			argNames1 = new IdentifierAtom[0];¶			if (arg0.getTail().isList()) {¶				SExpression body =arg0.getTail().getHead().getTail().getTail();¶				Lambda lambda = LambdaFactory.newInstance(argNames1, body);¶				return FunctionFactory.newInstance(lambda, arg1);¶			}¶			Lambda lambda = LambdaFactory.newInstance(argNames1, arg0.getTail().getTail());¶			return FunctionFactory.newInstance(lambda, arg1);¶		}¶		while(!current.getTail().isNIL()) {¶			// expand size if you still need to add arg names¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶			current = current.getTail();¶			index++;¶		}¶		//add last argument (the last argument has nil as its tail)¶		if (!current.getHead().isNIL()) {¶			argNames1 = expandArray(argNames1, index);¶			argNames1[index] = (IdentifierAtom) current.getHead();¶		}¶		¶		Lambda lambda =  LambdaFactory.newInstance(argNames1, arg0.getTail().getHead().getTail().getTail());¶	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);¶		return FunctionFactory.newInstance(lambda, arg1);¶	}¶	¶	private IdentifierAtom[] expandArray(IdentifierAtom[] array, int index) {¶		if (index == array.length) {¶			int size = array.length+ 1;¶			IdentifierAtom[] newArray = new IdentifierAtom[size];¶			for (int i = 0; i < array.length; i++) {¶				newArray[i] = array[i];¶			}¶			//array = newArray;¶			return newArray;¶		}¶		return array;¶		¶	}¶	¶¶}¶")]]]></diff>
  </Command>
  <DocumentChange __id="3094" _type="Delete" date="Wed Dec 01 16:41:22 EST 2021" docASTNodeCount="343" docActiveCodeLength="1922" docExpressionCount="249" docLength="2049" endLine="42" length="59" offset="1628" repeat="2" startLine="40" starttimestamp="1638389407073" timestamp="5475850" timestamp2="5476014">
    <text><![CDATA[
	//	Lambda lambda = lambdaHelper(arg0.getTail(), arg1);
]]></text>
  </DocumentChange>
  <Command __id="3120" _type="PauseCommand" date="Wed Dec 01 16:41:29 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5482123">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1913]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3119" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:41:29 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="5482123">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="3121" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:41:30 EST 2021" docASTNodeCount="411" docActiveCodeLength="2609" docExpressionCount="312" docLength="2609" projectName="a5" starttimestamp="1638389407073" timestamp="5483033">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\src\functional\FuncallEvaluator.java]]></filePath>
    <diff><![CDATA[[Diff(EQUAL,"package functional;¶¶import java.util.Optional;¶¶import main.lisp.evaluator.BuiltinOperationManagerSingleton;¶import main.lisp.evaluator.Environment;¶import main.lisp.evaluator.Evaluator;¶import main.lisp.evaluator.function.Function;¶import main.lisp.evaluator.function.Lambda;¶import main.lisp.parser.terms.ExpressionFactory;¶import main.lisp.parser.terms.IdentifierAtom;¶import main.lisp.parser.terms.NilAtomicExpressionFactory;¶import main.lisp.parser.terms.SExpression;¶¶public class FuncallEvaluator implements Evaluator {¶¶	@Override¶	public SExpression eval(SExpression arg0, Environment arg1) {¶		ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		SExpression current = arg0.getTail();¶		¶		SExpression lambdaOrFunction = null;¶		if (!current.getHead().isAtom()) {¶			lambdaOrFunction = current.getHead().eval(arg1);¶		}¶		if (lambdaOrFunction instanceof Lambda) {¶			Environment childEnvironment = arg1.newChild();¶			return evaluateLambda((Lambda) lambdaOrFunction, childEnvironment, arg1, current.getTail());¶		} else if(lambdaOrFunction instanceof Function) {¶			return evaluateLambda (((Function) lambdaOrFunction).getLambda(), ((Function) lambdaOrFunction).getEnvironment().newChild(), ((Function) lambdaOrFunction).getEnvironment(),current.getTail() );¶		} else {¶			final Optional<SExpression> isLambda = arg1.lookup((IdentifierAtom) current.getHead());¶			if (!isLambda.isEmpty() && isLambda.get() instanceof Lambda) {¶				Environment childEnvironment = arg1.newChild();¶				return evaluateLambda((Lambda) isLambda.get(), childEnvironment, arg1, current.getTail());¶			} else if (!isLambda.isEmpty() && isLambda.get() instanceof Function) {¶				¶				return evaluateLambda (((Function) isLambda.get()).getLambda(), ((Function) isLambda.get()).getEnvironment().newChild(), ((Function) isLambda.get()).getEnvironment(),current.getTail() ); ¶			}¶			¶			return ExpressionFactory.newInstance(NilAtomicExpressionFactory.newInstance(), NilAtomicExpressionFactory.newInstance());¶		}¶	}¶	¶	private SExpression evaluateLambda(Lambda lambda, Environment childEnvironment, Environment environment, SExpression current) {¶		IdentifierAtom[] argNames = lambda.getArgumentNames();¶		for(int i = 0; i < argNames.length; i++) {¶			if (current.isAtom()) {¶				childEnvironment.assign(argNames[i], current);¶			} else {¶				childEnvironment.assign(argNames[i], current.getHead().eval(environment));¶				current = current.getTail();¶			}¶		}¶	return lambda.eval(childEnvironment);¶	}¶¶}¶")]]]></diff>
  </Command>
  <Command __id="3122" _type="MoveCaretCommand" caretOffset="731" date="Wed Dec 01 16:41:30 EST 2021" docOffset="1167" starttimestamp="1638389407073" timestamp="5483111" />
  <Command __id="3123" _type="DiffBasedFileOpenCommand" date="Wed Dec 01 16:41:30 EST 2021" projectName="a5" starttimestamp="1638389407073" timestamp="5483521">
    <filePath><![CDATA[C:\Users\rarael\OneDrive\Documents\COMPSCIENCE\COMP 524\a5\test2.lisp]]></filePath>
    <diff><![CDATA[null]]></diff>
  </Command>
  <Command __id="3125" _type="PauseCommand" date="Wed Dec 01 16:41:36 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="5489644">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[6123]]></pause>
    <nextType><![CDATA[Open File]]></nextType>
    <next><![CDATA[DiffBasedFileOpenCommand]]></next>
  </Command>
  <Command __id="3126" _type="MoveCaretCommand" caretOffset="0" date="Wed Dec 01 16:41:36 EST 2021" docOffset="0" starttimestamp="1638389407073" timestamp="5489729" />
  <Command __id="3128" _type="PauseCommand" date="Wed Dec 01 16:45:06 EST 2021" range="2m-5m" starttimestamp="1638389407073" timestamp="5699228">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[209499]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3127" _type="ShellCommand" date="Wed Dec 01 16:45:06 EST 2021" starttimestamp="1638389407073" timestamp="5699228" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3130" _type="PauseCommand" date="Wed Dec 01 16:46:11 EST 2021" range="1m-2m" starttimestamp="1638389407073" timestamp="5764658">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[65430]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3129" _type="ShellCommand" date="Wed Dec 01 16:46:11 EST 2021" starttimestamp="1638389407073" timestamp="5764658" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3131" _type="ShellCommand" date="Wed Dec 01 16:46:12 EST 2021" starttimestamp="1638389407073" timestamp="5765606" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3133" _type="PauseCommand" date="Wed Dec 01 16:48:00 EST 2021" range="1m-2m" starttimestamp="1638389407073" timestamp="5873141">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[107535]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3132" _type="ShellCommand" date="Wed Dec 01 16:48:00 EST 2021" starttimestamp="1638389407073" timestamp="5873141" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3134" _type="MoveCaretCommand" caretOffset="923" date="Wed Dec 01 16:48:00 EST 2021" docOffset="1247" starttimestamp="1638389407073" timestamp="5873234" />
  <Command __id="3136" _type="PauseCommand" date="Wed Dec 01 16:48:02 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5875799">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[2565]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3135" _type="ShellCommand" date="Wed Dec 01 16:48:02 EST 2021" starttimestamp="1638389407073" timestamp="5875799" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3138" _type="PauseCommand" date="Wed Dec 01 16:49:18 EST 2021" range="1m-2m" starttimestamp="1638389407073" timestamp="5951148">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[75349]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3137" _type="ShellCommand" date="Wed Dec 01 16:49:18 EST 2021" starttimestamp="1638389407073" timestamp="5951148" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3140" _type="PauseCommand" date="Wed Dec 01 16:49:20 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5952928">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1780]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3139" _type="MoveCaretCommand" caretOffset="830" date="Wed Dec 01 16:49:20 EST 2021" docOffset="1154" starttimestamp="1638389407073" timestamp="5952928" />
  <Command __id="3142" _type="PauseCommand" date="Wed Dec 01 16:49:21 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5954820">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[1892]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[Insert]]></next>
  </Command>
  <Command __id="3143" _type="InsertStringCommand" date="Wed Dec 01 16:49:21 EST 2021" starttimestamp="1638389407073" timestamp="5954822" timestamp2="5954822">
    <data><![CDATA[n]]></data>
  </Command>
  <Command __id="3145" _type="InsertStringCommand" date="Wed Dec 01 16:49:21 EST 2021" starttimestamp="1638389407073" timestamp="5954896" timestamp2="5954896">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3147" _type="InsertStringCommand" date="Wed Dec 01 16:49:22 EST 2021" starttimestamp="1638389407073" timestamp="5954981" timestamp2="5954981">
    <data><![CDATA[w]]></data>
  </Command>
  <Command __id="3149" _type="InsertStringCommand" date="Wed Dec 01 16:49:22 EST 2021" starttimestamp="1638389407073" timestamp="5955743" timestamp2="5955743">
    <data><![CDATA[ ]]></data>
  </Command>
  <Command __id="3151" _type="InsertStringCommand" date="Wed Dec 01 16:49:23 EST 2021" starttimestamp="1638389407073" timestamp="5955939" timestamp2="5955939">
    <data><![CDATA[Q]]></data>
  </Command>
  <Command __id="3153" _type="InsertStringCommand" date="Wed Dec 01 16:49:23 EST 2021" starttimestamp="1638389407073" timestamp="5956123" timestamp2="5956123">
    <data><![CDATA[u]]></data>
  </Command>
  <Command __id="3155" _type="InsertStringCommand" date="Wed Dec 01 16:49:23 EST 2021" starttimestamp="1638389407073" timestamp="5956229" timestamp2="5956229">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3157" _type="InsertStringCommand" date="Wed Dec 01 16:49:23 EST 2021" starttimestamp="1638389407073" timestamp="5956324" timestamp2="5956324">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3159" _type="InsertStringCommand" date="Wed Dec 01 16:49:23 EST 2021" starttimestamp="1638389407073" timestamp="5956419" timestamp2="5956419">
    <data><![CDATA[e]]></data>
  </Command>
  <Command __id="3161" _type="InsertStringCommand" date="Wed Dec 01 16:49:24 EST 2021" starttimestamp="1638389407073" timestamp="5957392" timestamp2="5957392">
    <data><![CDATA[A]]></data>
  </Command>
  <Command __id="3163" _type="InsertStringCommand" date="Wed Dec 01 16:49:24 EST 2021" starttimestamp="1638389407073" timestamp="5957561" timestamp2="5957561">
    <data><![CDATA[t]]></data>
  </Command>
  <Command __id="3165" _type="InsertStringCommand" date="Wed Dec 01 16:49:24 EST 2021" starttimestamp="1638389407073" timestamp="5957630" timestamp2="5957630">
    <data><![CDATA[o]]></data>
  </Command>
  <Command __id="3167" _type="InsertStringCommand" date="Wed Dec 01 16:49:24 EST 2021" starttimestamp="1638389407073" timestamp="5957706" timestamp2="5957706">
    <data><![CDATA[m]]></data>
  </Command>
  <Command __id="3169" _type="InsertStringCommand" date="Wed Dec 01 16:49:25 EST 2021" starttimestamp="1638389407073" timestamp="5957943" timestamp2="5957943">
    <data><![CDATA[(]]></data>
  </Command>
  <Command __id="3171" _type="PauseCommand" date="Wed Dec 01 16:49:28 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5961067">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[3124]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3170" _type="MoveCaretCommand" caretOffset="864" date="Wed Dec 01 16:49:28 EST 2021" docOffset="1188" starttimestamp="1638389407073" timestamp="5961067" />
  <Command __id="3173" _type="InsertStringCommand" date="Wed Dec 01 16:49:28 EST 2021" starttimestamp="1638389407073" timestamp="5961732" timestamp2="5961732">
    <data><![CDATA[)]]></data>
  </Command>
  <Command __id="3175" _type="PauseCommand" date="Wed Dec 01 16:49:31 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5964457">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[InsertStringCommand]]></prev>
    <pause><![CDATA[2725]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3174" _type="ShellCommand" date="Wed Dec 01 16:49:31 EST 2021" starttimestamp="1638389407073" timestamp="5964457" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3176" _type="ShellCommand" date="Wed Dec 01 16:49:31 EST 2021" starttimestamp="1638389407073" timestamp="5964544" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3180" _type="PauseCommand" date="Wed Dec 01 16:49:36 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5969449">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[Insert]]></prev>
    <pause><![CDATA[4880]]></pause>
    <nextType><![CDATA[Move Caret]]></nextType>
    <next><![CDATA[MoveCaretCommand]]></next>
  </Command>
  <Command __id="3179" _type="MoveCaretCommand" caretOffset="1013" date="Wed Dec 01 16:49:36 EST 2021" docOffset="1379" starttimestamp="1638389407073" timestamp="5969449" />
  <Command __id="3182" _type="PauseCommand" date="Wed Dec 01 16:49:39 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5972758">
    <prevType><![CDATA[Move Caret]]></prevType>
    <prev><![CDATA[MoveCaretCommand]]></prev>
    <pause><![CDATA[3309]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3181" _type="SelectTextCommand" caretOffset="865" date="Wed Dec 01 16:49:39 EST 2021" end="865" start="830" starttimestamp="1638389407073" timestamp="5972758" />
  <Command __id="3184" _type="PauseCommand" date="Wed Dec 01 16:49:41 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="5974428">
    <prevType><![CDATA[Select]]></prevType>
    <prev><![CDATA[SelectTextCommand]]></prev>
    <pause><![CDATA[1670]]></pause>
    <nextType><![CDATA[Edit]]></nextType>
    <next><![CDATA[CopyCommand]]></next>
  </Command>
  <Command __id="3183" _type="CopyCommand" date="Wed Dec 01 16:49:41 EST 2021" starttimestamp="1638389407073" timestamp="5974428" />
  <Command __id="3186" _type="PauseCommand" date="Wed Dec 01 16:49:44 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="5977241">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[CopyCommand]]></prev>
    <pause><![CDATA[2813]]></pause>
    <nextType><![CDATA[Select]]></nextType>
    <next><![CDATA[SelectTextCommand]]></next>
  </Command>
  <Command __id="3185" _type="SelectTextCommand" caretOffset="522" date="Wed Dec 01 16:49:44 EST 2021" end="522" start="502" starttimestamp="1638389407073" timestamp="5977241" />
  <Command __id="3188" _type="PasteCommand" date="Wed Dec 01 16:49:44 EST 2021" starttimestamp="1638389407073" timestamp="5977918" />
  <Command __id="3190" _type="PauseCommand" date="Wed Dec 01 16:50:06 EST 2021" range="20s-30s" starttimestamp="1638389407073" timestamp="5999279">
    <prevType><![CDATA[Edit]]></prevType>
    <prev><![CDATA[PasteCommand]]></prev>
    <pause><![CDATA[21361]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3189" _type="ShellCommand" date="Wed Dec 01 16:50:06 EST 2021" starttimestamp="1638389407073" timestamp="5999279" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3192" _type="PauseCommand" date="Wed Dec 01 16:50:10 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="6003361">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4082]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3191" _type="ShellCommand" date="Wed Dec 01 16:50:10 EST 2021" starttimestamp="1638389407073" timestamp="6003361" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3194" _type="PauseCommand" date="Wed Dec 01 16:50:16 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="6009631">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[6270]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3193" _type="ShellCommand" date="Wed Dec 01 16:50:16 EST 2021" starttimestamp="1638389407073" timestamp="6009631" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3196" _type="PauseCommand" date="Wed Dec 01 16:55:08 EST 2021" range="2m-5m" starttimestamp="1638389407073" timestamp="6301806">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[292175]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3195" _type="ShellCommand" date="Wed Dec 01 16:55:08 EST 2021" starttimestamp="1638389407073" timestamp="6301806" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3198" _type="PauseCommand" date="Wed Dec 01 16:55:29 EST 2021" range="20s-30s" starttimestamp="1638389407073" timestamp="6322242">
    <prevType><![CDATA[Gained Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[20436]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3197" _type="ShellCommand" date="Wed Dec 01 16:55:29 EST 2021" starttimestamp="1638389407073" timestamp="6322242" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3200" _type="PauseCommand" date="Wed Dec 01 16:56:55 EST 2021" range="1m-2m" starttimestamp="1638389407073" timestamp="6408456">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[86214]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3199" _type="ShellCommand" date="Wed Dec 01 16:56:55 EST 2021" starttimestamp="1638389407073" timestamp="6408456" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3201" _type="ShellCommand" date="Wed Dec 01 16:56:56 EST 2021" starttimestamp="1638389407073" timestamp="6409308" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3203" _type="PauseCommand" date="Wed Dec 01 16:56:58 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="6411033">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[1725]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3202" _type="ShellCommand" date="Wed Dec 01 16:56:58 EST 2021" starttimestamp="1638389407073" timestamp="6411033" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3204" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:56:58 EST 2021" starttimestamp="1638389407073" timestamp="6411148" />
  <Command __id="3205" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:56:58 EST 2021" starttimestamp="1638389407073" timestamp="6411173" />
  <Command __id="3206" _type="ProgramExecutionEvent" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:56:58 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="6411546" type="Run" />
  <Command __id="3207" _type="RunCommand" className="/a5/src/a5/LocalChecks.java" date="Wed Dec 01 16:56:58 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="6411546" type="Run" />
  <Command __id="3208" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:56:58 EST 2021" starttimestamp="1638389407073" timestamp="6411580" />
  <Command __id="3209" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:56:58 EST 2021" starttimestamp="1638389407073" timestamp="6411584" />
  <Command __id="3210" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:56:58 EST 2021" starttimestamp="1638389407073" timestamp="6411585" />
  <Command __id="3211" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:56:58 EST 2021" starttimestamp="1638389407073" timestamp="6411586" />
  <Command __id="3212" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:56:58 EST 2021" starttimestamp="1638389407073" timestamp="6411586" />
  <Command __id="3213" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:56:58 EST 2021" starttimestamp="1638389407073" timestamp="6411587" />
  <Command __id="3214" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:56:58 EST 2021" starttimestamp="1638389407073" timestamp="6411587" />
  <Command __id="3215" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:56:58 EST 2021" starttimestamp="1638389407073" timestamp="6411589" />
  <Command __id="3217" _type="PauseCommand" date="Wed Dec 01 16:57:01 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="6414030">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[2441]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3216" _type="ShellCommand" date="Wed Dec 01 16:57:01 EST 2021" starttimestamp="1638389407073" timestamp="6414030" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3219" _type="PauseCommand" date="Wed Dec 01 16:57:05 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="6418057">
    <prevType><![CDATA[Lost Focus]]></prevType>
    <prev><![CDATA[ShellCommand]]></prev>
    <pause><![CDATA[4027]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="3218" _type="ConsoleOutput" date="Wed Dec 01 16:57:05 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="6418057" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):61
Test execution time (ms):1
Test execution time (ms):9
Test execution time (ms):12
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A6ExtraCondChecker did not pass completely:Expected strings:NIL¶NIL¶T¶23¶NILactual string NIL¶T¶T¶NIL¶NIL%0.0¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(INSERT,"6"), Diff(EQUAL,"1¶"), Diff(DELETE,"Test execution time (ms):0¶"), Diff(EQUAL,"Test execution time (ms):1¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"9"), Diff(EQUAL,"¶Test execution time (ms):1"), Diff(DELETE,"¶CombinationChecker did not pass completely:Expected strings:4actual string NIL%0.0¶¶Test execution time (ms):1"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3220" _type="ExceptionCommand" date="Wed Dec 01 16:57:05 EST 2021" starttimestamp="1638389407073" timestamp="6418134" type="Exception">
    <exceptionString><![CDATA[java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at expression.CondEvaluator.eval(CondEvaluator.java:17)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at expression.LoadEvaluator.eval(LoadEvaluator.java:31)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AJUnitTestContext.getAndPossiblyRunJUnitPassFailTestCase(AJUnitTestContext.java:52)
	at grader.basics.junit.JUnitTestsEnvironment.getAndPossiblyRunGradableJUnitTest(JUnitTestsEnvironment.java:62)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:45)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3222" _type="PauseCommand" date="Wed Dec 01 16:57:06 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="6419677">
    <prevType><![CDATA[Exception]]></prevType>
    <prev><![CDATA[ExceptionCommand]]></prev>
    <pause><![CDATA[1543]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="3221" _type="ConsoleOutput" date="Wed Dec 01 16:57:06 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="6419677" type="ConsoleOutput">
    <outputString><![CDATA[Symbol table size:38
Running second pass checks Wed Dec 01 16:57:06 EST 2021
Start O(n2) inter- and intra class method calls:Wed Dec 01 16:57:06 EST 2021
End O(n2) inter- and intra class method calls:Wed Dec 01 16:57:06 EST 2021
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):61¶Test execution time (ms):1¶Test execution time (ms):9¶Test execution time (ms):12"), Diff(INSERT,"Symbol table size:38¶Running second pass checks Wed Dec 01 16:57:06 EST 2021¶Start O(n2) inter- and intra class method calls:Wed Dec 01 16:57:06 EST 2021¶End O(n2) inter- and intra class method calls:Wed Dec 01 16:57:06 EST 2021"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3223" _type="ConsoleOutput" date="Wed Dec 01 16:57:07 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="6420660" type="ConsoleOutput">
    <outputString><![CDATA[Finished second pass checks:Wed Dec 01 16:57:07 EST 2021
Generating checks:Wed Dec 01 16:57:07 EST 2021
Finished Generating checks:Wed Dec 01 16:57:07 EST 2021
Generating externals:Wed Dec 01 16:57:07 EST 2021
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Symbol table size:38¶Running"), Diff(INSERT,"Finished"), Diff(EQUAL," second pass checks"), Diff(DELETE," "), Diff(INSERT,":"), Diff(EQUAL,"Wed Dec 01 16:57:0"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL," EST 2021¶"), Diff(DELETE,"Start O(n2) inter- and intra class method call"), Diff(INSERT,"Generating check"), Diff(EQUAL,"s:Wed Dec 01 16:57:0"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL," EST 2021¶"), Diff(DELETE,"End O(n2) inter- and intra class method cal"), Diff(INSERT,"Finished Generating checks:Wed Dec 01 16:57:07 EST 2021¶Generating externa"), Diff(EQUAL,"ls:Wed Dec 01 16:57:0"), Diff(DELETE,"6"), Diff(INSERT,"7"), Diff(EQUAL," EST 2021¶")]]]></diff>
  </Command>
  <Command __id="3224" _type="ConsoleOutput" date="Wed Dec 01 16:57:07 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="6420762" type="ConsoleOutput">
    <outputString><![CDATA[Finished Generating externals:Wed Dec 01 16:57:07 EST 2021
Test execution time (ms):2623
Test execution time (ms):13
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Finished "), Diff(DELETE,"second pass checks:Wed Dec 01 16:57:07 EST 2021¶"), Diff(EQUAL,"Generating "), Diff(DELETE,"check"), Diff(INSERT,"external"), Diff(EQUAL,"s:Wed Dec 01 16:57:07 EST 2021¶"), Diff(DELETE,"Finished Generating checks:Wed Dec 01 16:57:07 EST 2021¶Generating externals:Wed Dec 01 16:57:07 EST 202"), Diff(INSERT,"Test execution time (ms):2623¶Test execution time (ms):13¶Test execution time (ms):"), Diff(EQUAL,"1¶")]]]></diff>
  </Command>
  <Command __id="3225" _type="ConsoleOutput" date="Wed Dec 01 16:57:07 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="6420864" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
FuncallCallsExpressionFactory did not pass completely:Checkstyle output does not match:.*INFO.*BasicFuncallEvaluator(.*)main.lisp.parser.terms.ExpressionFactory!newInstance:main.lisp.parser.terms.SExpression;main.lisp.parser.terms.SExpression->SExpression(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?%0.0

Test execution time (ms):12
Test execution time (ms):8
Test execution time (ms):15
Test execution time (ms):9
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Finished Generating externals:Wed Dec 01 16:57:07 EST 2021"), Diff(INSERT,"Test execution time (ms):0¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶FuncallCallsExpressionFactory did not pass completely:Checkstyle output does not match:.*INFO.*BasicFuncallEvaluator(.*)main.lisp.parser.terms.ExpressionFactory!newInstance:main.lisp.parser.terms.SExpression;main.lisp.parser.terms.SExpression->SExpression(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?%0.0¶¶Test execution time (ms):12"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"2623"), Diff(INSERT,"8"), Diff(EQUAL,"¶Test execution time (ms):1"), Diff(DELETE,"3"), Diff(INSERT,"5"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"9"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3227" _type="PauseCommand" date="Wed Dec 01 16:57:09 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="6422638">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1774]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="3226" _type="ConsoleOutput" date="Wed Dec 01 16:57:09 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="6422638" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):0¶Test execution time (ms):"), Diff(DELETE,"1¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶FuncallCallsExpressionFactory did not pass completely:Checkstyle output does not match:.*INFO.*BasicFuncallEvaluator(.*)main.lisp.parser.terms.ExpressionFactory!newInstance:main.lisp.parser.terms.SExpression;main.lisp.parser.terms.SExpression->SExpression(.*)\[MissingMethodCall\].*. Is your class named or tagged properly and checkstyle file upto date?%0.0¶¶Test execution time (ms):12¶Test execution time (ms):8¶Test execution time (ms):15¶Test execution time (ms):9"), Diff(INSERT,"0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3228" _type="ConsoleOutput" date="Wed Dec 01 16:57:10 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="6423566" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):1
Test execution time (ms):1
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"0¶Test execution time (ms):0"), Diff(INSERT,"1¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):1¶Test execution time (ms):1"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3230" _type="PauseCommand" date="Wed Dec 01 16:57:11 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="6424815">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1249]]></pause>
    <nextType><![CDATA[IO]]></nextType>
    <next><![CDATA[ConsoleOutput]]></next>
  </Command>
  <Command __id="3229" _type="ConsoleOutput" date="Wed Dec 01 16:57:11 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="6424815" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):13
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1"), Diff(DELETE,"¶Test execution time (ms):1¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):0¶Test execution time (ms):1¶Test execution time (ms):1"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3231" _type="ConsoleOutput" date="Wed Dec 01 16:57:12 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="6425698" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1"), Diff(DELETE,"3"), Diff(INSERT,"¶Test execution time (ms):0"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3232" _type="ExceptionCommand" date="Wed Dec 01 16:57:13 EST 2021" starttimestamp="1638389407073" timestamp="6426580" type="Exception">
    <exceptionString><![CDATA[java.lang.IllegalStateException: No evaluator registered for operator 'CURRY'
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:14)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:24)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at jdk.internal.reflect.GeneratedMethodAccessor26.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1906)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1701)
	at bus.uigen.controller.MethodInvocationManager.invokeMethods(MethodInvocationManager.java:1585)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1538)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1531)
	at bus.uigen.controller.MethodInvocationManager.invokeDoubleClickMethod(MethodInvocationManager.java:1406)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3233" _type="ConsoleOutput" date="Wed Dec 01 16:57:14 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="6427405" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):0
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(EQUAL,"Test execution time (ms):1¶Test execution time (ms):0¶"), Diff(INSERT,"Test execution time (ms):0¶Test execution time (ms):0¶")]]]></diff>
  </Command>
  <Command __id="3235" _type="PauseCommand" date="Wed Dec 01 16:57:15 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="6428405">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[1000]]></pause>
    <nextType><![CDATA[Exception]]></nextType>
    <next><![CDATA[ExceptionCommand]]></next>
  </Command>
  <Command __id="3234" _type="ExceptionCommand" date="Wed Dec 01 16:57:15 EST 2021" starttimestamp="1638389407073" timestamp="6428405" type="Exception">
    <exceptionString><![CDATA[java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at expression.CondEvaluator.eval(CondEvaluator.java:17)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.provideInput(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:100)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:133)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionInputterAndEvaluatorRegisterer.evaluate(AbstractLispExpressionInputterAndEvaluatorRegisterer.java:65)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.compareOutput(AbstractLispExpressionChecker.java:21)
	at gradingTools.comp524f19.assignment2.testcases.AbstractLispExpressionChecker.test(AbstractLispExpressionChecker.java:47)
	at grader.basics.testcase.PassFailJUnitTestCase.passfailDefaultTest(PassFailJUnitTestCase.java:226)
	at grader.basics.testcase.PassFailJUnitTestCase.defaultTest(PassFailJUnitTestCase.java:106)
	at jdk.internal.reflect.GeneratedMethodAccessor26.invoke(Unknown Source)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at grader.basics.junit.AGradableJUnitTest.test(AGradableJUnitTest.java:301)
	at grader.basics.junit.AGradableJUnitSuite.test(AGradableJUnitSuite.java:325)
	at grader.basics.junit.AGradableJUnitSuite.open(AGradableJUnitSuite.java:187)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at bus.uigen.reflect.local.AVirtualMethod.methodInvoke(AVirtualMethod.java:270)
	at bus.uigen.reflect.UnifiedMethod.invoke(UnifiedMethod.java:219)
	at bus.uigen.controller.MethodInvocationManager.invokeMethod(MethodInvocationManager.java:1444)
	at bus.uigen.undo.BasicCommand.execute(BasicCommand.java:69)
	at bus.uigen.undo.AHistoryUndoer.execute(AHistoryUndoer.java:99)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3236" _type="ConsoleOutput" date="Wed Dec 01 16:57:16 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="6429222" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):0
Test execution time (ms):1
Test execution time (ms):1
Test execution time (ms):0
Test execution time (ms):0
]]></outputString>
    <diff><![CDATA[[Diff(INSERT,"Test execution time (ms):0¶"), Diff(EQUAL,"Test execution time (ms):1¶Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"1"), Diff(EQUAL,"¶Test execution time (ms):0¶Test execution time (ms):0¶")]]]></diff>
  </Command>
  <Command __id="3237" _type="ConsoleOutput" date="Wed Dec 01 16:57:17 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="6430022" type="ConsoleOutput">
    <outputString><![CDATA[A6CommonPropertiesInherited did not pass completely:See console trace about lines failing  this check%0.0

Test execution time (ms):7
A6CommonSignaturesAreInherited did not pass completely:See console trace about lines failing  this check%0.7861271676300579

Test execution time (ms):6
Test execution time (ms):4
Test execution time (ms):3
Test execution time (ms):6
Test execution time (ms):5
Test execution time (ms):3
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"Test execution time (ms):0¶Test execution time (ms):1"), Diff(INSERT,"A6CommonPropertiesInherited did not pass completely:See console trace about lines failing  this check%0.0¶¶Test execution time (ms):7¶A6CommonSignaturesAreInherited did not pass completely:See console trace about lines failing  this check%0.7861271676300579¶¶Test execution time (ms):6¶Test execution time (ms):4¶Test execution time (ms):3"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"1"), Diff(INSERT,"6"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"5"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"0"), Diff(INSERT,"3"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3238" _type="ConsoleOutput" date="Wed Dec 01 16:57:17 EST 2021" overflow="false" starttimestamp="1638389407073" timestamp="6430125" type="ConsoleOutput">
    <outputString><![CDATA[Test execution time (ms):6
F21A6NoCheckstyleWarnings did not pass completely:Warnings found in checkstyle text, see traced console output%0.0

Test execution time (ms):2
]]></outputString>
    <diff><![CDATA[[Diff(DELETE,"A6CommonPropertiesInherited did not pass completely:See console trace about lines failing  this check%0.0¶¶"), Diff(EQUAL,"Test execution time (ms):"), Diff(DELETE,"7"), Diff(INSERT,"6"), Diff(EQUAL,"¶"), Diff(DELETE,"A6CommonSignaturesAreInherited did not pass completely:See console trace about l"), Diff(INSERT,"F21A6NoCheckstyleWarnings did not pass completely:Warn"), Diff(EQUAL,"in"), Diff(DELETE,"e"), Diff(INSERT,"g"), Diff(EQUAL,"s f"), Diff(DELETE,"ailing  this check%0.7861271676300579¶¶Test execution time (ms):6¶Test execution time (ms):4¶Test execution time (ms):3¶Test execution time (ms):6¶Test execution time (ms):5"), Diff(INSERT,"ound in checkstyle text, see traced console output%0.0¶"), Diff(EQUAL,"¶Test execution time (ms):"), Diff(DELETE,"3"), Diff(INSERT,"2"), Diff(EQUAL,"¶")]]]></diff>
  </Command>
  <Command __id="3240" _type="PauseCommand" date="Wed Dec 01 16:57:20 EST 2021" range="2s-5s" starttimestamp="1638389407073" timestamp="6433001">
    <prevType><![CDATA[IO]]></prevType>
    <prev><![CDATA[ConsoleOutput]]></prev>
    <pause><![CDATA[2876]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3239" _type="ShellCommand" date="Wed Dec 01 16:57:20 EST 2021" starttimestamp="1638389407073" timestamp="6433001" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3255" _type="PauseCommand" date="Wed Dec 01 16:57:35 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="6448324">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1001]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[EclipseCommand]]></next>
  </Command>
  <Command __id="3254" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:57:35 EST 2021" starttimestamp="1638389407073" timestamp="6448324" />
  <Command __id="3256" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:57:35 EST 2021" starttimestamp="1638389407073" timestamp="6448329" />
  <Command __id="3257" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:57:35 EST 2021" starttimestamp="1638389407073" timestamp="6448330" />
  <Command __id="3258" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:57:35 EST 2021" starttimestamp="1638389407073" timestamp="6448331" />
  <Command __id="3259" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:57:35 EST 2021" starttimestamp="1638389407073" timestamp="6448331" />
  <Command __id="3260" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:57:35 EST 2021" starttimestamp="1638389407073" timestamp="6448332" />
  <Command __id="3261" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:57:35 EST 2021" starttimestamp="1638389407073" timestamp="6448332" />
  <Command __id="3262" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:57:35 EST 2021" starttimestamp="1638389407073" timestamp="6448335" />
  <Command __id="3263" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:57:35 EST 2021" starttimestamp="1638389407073" timestamp="6448335" />
  <Command __id="3264" _type="EclipseCommand" commandID="" date="Wed Dec 01 16:57:35 EST 2021" starttimestamp="1638389407073" timestamp="6448336" />
  <Command __id="3266" _type="PauseCommand" date="Wed Dec 01 16:57:36 EST 2021" range="1s-2s" starttimestamp="1638389407073" timestamp="6449772">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[1436]]></pause>
    <nextType><![CDATA[Gained Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3265" _type="ShellCommand" date="Wed Dec 01 16:57:36 EST 2021" starttimestamp="1638389407073" timestamp="6449772" type="ECLIPSE_GAINED_FOCUS" />
  <Command __id="3267" _type="EclipseCommand" commandID="org.eclipse.ui.file.export" date="Wed Dec 01 16:57:36 EST 2021" starttimestamp="1638389407073" timestamp="6449788" />
  <Command __id="3269" _type="PauseCommand" date="Wed Dec 01 16:57:44 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="6457709">
    <prevType><![CDATA[Other]]></prevType>
    <prev><![CDATA[EclipseCommand]]></prev>
    <pause><![CDATA[7921]]></pause>
    <nextType><![CDATA[Lost Focus]]></nextType>
    <next><![CDATA[ShellCommand]]></next>
  </Command>
  <Command __id="3268" _type="ShellCommand" date="Wed Dec 01 16:57:44 EST 2021" starttimestamp="1638389407073" timestamp="6457709" type="ECLIPSE_LOST_FOCUS" />
  <Command __id="3281" _type="PauseCommand" date="Wed Dec 01 16:58:28 EST 2021" range="5s-10s" starttimestamp="1638389407073" timestamp="6501675">
    <prevType><![CDATA[Open File]]></prevType>
    <prev><![CDATA[DiffBasedFileOpenCommand]]></prev>
    <pause><![CDATA[7626]]></pause>
    <nextType><![CDATA[Other]]></nextType>
    <next><![CDATA[ConsoleInput]]></next>
  </Command>
  <Command __id="3280" _type="ConsoleInput" date="Wed Dec 01 16:58:28 EST 2021" starttimestamp="1638389407073" timestamp="6501675" type="Exception">
    <outputString><![CDATA[(load "test2.lisp")
]]></outputString>
  </Command>
  <Command __id="3282" _type="ExceptionCommand" date="Wed Dec 01 16:58:28 EST 2021" starttimestamp="1638389407073" timestamp="6501740" type="Exception">
    <exceptionString><![CDATA[29
42
42
29
42
42
42
42
LAMBDA (X Y Z) (OR (AND (>= X 13) (<= Y 30) (<= Z 30)) (AND (>= X 6) (<= Y 30) (<= Z 10)) (AND (>= X 27) (<= Y 30) (<= Z 50)) (AND (>= X 13) (<= Y 15) (<= Z 50)) (AND (>= X 13) (<= Y 120) (<= Z 10)) (AND (>= X 27) (<= Y 120) (<= Z 30)) (AND (>= X 6) (<= Y 15) (<= Z 30)))
5
LAMBDA (X) (FUNCTION (LAMBDA (Y) (* X Y)))
#<FUNCTION :LAMBDA (Y) (* X Y)>
LAMBDA (X) (COND (AND (ATOM (CAR X)) (AND (ATOM (CAR X)) (NOT (CDR X)))) (FUNCALL ISLIST (CDR X)))
Exception in thread "main" java.util.NoSuchElementException: No value present
	at java.base/java.util.Optional.get(Optional.java:148)
	at a5.VariableEval.eval(VariableEval.java:22)
	at expression.CondEvaluator.eval(CondEvaluator.java:17)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.evaluator.function.BasicLambda.doEval(BasicLambda.java:75)
	at main.lisp.parser.terms.AbstractAtom.eval(AbstractAtom.java:22)
	at functional.FuncallEvaluator.evaluateLambda(FuncallEvaluator.java:55)
	at functional.FuncallEvaluator.eval(FuncallEvaluator.java:35)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at expression.LoadEvaluator.eval(LoadEvaluator.java:31)
	at main.lisp.evaluator.BasicExpressionEvaluator.eval(BasicExpressionEvaluator.java:16)
	at evaluators.LambdaSExpressionEvaluator.eval(LambdaSExpressionEvaluator.java:33)
	at main.lisp.parser.terms.BasicExpression.eval(BasicExpression.java:26)
	at main.lisp.interpreter.ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.newInput(ObservableLispInterpreterWithEnvironmentAndLazyEvaluation.java:92)
	at main.lisp.interpreter.BasicLispInterpreterController.run(BasicLispInterpreterController.java:29)
	at main.Main.main(Main.java:31)
	at a5.RunLisp.main(RunLisp.java:21)
]]></exceptionString>
    <language><![CDATA[java]]></language>
  </Command>
  <Command __id="3283" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:58:28 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="6501763" type="Debug" />
  <Command __id="3284" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:58:28 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="6501763" type="Run" />
  <Command __id="3285" _type="ProgramExecutionEvent" className="(Unknown)" date="Wed Dec 01 16:58:28 EST 2021" kind="HitBreakPoint" projectName="(Unknown)" starttimestamp="1638389407073" timestamp="6501763" type="Debug" />
  <Command __id="3286" _type="ProgramExecutionEvent" className="/a5/src/a5/RunLisp.java" date="Wed Dec 01 16:58:28 EST 2021" kind="HitBreakPoint" projectName="a5" starttimestamp="1638389407073" timestamp="6501763" type="Run" />
</Events>
